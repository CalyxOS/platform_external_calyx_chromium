From: Tommy Webb <tommy@calyxinstitute.org>
Date: Wed, 6 Sep 2023 09:45:57 +0000
Subject: End the menace of VR/XR

Change-Id: I015210eb92008fe3acb546a206c6a0fc723acd82
---
 chrome/android/BUILD.gn                       |  1 -
 .../chrome/browser/app/ChromeActivity.java    | 29 -------------------
 .../modaldialog/ChromeTabModalPresenter.java  |  5 +---
 chrome/android/javatests/DEPS                 |  1 -
 4 files changed, 1 insertion(+), 35 deletions(-)

diff --git a/chrome/android/BUILD.gn b/chrome/android/BUILD.gn
--- a/chrome/android/BUILD.gn
+++ b/chrome/android/BUILD.gn
@@ -569,7 +569,6 @@ if (current_toolchain == default_toolchain) {
       "//components/webapps/common/android:webapk_install_java",
       "//components/webauthn/android:java",
       "//components/webrtc/android:java",
-      "//components/webxr/android:xr_java",
       "//components/zoom/android:java",
       "//content/public/android:content_java",
       "//content/public/common:common_java",
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
@@ -188,7 +188,6 @@ import org.chromium.chrome.browser.ui.messages.snackbar.SnackbarManager;
 import org.chromium.chrome.browser.ui.messages.snackbar.SnackbarManager.SnackbarManageable;
 import org.chromium.chrome.browser.ui.messages.snackbar.SnackbarManagerProvider;
 import org.chromium.chrome.browser.ui.system.StatusBarColorController;
-import org.chromium.chrome.browser.vr.VrModuleProvider;
 import org.chromium.components.browser_ui.accessibility.FontSizePrefs;
 import org.chromium.components.browser_ui.bottomsheet.BottomSheetController;
 import org.chromium.components.browser_ui.modaldialog.AppModalPresenter;
@@ -221,8 +220,6 @@ import org.chromium.components.webapps.AddToHomescreenCoordinator;
 import org.chromium.components.webapps.InstallTrigger;
 import org.chromium.components.webapps.bottomsheet.PwaBottomSheetController;
 import org.chromium.components.webapps.bottomsheet.PwaBottomSheetControllerProvider;
-import org.chromium.components.webxr.XrDelegate;
-import org.chromium.components.webxr.XrDelegateProvider;
 import org.chromium.content_public.browser.DeviceUtils;
 import org.chromium.content_public.browser.LoadUrlParams;
 import org.chromium.content_public.browser.ScreenOrientationProvider;
@@ -1021,14 +1018,11 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
                 tab.loadIfNeeded(LoadIfNeededCaller.ON_ACTIVITY_SHOWN);
             }
         }
-        VrModuleProvider.getDelegate().onActivityShown(this);
 
         MultiWindowUtils.getInstance().recordMultiWindowStateUkm(this, tab);
     }
 
     private void onActivityHidden() {
-        VrModuleProvider.getDelegate().onActivityHidden(this);
-
         Tab tab = getActivityTab();
         TabModelSelector tabModelSelector = mTabModelOrchestrator.getTabModelSelector();
         // If tab reparenting is in progress and the activity Tab isn't being reparented, e.g.
@@ -1699,8 +1693,6 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
         maybeRemoveWindowBackground();
         DownloadManagerService.getDownloadManagerService().onActivityLaunched(
                 new DownloadMessageUiDelegate());
-        VrModuleProvider.maybeInit();
-        VrModuleProvider.getDelegate().onNativeLibraryAvailable();
 
         PowerMonitor.create();
 
@@ -2180,8 +2172,6 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
             }
         }
 
-        VrModuleProvider.getDelegate().onMultiWindowModeChanged(isInMultiWindowMode);
-
         super.onMultiWindowModeChanged(isInMultiWindowMode);
     }
 
@@ -2220,17 +2210,6 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
             BackPressManager.record(Type.TEXT_BUBBLE);
         }
 
-        if (VrModuleProvider.getDelegate().onBackPressed()) {
-            BackPressManager.record(Type.VR_DELEGATE);
-            return true;
-        }
-
-        XrDelegate xrDelegate = XrDelegateProvider.getDelegate();
-        if (xrDelegate != null && xrDelegate.onBackPressed()) {
-            BackPressManager.record(Type.XR_DELEGATE);
-            return true;
-        }
-
         if (mRootUiCoordinator.getBottomSheetController() != null
                 && mRootUiCoordinator.getBottomSheetController().handleBackPress()) {
             BackPressManager.record(BackPressHandler.Type.BOTTOM_SHEET);
@@ -2282,11 +2261,6 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
             // TODO(crbug.com/1279941): consider move to RootUiCoordinator.
             mTextBubbleBackPressHandler = new TextBubbleBackPressHandler();
             mBackPressManager.addHandler(mTextBubbleBackPressHandler, Type.TEXT_BUBBLE);
-            mBackPressManager.addHandler(VrModuleProvider.getDelegate(), Type.VR_DELEGATE);
-
-            if (XrDelegateProvider.getDelegate() != null) {
-                mBackPressManager.addHandler(XrDelegateProvider.getDelegate(), Type.XR_DELEGATE);
-            }
 
             mLayoutManagerSupplier.addObserver((layoutManager) -> {
                 assert !mBackPressManager.has(Type.SCENE_OVERLAY)
@@ -2716,9 +2690,6 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
     @Override
     public boolean onActivityResultWithNative(int requestCode, int resultCode, Intent intent) {
         if (super.onActivityResultWithNative(requestCode, resultCode, intent)) return true;
-        if (VrModuleProvider.getDelegate().onActivityResultWithNative(requestCode, resultCode)) {
-            return true;
-        }
         return false;
     }
 
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/modaldialog/ChromeTabModalPresenter.java b/chrome/android/java/src/org/chromium/chrome/browser/modaldialog/ChromeTabModalPresenter.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/modaldialog/ChromeTabModalPresenter.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/modaldialog/ChromeTabModalPresenter.java
@@ -30,8 +30,6 @@ import org.chromium.chrome.browser.tabmodel.TabModelSelector;
 import org.chromium.chrome.browser.toolbar.ToolbarManager;
 import org.chromium.components.browser_ui.modaldialog.TabModalPresenter;
 import org.chromium.components.browser_ui.util.BrowserControlsVisibilityDelegate;
-import org.chromium.components.webxr.XrDelegate;
-import org.chromium.components.webxr.XrDelegateProvider;
 import org.chromium.content_public.browser.WebContents;
 import org.chromium.ui.UiUtils;
 import org.chromium.ui.modelutil.PropertyModel;
@@ -307,8 +305,7 @@ public class ChromeTabModalPresenter
         // 1) Don't exit fullscreen
         // 2) Toggle the Controls visibility appropriately.
         // Note that if we don't have an XrDelegate, then we can't have an AR Session.
-        XrDelegate xrDelegate = XrDelegateProvider.getDelegate();
-        boolean isInArSession = (xrDelegate != null && xrDelegate.hasActiveArSession());
+        boolean isInArSession = false;
 
         // If needed, exit fullscreen mode before showing the tab modal dialog view.
         if (!isInArSession) {
diff --git a/chrome/android/javatests/DEPS b/chrome/android/javatests/DEPS
--- a/chrome/android/javatests/DEPS
+++ b/chrome/android/javatests/DEPS
@@ -53,7 +53,6 @@ include_rules = [
   "+components/sync/android/java/src/org/chromium/components/sync",
   "+components/sync/test",
   "+components/webauthn/android/java",
-  "+components/webxr/android",
 
   "-content/public/android/java",
   "+content/public/android/java/src/org/chromium/content_public",
-- 

