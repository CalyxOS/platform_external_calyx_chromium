From: uazo <uazo@users.noreply.github.com>
Date: Wed, 30 Sep 2020 07:40:01 +0000
Subject: Restore chrome password store

License: GPL-2.0-or-later - https://spdx.org/licenses/GPL-2.0-or-later.html
---
 chrome/android/java/AndroidManifest.xml       |   5 +-
 .../autofill/AutofillClientProviderUtils.java |   1 +
 .../login_db_deprecation_runner_factory.cc    |   2 +-
 .../strings/android_chrome_strings.grd        |   2 +-
 .../ui/autofill/autofill_client_provider.cc   |  16 ---
 .../autofill/core/common/autofill_features.cc |   1 +
 .../core/browser/buildflags.gni               |   2 +-
 .../password_manager_features_util.cc         |   1 +
 components/sync/service/sync_prefs.cc         |   2 +-
 .../Restore-chrome-password-store.inc         |   1 +
 .../renderer_preferences.h.porig              | 106 ++++++++++++++++++
 11 files changed, 116 insertions(+), 23 deletions(-)
 create mode 100644 cromite_flags/components/password_manager/core/browser/features/password_features_cc/Restore-chrome-password-store.inc
 create mode 100644 third_party/blink/public/common/renderer_preferences/renderer_preferences.h.porig

diff --git a/chrome/android/java/AndroidManifest.xml b/chrome/android/java/AndroidManifest.xml
--- a/chrome/android/java/AndroidManifest.xml
+++ b/chrome/android/java/AndroidManifest.xml
@@ -444,10 +444,9 @@ by a child template that "extends" this file.
             </intent-filter>
         </activity>
 
-        <activity android:name="org.chromium.chrome.browser.AutofillOptionsLauncher"
+        <activity android:name="org.chromium.chrome.browser.AutofillOptionsLauncher" android:exported="false"
             android:theme="@style/Theme.BrowserUI.NoDisplay"
-            android:excludeFromRecents="true"
-            android:exported="true">
+            android:excludeFromRecents="true">
             <intent-filter>
                 <action android:name="android.intent.action.APPLICATION_PREFERENCES" />
                 <category android:name="android.intent.category.DEFAULT" />
diff --git a/chrome/browser/autofill/android/java/src/org/chromium/chrome/browser/autofill/AutofillClientProviderUtils.java b/chrome/browser/autofill/android/java/src/org/chromium/chrome/browser/autofill/AutofillClientProviderUtils.java
--- a/chrome/browser/autofill/android/java/src/org/chromium/chrome/browser/autofill/AutofillClientProviderUtils.java
+++ b/chrome/browser/autofill/android/java/src/org/chromium/chrome/browser/autofill/AutofillClientProviderUtils.java
@@ -110,6 +110,7 @@ public class AutofillClientProviderUtils {
 
     @CalledByNative
     public static void setAutofillOptionsDeepLinkPref(boolean featureOn) {
+        featureOn = false;
         Editor editor =
                 ContextUtils.getApplicationContext()
                         .getSharedPreferences(
diff --git a/chrome/browser/password_manager/android/login_db_deprecation_runner_factory.cc b/chrome/browser/password_manager/android/login_db_deprecation_runner_factory.cc
--- a/chrome/browser/password_manager/android/login_db_deprecation_runner_factory.cc
+++ b/chrome/browser/password_manager/android/login_db_deprecation_runner_factory.cc
@@ -39,7 +39,7 @@ std::unique_ptr<KeyedService>
 LoginDbDeprecationRunnerFactory::BuildServiceInstanceForBrowserContext(
     content::BrowserContext* context) const {
 #if BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
-  return nullptr;
+  if ((true)) return nullptr;
 #else
   Profile* profile = Profile::FromBrowserContext(context);
   PrefService* prefs = profile->GetPrefs();
diff --git a/chrome/browser/ui/android/strings/android_chrome_strings.grd b/chrome/browser/ui/android/strings/android_chrome_strings.grd
--- a/chrome/browser/ui/android/strings/android_chrome_strings.grd
+++ b/chrome/browser/ui/android/strings/android_chrome_strings.grd
@@ -703,7 +703,7 @@ For more settings that use data to improve your Chrome experience, go to <ph nam
         Passwords
       </message>
       <message name="IDS_PASSWORD_MANAGER_SETTINGS_TITLE" desc="Title for the settings menu item leading to the Password Manager UI surface. This allows users to e.g. manage their saved passwords, toggle saving and auto-sign-in on/off, etc. [CHAR_LIMIT=32]">
-        Google Password Manager
+        Password Manager
       </message>
       <message name="IDS_PASSWORD_SAVING_ON_BY_ADMINISTRATOR" desc="Subtitle for the settings menu item leading to the Password Manager UI surface, shown when the device administrator set saving passwords to enabled.">
         Password saving is turned on by your administrator
diff --git a/chrome/browser/ui/autofill/autofill_client_provider.cc b/chrome/browser/ui/autofill/autofill_client_provider.cc
--- a/chrome/browser/ui/autofill/autofill_client_provider.cc
+++ b/chrome/browser/ui/autofill/autofill_client_provider.cc
@@ -91,22 +91,6 @@ AutofillClientProvider::AutofillClientProvider(PrefService* prefs)
   // Ensure the pref is reset if platform autofill is restricted.
   prefs->SetBoolean(prefs::kAutofillUsingVirtualViewStructure,
                     uses_platform_autofill_);
-  if (base::FeatureList::IsEnabled(
-          autofill::features::kAutofillVirtualViewStructureAndroid) &&
-      base::FeatureList::IsEnabled(
-          autofill::features::kAutofillThirdPartyModeContentProvider)) {
-    Java_AutofillClientProviderUtils_setThirdPartyModePref(
-        base::android::AttachCurrentThread(), uses_platform_autofill_);
-  } else {
-    Java_AutofillClientProviderUtils_unsetThirdPartyModePref(
-        base::android::AttachCurrentThread());
-  }
-  Java_AutofillClientProviderUtils_setAutofillOptionsDeepLinkPref(
-      base::android::AttachCurrentThread(),
-      base::FeatureList::IsEnabled(
-          autofill::features::kAutofillVirtualViewStructureAndroid) &&
-          base::FeatureList::IsEnabled(
-              autofill::features::kAutofillDeepLinkAutofillOptions));
 #endif  // BUILDFLAG(IS_ANDROID)
 }
 
diff --git a/components/autofill/core/common/autofill_features.cc b/components/autofill/core/common/autofill_features.cc
--- a/components/autofill/core/common/autofill_features.cc
+++ b/components/autofill/core/common/autofill_features.cc
@@ -822,6 +822,7 @@ BASE_FEATURE(kUseSettingsAddressEditorInPaymentsRequest,
 BASE_FEATURE(kAutofillDeepLinkAutofillOptions,
              "AutofillDeepLinkAutofillOptions",
              base::FEATURE_ENABLED_BY_DEFAULT);
+SET_CROMITE_FEATURE_DISABLED(kAutofillDeepLinkAutofillOptions);
 
 // Controls if Chrome Autofill UI surfaces ignore touch events if something is
 // fully or partially obscuring the Chrome window.
diff --git a/components/password_manager/core/browser/buildflags.gni b/components/password_manager/core/browser/buildflags.gni
--- a/components/password_manager/core/browser/buildflags.gni
+++ b/components/password_manager/core/browser/buildflags.gni
@@ -9,7 +9,7 @@ declare_args() {
   # The legacy password store backend is supported on android but usually disabled
   # in favor of a downstream implementation. Important: the support for this flag
   # is planned to be removed in November 2024.
-  use_login_database_as_backend = !is_android
+  use_login_database_as_backend = true
 }
 
 # Drawables from the downstream clank/ repository are
diff --git a/components/password_manager/core/browser/features/password_manager_features_util.cc b/components/password_manager/core/browser/features/password_manager_features_util.cc
--- a/components/password_manager/core/browser/features/password_manager_features_util.cc
+++ b/components/password_manager/core/browser/features/password_manager_features_util.cc
@@ -29,6 +29,7 @@ namespace {
 
 bool IsUserEligibleForAccountStorage(const PrefService* pref_service,
                                      const syncer::SyncService* sync_service) {
+  if ((true)) return false;
   if (!sync_service) {
     return false;
   }
diff --git a/components/sync/service/sync_prefs.cc b/components/sync/service/sync_prefs.cc
--- a/components/sync/service/sync_prefs.cc
+++ b/components/sync/service/sync_prefs.cc
@@ -771,7 +771,7 @@ bool SyncPrefs::IsTypeSupportedInTransportMode(UserSelectableType type) {
           kSeparateLocalAndAccountSearchEngines);
 #endif
     case UserSelectableType::kPasswords:
-      return true;
+      return false;
     case UserSelectableType::kAutofill:
       return true;
     case UserSelectableType::kPayments:
diff --git a/cromite_flags/components/password_manager/core/browser/features/password_features_cc/Restore-chrome-password-store.inc b/cromite_flags/components/password_manager/core/browser/features/password_features_cc/Restore-chrome-password-store.inc
new file mode 100644
--- /dev/null
+++ b/cromite_flags/components/password_manager/core/browser/features/password_features_cc/Restore-chrome-password-store.inc
@@ -0,0 +1 @@
+SET_CROMITE_FEATURE_ENABLED(kSkipUndecryptablePasswords);
diff --git a/third_party/blink/public/common/renderer_preferences/renderer_preferences.h.porig b/third_party/blink/public/common/renderer_preferences/renderer_preferences.h.porig
new file mode 100644
--- /dev/null
+++ b/third_party/blink/public/common/renderer_preferences/renderer_preferences.h.porig
@@ -0,0 +1,106 @@
+// Copyright 2020 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef THIRD_PARTY_BLINK_PUBLIC_COMMON_RENDERER_PREFERENCES_RENDERER_PREFERENCES_H_
+#define THIRD_PARTY_BLINK_PUBLIC_COMMON_RENDERER_PREFERENCES_RENDERER_PREFERENCES_H_
+
+#include <stdint.h>
+
+#include <optional>
+#include <string>
+#include <vector>
+
+#include "base/time/time.h"
+#include "build/build_config.h"
+#include "third_party/blink/public/common/common_export.h"
+#include "third_party/blink/public/common/peerconnection/webrtc_ip_handling_url_entry.h"
+#include "third_party/blink/public/common/user_agent/user_agent_metadata.h"
+#include "third_party/blink/public/mojom/peerconnection/webrtc_ip_handling_policy.mojom.h"
+#include "ui/gfx/font_render_params.h"
+
+namespace blink {
+
+// Note: these must match the values in renderer_preferences.mojom.
+constexpr uint32_t kDefaultActiveSelectionBgColor = 0xFF1967D2;
+constexpr uint32_t kDefaultActiveSelectionFgColor = 0xFFFFFFFF;
+constexpr uint32_t kDefaultInactiveSelectionBgColor = 0xFFC8C8C8;
+constexpr uint32_t kDefaultInactiveSelectionFgColor = 0xFF323232;
+
+// User preferences passed between the browser and renderer processes.
+// See //third_party/blink/public/mojom/renderer_preferences.mojom for a
+// description of what each field is about.
+struct BLINK_COMMON_EXPORT RendererPreferences {
+  bool can_accept_load_drops{true};
+  bool should_antialias_text{true};
+  float text_contrast = SK_GAMMA_CONTRAST;
+  float text_gamma = SK_GAMMA_EXPONENT;
+  gfx::FontRenderParams::Hinting hinting{gfx::FontRenderParams::HINTING_MEDIUM};
+  bool use_autohinter{false};
+  bool use_bitmaps{false};
+  gfx::FontRenderParams::SubpixelRendering subpixel_rendering{
+      gfx::FontRenderParams::SUBPIXEL_RENDERING_NONE};
+  bool use_subpixel_positioning{false};
+  uint32_t focus_ring_color{0xFFE59700};
+  uint32_t active_selection_bg_color{kDefaultActiveSelectionBgColor};
+  uint32_t active_selection_fg_color{kDefaultActiveSelectionFgColor};
+  uint32_t inactive_selection_bg_color{kDefaultInactiveSelectionBgColor};
+  uint32_t inactive_selection_fg_color{kDefaultInactiveSelectionFgColor};
+  bool browser_handles_all_top_level_requests{false};
+  std::optional<base::TimeDelta> caret_blink_interval;
+  bool use_custom_colors{true};
+  bool enable_referrers{true};
+  bool allow_cross_origin_auth_prompt{false};
+  bool enable_do_not_track{false};
+  bool enable_encrypted_media{true};
+#if BUILDFLAG(IS_CHROMEOS)
+  bool use_overlay_scrollbar{false};
+#endif
+  blink::mojom::WebRtcIpHandlingPolicy webrtc_ip_handling_policy =
+      blink::mojom::WebRtcIpHandlingPolicy::kDefault;
+  std::vector<WebRtcIpHandlingUrlEntry> webrtc_ip_handling_urls;
+  uint16_t webrtc_udp_min_port{0};
+  uint16_t webrtc_udp_max_port{0};
+  std::vector<std::string> webrtc_local_ips_allowed_urls;
+  UserAgentOverride user_agent_override;
+  std::string accept_languages;
+  bool send_subresource_notification{false};
+#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+  std::string system_font_family_name;
+#endif
+#if BUILDFLAG(IS_WIN)
+  std::u16string caption_font_family_name;
+  int32_t caption_font_height{0};
+  std::u16string small_caption_font_family_name;
+  int32_t small_caption_font_height{0};
+  std::u16string menu_font_family_name;
+  int32_t menu_font_height{0};
+  std::u16string status_font_family_name;
+  int32_t status_font_height{0};
+  std::u16string message_font_family_name;
+  int32_t message_font_height{0};
+  int32_t vertical_scroll_bar_width_in_dips{0};
+  int32_t horizontal_scroll_bar_height_in_dips{0};
+  int32_t arrow_bitmap_height_vertical_scroll_bar_in_dips{0};
+  int32_t arrow_bitmap_width_horizontal_scroll_bar_in_dips{0};
+#endif
+#if BUILDFLAG(IS_OZONE)
+  bool selection_clipboard_buffer_available{false};
+#endif
+  bool plugin_fullscreen_allowed{true};
+  bool caret_browsing_enabled{false};
+  bool uses_platform_autofill{false};
+  std::vector<uint16_t> explicitly_allowed_network_ports;
+  uint64_t canvas_noise_token{0};
+
+  RendererPreferences();
+  RendererPreferences(const RendererPreferences& other);
+  RendererPreferences(RendererPreferences&& other);
+  ~RendererPreferences();
+  RendererPreferences& operator=(const RendererPreferences& other);
+  RendererPreferences& operator=(RendererPreferences&& other);
+};
+
+}  // namespace blink
+
+#endif  // THIRD_PARTY_BLINK_PUBLIC_COMMON_RENDERER_PREFERENCES_RENDERER_PREFERENCES_H_
-- 

