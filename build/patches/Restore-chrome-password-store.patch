From: uazo <uazo@users.noreply.github.com>
Date: Wed, 30 Sep 2020 07:40:01 +0000
Subject: Restore chrome password store

License: GPL-2.0-or-later - https://spdx.org/licenses/GPL-2.0-or-later.html

Change-Id: I664e3e88788ba4f018f68e3af039d4fd2eb87206
---
 .../android/login_db_deprecation_runner_factory.cc           | 2 +-
 .../password_manager/profile_password_store_factory.cc       | 2 +-
 .../browser/resources/password_manager/user_utils_mixin.ts   | 4 ++--
 chrome/browser/ui/android/strings/android_chrome_strings.grd | 2 +-
 chrome/browser/ui/autofill/autofill_client_provider.cc       | 5 -----
 components/password_manager/core/browser/buildflags.gni      | 2 +-
 .../features/password_manager_features_util_common.cc        | 1 +
 components/sync/service/sync_prefs.cc                        | 2 +-
 .../password_features_cc/Restore-chrome-password-store.inc   | 1 +
 9 files changed, 9 insertions(+), 12 deletions(-)
 create mode 100644 cromite_flags/components/password_manager/core/browser/features/password_features_cc/Restore-chrome-password-store.inc

diff --git a/chrome/browser/password_manager/android/login_db_deprecation_runner_factory.cc b/chrome/browser/password_manager/android/login_db_deprecation_runner_factory.cc
--- a/chrome/browser/password_manager/android/login_db_deprecation_runner_factory.cc
+++ b/chrome/browser/password_manager/android/login_db_deprecation_runner_factory.cc
@@ -38,7 +38,7 @@ std::unique_ptr<KeyedService>
 LoginDbDeprecationRunnerFactory::BuildServiceInstanceForBrowserContext(
     content::BrowserContext* context) const {
 #if BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
-  return nullptr;
+  if ((true)) return nullptr;
 #endif
   Profile* profile = Profile::FromBrowserContext(context);
   PrefService* prefs = profile->GetPrefs();
diff --git a/chrome/browser/password_manager/profile_password_store_factory.cc b/chrome/browser/password_manager/profile_password_store_factory.cc
--- a/chrome/browser/password_manager/profile_password_store_factory.cc
+++ b/chrome/browser/password_manager/profile_password_store_factory.cc
@@ -101,7 +101,7 @@ scoped_refptr<RefcountedKeyedService> BuildPasswordStore(
 
   password_affiliation_adapter->RegisterPasswordStore(ps.get());
   affiliation_service->RegisterSource(std::move(password_affiliation_adapter));
-#if BUILDFLAG(IS_ANDROID)
+#if BUILDFLAG(IS_ANDROID) && !BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
   CHECK(password_manager_android_util::IsInternalBackendPresent());
   password_manager::LoginDbDeprecationRunner* login_db_deprecation_runner =
       LoginDbDeprecationRunnerFactory::GetForProfile(profile);
diff --git a/chrome/browser/resources/password_manager/user_utils_mixin.ts b/chrome/browser/resources/password_manager/user_utils_mixin.ts
--- a/chrome/browser/resources/password_manager/user_utils_mixin.ts
+++ b/chrome/browser/resources/password_manager/user_utils_mixin.ts
@@ -138,11 +138,11 @@ export const UserUtilMixin = dedupingMixin(
         }
 
         private computeIsEligibleForAccountStorage_(): boolean {
-          return !!this.syncInfo_ && this.syncInfo_.isEligibleForAccountStorage;
+          return !!this.syncInfo_ && !!this.syncInfo_.isEligibleForAccountStorage;
         }
 
         private computeIsSyncingPasswords_(): boolean {
-          return !!this.syncInfo_ && this.syncInfo_.isSyncingPasswords;
+          return !!this.syncInfo_ && !!this.syncInfo_.isSyncingPasswords;
         }
 
         private computeAccountEmail_(): string {
diff --git a/chrome/browser/ui/android/strings/android_chrome_strings.grd b/chrome/browser/ui/android/strings/android_chrome_strings.grd
--- a/chrome/browser/ui/android/strings/android_chrome_strings.grd
+++ b/chrome/browser/ui/android/strings/android_chrome_strings.grd
@@ -704,7 +704,7 @@ For more settings that use data to improve your Chrome experience, go to <ph nam
         Passwords
       </message>
       <message name="IDS_PASSWORD_MANAGER_SETTINGS_TITLE" desc="Title for the settings menu item leading to the Password Manager UI surface. This allows users to e.g. manage their saved passwords, toggle saving and auto-sign-in on/off, etc. [CHAR_LIMIT=32]">
-        Google Password Manager
+        Password Manager
       </message>
       <message name="IDS_PASSWORD_SAVING_ON_BY_ADMINISTRATOR" desc="Subtitle for the settings menu item leading to the Password Manager UI surface, shown when the device administrator set saving passwords to enabled.">
         Password saving is turned on by your administrator
diff --git a/chrome/browser/ui/autofill/autofill_client_provider.cc b/chrome/browser/ui/autofill/autofill_client_provider.cc
--- a/chrome/browser/ui/autofill/autofill_client_provider.cc
+++ b/chrome/browser/ui/autofill/autofill_client_provider.cc
@@ -92,11 +92,6 @@ AutofillClientProvider::AutofillClientProvider(PrefService* prefs)
   // Ensure the pref is reset if platform autofill is restricted.
   prefs->SetBoolean(prefs::kAutofillUsingVirtualViewStructure,
                     uses_platform_autofill_);
-  if (base::FeatureList::IsEnabled(
-          autofill::features::kAutofillThirdPartyModeContentProvider)) {
-    Java_AutofillClientProviderUtils_setThirdPartyModePref(
-        base::android::AttachCurrentThread(), uses_platform_autofill_);
-  }
 #endif  // BUILDFLAG(IS_ANDROID)
 }
 
diff --git a/components/password_manager/core/browser/buildflags.gni b/components/password_manager/core/browser/buildflags.gni
--- a/components/password_manager/core/browser/buildflags.gni
+++ b/components/password_manager/core/browser/buildflags.gni
@@ -9,7 +9,7 @@ declare_args() {
   # The legacy password store backend is supported on android but usually disabled
   # in favor of a downstream implementation. Important: the support for this flag
   # is planned to be removed in November 2024.
-  use_login_database_as_backend = !is_android
+  use_login_database_as_backend = true
 }
 
 # Drawables from the downstream clank/ repository are
diff --git a/components/password_manager/core/browser/features/password_manager_features_util_common.cc b/components/password_manager/core/browser/features/password_manager_features_util_common.cc
--- a/components/password_manager/core/browser/features/password_manager_features_util_common.cc
+++ b/components/password_manager/core/browser/features/password_manager_features_util_common.cc
@@ -55,6 +55,7 @@ bool CanAccountStorageBeEnabled(const PrefService* pref_service,
 //   no way to enter the passphrase yet).
 bool IsUserEligibleForAccountStorage(const PrefService* pref_service,
                                      const syncer::SyncService* sync_service) {
+  if ((true)) return false;
   if (!sync_service) {
     return false;
   }
diff --git a/components/sync/service/sync_prefs.cc b/components/sync/service/sync_prefs.cc
--- a/components/sync/service/sync_prefs.cc
+++ b/components/sync/service/sync_prefs.cc
@@ -725,7 +725,7 @@ bool SyncPrefs::IsTypeSupportedInTransportMode(UserSelectableType type) {
       return base::FeatureList::IsEnabled(kReplaceSyncPromosWithSignInPromos) &&
              base::FeatureList::IsEnabled(kEnablePreferencesAccountStorage);
     case UserSelectableType::kPasswords:
-      return true;
+      return false;
     case UserSelectableType::kAutofill:
       return base::FeatureList::IsEnabled(
           kSyncEnableContactInfoDataTypeInTransportMode);
diff --git a/cromite_flags/components/password_manager/core/browser/features/password_features_cc/Restore-chrome-password-store.inc b/cromite_flags/components/password_manager/core/browser/features/password_features_cc/Restore-chrome-password-store.inc
new file mode 100644
--- /dev/null
+++ b/cromite_flags/components/password_manager/core/browser/features/password_features_cc/Restore-chrome-password-store.inc
@@ -0,0 +1 @@
+SET_CROMITE_FEATURE_ENABLED(kSkipUndecryptablePasswords);
-- 

