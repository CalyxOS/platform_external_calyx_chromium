From: uazo <uazo@users.noreply.github.com>
Date: Sun, 14 Apr 2024 07:45:20 +0000
Subject: Revert remove AllowImage content settings per secondary url

https: //chromium-review.googlesource.com/c/chromium/src/+/5308361
Change-Id: If76b18e3fea8ca6f7f82209a39d234e49f3a4034
---
 .../renderer/content_settings_agent_impl.cc     | 17 +++++++++++++++++
 .../renderer/content_settings_agent_impl.h      |  2 ++
 .../platform/web_content_settings_client.h      |  5 +++++
 .../blink/renderer/core/frame/local_frame.cc    |  8 --------
 .../blink/renderer/core/frame/local_frame.h     |  6 ------
 .../blink/renderer/core/html/image_document.cc  |  5 ++++-
 .../renderer/core/loader/frame_fetch_context.cc | 12 ++++--------
 .../renderer/core/loader/frame_fetch_context.h  |  2 +-
 third_party/blink/renderer/core/page/page.cc    |  5 ++---
 .../platform/loader/fetch/fetch_context.h       |  2 +-
 .../platform/loader/fetch/resource_fetcher.cc   | 17 +++++++++++++++--
 .../platform/loader/fetch/resource_fetcher.h    |  4 +++-
 12 files changed, 54 insertions(+), 31 deletions(-)

diff --git a/components/content_settings/renderer/content_settings_agent_impl.cc b/components/content_settings/renderer/content_settings_agent_impl.cc
--- a/components/content_settings/renderer/content_settings_agent_impl.cc
+++ b/components/content_settings/renderer/content_settings_agent_impl.cc
@@ -330,6 +330,23 @@ bool ContentSettingsAgentImpl::AllowStorageAccessSync(
   return result;
 }
 
+bool ContentSettingsAgentImpl::AllowImage(bool enabled_per_settings,
+                                          const WebURL& image_url) {
+  bool allow = enabled_per_settings;
+  if (enabled_per_settings) {
+    if (IsAllowlistedForContentSettings())
+      return true;
+
+    if (content_setting_rules_) {
+      allow = GetContentSettingFromRules(content_setting_rules_->image_rules,
+                                         image_url) != CONTENT_SETTING_BLOCK;
+    }
+  }
+  if (!allow)
+    DidBlockContentType(ContentSettingsType::IMAGES);
+  return allow;
+}
+
 bool ContentSettingsAgentImpl::AllowScript(bool enabled_per_settings) {
   if (!enabled_per_settings)
     return false;
diff --git a/components/content_settings/renderer/content_settings_agent_impl.h b/components/content_settings/renderer/content_settings_agent_impl.h
--- a/components/content_settings/renderer/content_settings_agent_impl.h
+++ b/components/content_settings/renderer/content_settings_agent_impl.h
@@ -89,6 +89,8 @@ class ContentSettingsAgentImpl
   void AllowStorageAccess(StorageType storage_type,
                           base::OnceCallback<void(bool)> callback) override;
   bool AllowStorageAccessSync(StorageType type) override;
+  bool AllowImage(bool enabled_per_settings,
+                  const blink::WebURL& image_url) override;
   bool AllowScript(bool enabled_per_settings) override;
   bool AllowScriptFromSource(bool enabled_per_settings,
                              const blink::WebURL& script_url) override;
diff --git a/third_party/blink/public/platform/web_content_settings_client.h b/third_party/blink/public/platform/web_content_settings_client.h
--- a/third_party/blink/public/platform/web_content_settings_client.h
+++ b/third_party/blink/public/platform/web_content_settings_client.h
@@ -51,6 +51,11 @@ class WebContentSettingsClient {
     return enabled_per_settings;
   }
 
+  // Controls whether images are allowed for this frame.
+  virtual bool AllowImage(bool enabled_per_settings, const WebURL& image_url) {
+    return enabled_per_settings;
+  }
+
   // Controls whether scripts are allowed to execute for this frame.
   virtual bool AllowScript(bool enabled_per_settings) {
     return enabled_per_settings;
diff --git a/third_party/blink/renderer/core/frame/local_frame.cc b/third_party/blink/renderer/core/frame/local_frame.cc
--- a/third_party/blink/renderer/core/frame/local_frame.cc
+++ b/third_party/blink/renderer/core/frame/local_frame.cc
@@ -3945,14 +3945,6 @@ const mojom::RendererContentSettingsPtr& LocalFrame::GetContentSettings() {
   return loader_.GetDocumentLoader()->GetContentSettings();
 }
 
-bool LocalFrame::ImagesEnabled() {
-  DCHECK(!IsDetached());
-
-  bool allow_image_renderer = GetSettings()->GetImagesEnabled();
-  bool allow_image_content_setting = GetContentSettings()->allow_image;
-  return allow_image_renderer && allow_image_content_setting;
-}
-
 const WebPrintParams& LocalFrame::GetPrintParams() const {
   // If this fails, it's probably because nobody called StartPrinting().
   DCHECK(GetDocument()->Printing());
diff --git a/third_party/blink/renderer/core/frame/local_frame.h b/third_party/blink/renderer/core/frame/local_frame.h
--- a/third_party/blink/renderer/core/frame/local_frame.h
+++ b/third_party/blink/renderer/core/frame/local_frame.h
@@ -930,12 +930,6 @@ class CORE_EXPORT LocalFrame final
   // Can only be called while the frame is not detached.
   const mojom::RendererContentSettingsPtr& GetContentSettings();
 
-  // Returns whether images are allowed to load for the current frame. This is a
-  // convenience method that checks both renderer content settings and frame
-  // settings.
-  // Can only be called while the frame is not detached.
-  bool ImagesEnabled();
-
   const WebPrintParams& GetPrintParams() const;
 
   // Return a keep alive handle for the browser side NavigationStateKeepAlive.
diff --git a/third_party/blink/renderer/core/html/image_document.cc b/third_party/blink/renderer/core/html/image_document.cc
--- a/third_party/blink/renderer/core/html/image_document.cc
+++ b/third_party/blink/renderer/core/html/image_document.cc
@@ -138,7 +138,10 @@ void ImageDocumentParser::AppendBytes(const char* data, size_t length) {
     return;
 
   LocalFrame* frame = GetDocument()->GetFrame();
-  bool allow_image = frame->ImagesEnabled();
+  Settings* settings = frame->GetSettings();
+  bool allow_image_renderer = !settings || settings->GetImagesEnabled();
+  bool allow_image_content_setting = frame->GetContentSettings()->allow_image;
+  bool allow_image = allow_image_renderer && allow_image_content_setting;
   if (!allow_image) {
     auto* client = frame->GetContentSettingsClient();
     if (client) {
diff --git a/third_party/blink/renderer/core/loader/frame_fetch_context.cc b/third_party/blink/renderer/core/loader/frame_fetch_context.cc
--- a/third_party/blink/renderer/core/loader/frame_fetch_context.cc
+++ b/third_party/blink/renderer/core/loader/frame_fetch_context.cc
@@ -242,6 +242,7 @@ ResourceFetcher* FrameFetchContext::CreateFetcherForCommittedDocument(
   fetcher->SetResourceLoadObserver(
       MakeGarbageCollected<ResourceLoadObserverForFrame>(
           loader, document, fetcher->GetProperties()));
+  fetcher->SetImagesEnabled(frame->GetSettings()->GetImagesEnabled());
   fetcher->SetAutoLoadImages(
       frame->GetSettings()->GetLoadsImagesAutomatically());
   fetcher->SetEarlyHintsPreloadedResources(
@@ -399,16 +400,11 @@ void FrameFetchContext::AddResourceTiming(
       ->AddResourceTiming(std::move(info), initiator_type);
 }
 
-bool FrameFetchContext::AllowImage() const {
+bool FrameFetchContext::AllowImage(bool images_enabled, const KURL& url) const {
   if (GetResourceFetcherProperties().IsDetached())
     return true;
-
-  bool images_enabled = GetFrame()->ImagesEnabled();
-  if (!images_enabled) {
-    if (auto* settings_client = GetContentSettingsClient()) {
-      settings_client->DidNotAllowImage();
-    }
-  }
+  if (auto* settings_client = GetContentSettingsClient())
+    images_enabled = settings_client->AllowImage(images_enabled, url);
   return images_enabled;
 }
 
diff --git a/third_party/blink/renderer/core/loader/frame_fetch_context.h b/third_party/blink/renderer/core/loader/frame_fetch_context.h
--- a/third_party/blink/renderer/core/loader/frame_fetch_context.h
+++ b/third_party/blink/renderer/core/loader/frame_fetch_context.h
@@ -105,7 +105,7 @@ class CORE_EXPORT FrameFetchContext final : public BaseFetchContext,
 
   void AddResourceTiming(mojom::blink::ResourceTimingInfoPtr,
                          const AtomicString& initiator_type) override;
-  bool AllowImage() const override;
+  bool AllowImage(bool images_enabled, const KURL&) const override;
 
   void PopulateResourceRequest(ResourceType,
                                const std::optional<float> resource_width,
diff --git a/third_party/blink/renderer/core/page/page.cc b/third_party/blink/renderer/core/page/page.cc
--- a/third_party/blink/renderer/core/page/page.cc
+++ b/third_party/blink/renderer/core/page/page.cc
@@ -881,9 +881,8 @@ void Page::SettingsChanged(ChangeType change_type) {
       for (Frame* frame = MainFrame(); frame;
            frame = frame->Tree().TraverseNext()) {
         if (auto* local_frame = DynamicTo<LocalFrame>(frame)) {
-          // Notify the fetcher that the image loading setting has changed,
-          // which may cause previously deferred requests to load.
-          local_frame->GetDocument()->Fetcher()->ReloadImagesIfNotDeferred();
+          local_frame->GetDocument()->Fetcher()->SetImagesEnabled(
+              GetSettings().GetImagesEnabled());
           local_frame->GetDocument()->Fetcher()->SetAutoLoadImages(
               GetSettings().GetLoadsImagesAutomatically());
         }
diff --git a/third_party/blink/renderer/platform/loader/fetch/fetch_context.h b/third_party/blink/renderer/platform/loader/fetch/fetch_context.h
--- a/third_party/blink/renderer/platform/loader/fetch/fetch_context.h
+++ b/third_party/blink/renderer/platform/loader/fetch/fetch_context.h
@@ -106,7 +106,7 @@ class PLATFORM_EXPORT FetchContext : public GarbageCollected<FetchContext> {
 
   virtual void AddResourceTiming(mojom::blink::ResourceTimingInfoPtr,
                                  const AtomicString& initiator_type);
-  virtual bool AllowImage() const { return false; }
+  virtual bool AllowImage(bool, const KURL&) const { return false; }
   virtual std::optional<ResourceRequestBlockedReason> CanRequest(
       ResourceType,
       const ResourceRequest&,
diff --git a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.cc b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.cc
--- a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.cc
+++ b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.cc
@@ -708,6 +708,7 @@ ResourceFetcher::ResourceFetcher(const ResourceFetcherInit& init)
       blob_registry_remote_(init.context_lifecycle_notifier),
       context_lifecycle_notifier_(init.context_lifecycle_notifier),
       auto_load_images_(true),
+      images_enabled_(true),
       allow_stale_resources_(false),
       image_fetched_(false) {
   InstanceCounters::IncrementCounter(InstanceCounters::kResourceFetcherCounter);
@@ -1735,7 +1736,7 @@ bool ResourceFetcher::IsImageResourceDisallowedToBeReused(
   if (existing_resource.GetType() != ResourceType::kImage)
     return false;
 
-  return !Context().AllowImage();
+  return !Context().AllowImage(images_enabled_, existing_resource.Url());
 }
 
 ResourceFetcher::RevalidationPolicy
@@ -1978,8 +1979,20 @@ void ResourceFetcher::SetAutoLoadImages(bool enable) {
   ReloadImagesIfNotDeferred();
 }
 
+void ResourceFetcher::SetImagesEnabled(bool enable) {
+  if (enable == images_enabled_)
+    return;
+
+  images_enabled_ = enable;
+
+  if (!images_enabled_)
+    return;
+
+  ReloadImagesIfNotDeferred();
+}
+
 bool ResourceFetcher::ShouldDeferImageLoad(const KURL& url) const {
-  return !Context().AllowImage() ||
+  return !Context().AllowImage(images_enabled_, url) ||
          (!auto_load_images_ && !url.ProtocolIsData());
 }
 
diff --git a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h
--- a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h
+++ b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h
@@ -224,6 +224,7 @@ class PLATFORM_EXPORT ResourceFetcher
   bool StartLoad(Resource*);
 
   void SetAutoLoadImages(bool);
+  void SetImagesEnabled(bool);
 
   FetchContext& Context() const;
   void ClearContext();
@@ -642,8 +643,9 @@ class PLATFORM_EXPORT ResourceFetcher
   // This is not in the bit field below because we want to use AutoReset.
   bool is_in_request_resource_ = false;
 
-  // 28 bits left
+  // 27 bits left
   bool auto_load_images_ : 1;
+  bool images_enabled_ : 1;
   bool allow_stale_resources_ : 1;
   bool image_fetched_ : 1;
   bool stale_while_revalidate_enabled_ : 1;
-- 

