From: Tommy Webb <tommy@calyxinstitute.org>
Date: Tue, 29 Aug 2023 10:10:47 -0400
Subject: Override Cromite default site settings states

Adblock: Default ON
Autoplay: WebView Default ON, Browser still default off
WebGL: Default ON
WebRTC: WebView Default ON, Browser still default off

Change-Id: Ia465ef97d29c8a43f8da7be7d919ba6aad8f95bf
---
 chrome/browser/net/system_network_context_manager.cc          | 2 +-
 .../core/browser/bromite_content_settings/webgl.inc           | 2 +-
 .../renderer/core/execution_context/execution_context.cc      | 4 ++--
 third_party/blink/renderer/core/html/media/autoplay_policy.cc | 2 +-
 .../peerconnection/peer_connection_dependency_factory.cc      | 3 ++-
 5 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/chrome/browser/net/system_network_context_manager.cc b/chrome/browser/net/system_network_context_manager.cc
---  a/chrome/browser/net/system_network_context_manager.cc
+++ b/chrome/browser/net/system_network_context_manager.cc
@@ -638,7 +638,7 @@ void SystemNetworkContextManager::RegisterPrefs(PrefRegistrySimple* registry) {
   StubResolverConfigReader::RegisterPrefs(registry);
   DefaultDnsOverHttpsConfigSource::RegisterPrefs(registry);
 
-  registry->RegisterBooleanPref(prefs::kAdBlockEnabled, false);
+  registry->RegisterBooleanPref(prefs::kAdBlockEnabled, true);
   registry->RegisterStringPref(prefs::kAdBlockFiltersURL,
     "about:blank");
 
diff --git a/components/content_settings/core/browser/bromite_content_settings/webgl.inc b/components/content_settings/core/browser/bromite_content_settings/webgl.inc
---  a/components/content_settings/core/browser/bromite_content_settings/webgl.inc
+++ b/components/content_settings/core/browser/bromite_content_settings/webgl.inc
@@ -1,4 +1,4 @@
-  Register(ContentSettingsType::WEBGL, "webgl", CONTENT_SETTING_BLOCK,
+  Register(ContentSettingsType::WEBGL, "webgl", CONTENT_SETTING_ALLOW,
            WebsiteSettingsInfo::SYNCABLE,
            /*allowlisted_schemes=*/{},
            /*valid_settings=*/{CONTENT_SETTING_ALLOW,
diff --git a/third_party/blink/renderer/core/execution_context/execution_context.cc b/third_party/blink/renderer/core/execution_context/execution_context.cc
---  a/third_party/blink/renderer/core/execution_context/execution_context.cc
+++ b/third_party/blink/renderer/core/execution_context/execution_context.cc
@@ -88,8 +88,8 @@ blink::WebContentSettingsClient* GetContentSettingsClientFor(
 bool AllowWebgl(ExecutionContext* context) {
   blink::WebContentSettingsClient* settings = GetContentSettingsClientFor(context);
   if (settings)
-    return settings->AllowContentSetting(ContentSettingsType::WEBGL, false);
-  return false;
+    return settings->AllowContentSetting(ContentSettingsType::WEBGL, /*default_value=*/true);
+  return true;
 }
 
 ExecutionContext::ExecutionContext(v8::Isolate* isolate,
diff --git a/third_party/blink/renderer/core/html/media/autoplay_policy.cc b/third_party/blink/renderer/core/html/media/autoplay_policy.cc
---  a/third_party/blink/renderer/core/html/media/autoplay_policy.cc
+++ b/third_party/blink/renderer/core/html/media/autoplay_policy.cc
@@ -458,7 +458,7 @@ bool AutoplayPolicy::IsAutoplayAllowedPerSettings() const {
     return false;
   if (auto* settings_client = frame->GetContentSettingsClient()) {
     return settings_client->AllowContentSetting(
-        ContentSettingsType::AUTOPLAY, /*default_value*/ false);
+        ContentSettingsType::AUTOPLAY, /*default_value*/ true);
   }
   return true;
 }
diff --git a/third_party/blink/renderer/modules/peerconnection/peer_connection_dependency_factory.cc b/third_party/blink/renderer/modules/peerconnection/peer_connection_dependency_factory.cc
---  a/third_party/blink/renderer/modules/peerconnection/peer_connection_dependency_factory.cc
+++ b/third_party/blink/renderer/modules/peerconnection/peer_connection_dependency_factory.cc
@@ -881,7 +881,8 @@ PeerConnectionDependencyFactory::CreatePortAllocator(
       WebRTCIPHandlingPolicy policy =
           GetWebRTCIPHandlingPolicy(webrtc_ip_handling_policy);
       blink::WebContentSettingsClient* settings = web_frame->GetContentSettingsClient();
-      if (settings && settings->AllowContentSetting(ContentSettingsType::WEBRTC, false)) {
+      if (!settings || settings->AllowContentSetting(ContentSettingsType::WEBRTC,
+              /*default_value=*/true)) {
         policy = kDefault;
       }
 
-- 

