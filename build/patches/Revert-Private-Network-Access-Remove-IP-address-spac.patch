From: Chirayu Desai <chirayudesai1@gmail.com>
Date: Thu, 1 Sep 2022 23:14:52 +0530
Subject: Revert "[Private Network Access] Remove IP address space from Blink's
 policy container"

This reverts commit 9a23bdccf1b06b1f88016a59afdf6168716a2f44.
---
 .../navigation_policy_container_builder_browsertest.cc      | 2 ++
 content/browser/renderer_host/policy_container_host.cc      | 2 +-
 content/renderer/policy_container_util.cc                   | 1 +
 third_party/blink/public/mojom/frame/policy_container.mojom | 3 +++
 third_party/blink/public/platform/web_policy_container.h    | 2 ++
 third_party/blink/renderer/core/frame/policy_container.cc   | 6 ++++++
 third_party/blink/renderer/core/frame/policy_container.h    | 1 +
 .../blink/renderer/core/frame/policy_container_test.cc      | 4 ++++
 third_party/blink/renderer/core/loader/frame_loader_test.cc | 2 ++
 9 files changed, 22 insertions(+), 1 deletion(-)

diff --git a/content/browser/renderer_host/navigation_policy_container_builder_browsertest.cc b/content/browser/renderer_host/navigation_policy_container_builder_browsertest.cc
--- a/content/browser/renderer_host/navigation_policy_container_builder_browsertest.cc
+++ b/content/browser/renderer_host/navigation_policy_container_builder_browsertest.cc
@@ -194,6 +194,8 @@ IN_PROC_BROWSER_TEST_F(NavigationPolicyContainerBuilderBrowserTest,
 
   const blink::mojom::PolicyContainerPolicies& policies = *container->policies;
   EXPECT_EQ(policies.referrer_policy, builder.FinalPolicies().referrer_policy);
+  EXPECT_EQ(policies.ip_address_space,
+            builder.FinalPolicies().ip_address_space);
 }
 
 // Verifies that when the URL of the document to commit is `about:blank`, and
diff --git a/content/browser/renderer_host/policy_container_host.cc b/content/browser/renderer_host/policy_container_host.cc
--- a/content/browser/renderer_host/policy_container_host.cc
+++ b/content/browser/renderer_host/policy_container_host.cc
@@ -221,7 +221,7 @@ PolicyContainerHost::CreatePolicyContainerForBlink() {
   return blink::mojom::PolicyContainer::New(
       blink::mojom::PolicyContainerPolicies::New(
           policies_.cross_origin_embedder_policy.value,
-          policies_.referrer_policy,
+          policies_.referrer_policy, policies_.ip_address_space,
           mojo::Clone(policies_.content_security_policies),
           policies_.is_anonymous, policies_.sandbox_flags),
       std::move(remote));
diff --git a/content/renderer/policy_container_util.cc b/content/renderer/policy_container_util.cc
--- a/content/renderer/policy_container_util.cc
+++ b/content/renderer/policy_container_util.cc
@@ -18,6 +18,7 @@ std::unique_ptr<blink::WebPolicyContainer> ToWebPolicyContainer(
       blink::WebPolicyContainerPolicies{
           in->policies->cross_origin_embedder_policy,
           in->policies->referrer_policy,
+          in->policies->ip_address_space,
           ToWebContentSecurityPolicies(
               std::move(in->policies->content_security_policies)),
           in->policies->is_anonymous,
diff --git a/third_party/blink/public/mojom/frame/policy_container.mojom b/third_party/blink/public/mojom/frame/policy_container.mojom
--- a/third_party/blink/public/mojom/frame/policy_container.mojom
+++ b/third_party/blink/public/mojom/frame/policy_container.mojom
@@ -6,6 +6,7 @@ module blink.mojom;
 
 import "services/network/public/mojom/content_security_policy.mojom";
 import "services/network/public/mojom/cross_origin_embedder_policy.mojom";
+import "services/network/public/mojom/ip_address_space.mojom";
 import "services/network/public/mojom/referrer_policy.mojom";
 import "services/network/public/mojom/web_sandbox_flags.mojom";
 
@@ -18,6 +19,8 @@ struct PolicyContainerPolicies {
     network.mojom.CrossOriginEmbedderPolicyValue.kNone;
   network.mojom.ReferrerPolicy referrer_policy =
     network.mojom.ReferrerPolicy.kDefault;
+  network.mojom.IPAddressSpace ip_address_space =
+    network.mojom.IPAddressSpace.kUnknown;
   array<network.mojom.ContentSecurityPolicy> content_security_policies;
   bool is_anonymous = false;
   network.mojom.WebSandboxFlags sandbox_flags =
diff --git a/third_party/blink/public/platform/web_policy_container.h b/third_party/blink/public/platform/web_policy_container.h
--- a/third_party/blink/public/platform/web_policy_container.h
+++ b/third_party/blink/public/platform/web_policy_container.h
@@ -6,6 +6,7 @@
 #define THIRD_PARTY_BLINK_PUBLIC_PLATFORM_WEB_POLICY_CONTAINER_H_
 
 #include "services/network/public/mojom/cross_origin_embedder_policy.mojom-shared.h"
+#include "services/network/public/mojom/ip_address_space.mojom-shared.h"
 #include "services/network/public/mojom/referrer_policy.mojom-shared.h"
 #include "services/network/public/mojom/web_sandbox_flags.mojom-shared.h"
 #include "third_party/blink/public/mojom/frame/policy_container.mojom-shared.h"
@@ -22,6 +23,7 @@ struct WebPolicyContainerPolicies {
       network::mojom::CrossOriginEmbedderPolicyValue::kNone;
   network::mojom::ReferrerPolicy referrer_policy =
       network::mojom::ReferrerPolicy::kDefault;
+  network::mojom::IPAddressSpace ip_address_space;
   WebVector<WebContentSecurityPolicy> content_security_policies;
   bool is_anonymous = false;
   network::mojom::WebSandboxFlags sandbox_flags =
diff --git a/third_party/blink/renderer/core/frame/policy_container.cc b/third_party/blink/renderer/core/frame/policy_container.cc
--- a/third_party/blink/renderer/core/frame/policy_container.cc
+++ b/third_party/blink/renderer/core/frame/policy_container.cc
@@ -37,6 +37,7 @@ std::unique_ptr<PolicyContainer> PolicyContainer::CreateFromWebPolicyContainer(
       mojom::blink::PolicyContainerPolicies::New(
           container->policies.cross_origin_embedder_policy,
           container->policies.referrer_policy,
+          container->policies.ip_address_space,
           ConvertToMojoBlink(
               std::move(container->policies.content_security_policies)),
           container->policies.is_anonymous, container->policies.sandbox_flags);
@@ -50,6 +51,11 @@ network::mojom::blink::ReferrerPolicy PolicyContainer::GetReferrerPolicy()
   return policies_->referrer_policy;
 }
 
+network::mojom::blink::IPAddressSpace PolicyContainer::GetIPAddressSpace()
+    const {
+  return policies_->ip_address_space;
+}
+
 void PolicyContainer::UpdateReferrerPolicy(
     network::mojom::blink::ReferrerPolicy policy) {
   policies_->referrer_policy = policy;
diff --git a/third_party/blink/renderer/core/frame/policy_container.h b/third_party/blink/renderer/core/frame/policy_container.h
--- a/third_party/blink/renderer/core/frame/policy_container.h
+++ b/third_party/blink/renderer/core/frame/policy_container.h
@@ -8,6 +8,7 @@
 #include "mojo/public/cpp/bindings/associated_remote.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
 #include "services/network/public/mojom/content_security_policy.mojom-blink-forward.h"
+#include "services/network/public/mojom/ip_address_space.mojom-shared.h"
 #include "services/network/public/mojom/referrer_policy.mojom-shared.h"
 #include "services/network/public/mojom/web_sandbox_flags.mojom-shared.h"
 #include "third_party/blink/public/mojom/frame/policy_container.mojom-blink.h"
diff --git a/third_party/blink/renderer/core/frame/policy_container_test.cc b/third_party/blink/renderer/core/frame/policy_container_test.cc
--- a/third_party/blink/renderer/core/frame/policy_container_test.cc
+++ b/third_party/blink/renderer/core/frame/policy_container_test.cc
@@ -17,6 +17,7 @@ TEST(PolicyContainerTest, MembersAreSetDuringConstruction) {
   auto policies = mojom::blink::PolicyContainerPolicies::New(
       network::mojom::blink::CrossOriginEmbedderPolicyValue::kNone,
       network::mojom::blink::ReferrerPolicy::kNever,
+      network::mojom::blink::IPAddressSpace::kPrivate,
       Vector<network::mojom::blink::ContentSecurityPolicyPtr>(),
       /*anonymous=*/false, network::mojom::WebSandboxFlags::kNone);
   PolicyContainer policy_container(host.BindNewEndpointAndPassDedicatedRemote(),
@@ -24,6 +25,8 @@ TEST(PolicyContainerTest, MembersAreSetDuringConstruction) {
 
   EXPECT_EQ(network::mojom::blink::ReferrerPolicy::kNever,
             policy_container.GetReferrerPolicy());
+  EXPECT_EQ(network::mojom::blink::IPAddressSpace::kPrivate,
+            policy_container.GetIPAddressSpace());
 }
 
 TEST(PolicyContainerTest, UpdateReferrerPolicyIsPropagated) {
@@ -31,6 +34,7 @@ TEST(PolicyContainerTest, UpdateReferrerPolicyIsPropagated) {
   auto policies = mojom::blink::PolicyContainerPolicies::New(
       network::mojom::blink::CrossOriginEmbedderPolicyValue::kNone,
       network::mojom::blink::ReferrerPolicy::kAlways,
+      network::mojom::blink::IPAddressSpace::kPublic,
       Vector<network::mojom::blink::ContentSecurityPolicyPtr>(),
       /*anonymous=*/false, network::mojom::WebSandboxFlags::kNone);
   PolicyContainer policy_container(host.BindNewEndpointAndPassDedicatedRemote(),
diff --git a/third_party/blink/renderer/core/loader/frame_loader_test.cc b/third_party/blink/renderer/core/loader/frame_loader_test.cc
--- a/third_party/blink/renderer/core/loader/frame_loader_test.cc
+++ b/third_party/blink/renderer/core/loader/frame_loader_test.cc
@@ -156,6 +156,7 @@ TEST_F(FrameLoaderTest, PolicyContainerIsStoredOnCommitNavigation) {
       WebPolicyContainerPolicies{
           network::mojom::CrossOriginEmbedderPolicyValue::kNone,
           network::mojom::ReferrerPolicy::kAlways,
+          network::mojom::IPAddressSpace::kPublic,
           WebVector<WebContentSecurityPolicy>(),
       },
       mock_policy_container_host.BindNewEndpointAndPassDedicatedRemote());
@@ -166,6 +167,7 @@ TEST_F(FrameLoaderTest, PolicyContainerIsStoredOnCommitNavigation) {
   EXPECT_EQ(*mojom::blink::PolicyContainerPolicies::New(
                 network::mojom::CrossOriginEmbedderPolicyValue::kNone,
                 network::mojom::ReferrerPolicy::kAlways,
+                network::mojom::IPAddressSpace::kPublic,
                 Vector<network::mojom::blink::ContentSecurityPolicyPtr>(),
                 /*anonymous=*/false, network::mojom::WebSandboxFlags::kNone),
             local_frame->DomWindow()->GetPolicyContainer()->GetPolicies());
-- 
2.37.3

