From: Chirayu Desai <chirayudesai1@gmail.com>
Date: Tue, 7 Mar 2023 01:55:33 +0530
Subject: Hardcode some enterprise policies

* https://chromeenterprise.google/policies/
* This is far easier to manage than a big list of patches
* The put replaces any existing value for the given key, thus it should work
  seamlessly with any existing policies

Change-Id: Ic743813546cc80ae2adf7d688d9e69ddf33b0f55
---
 .../policy/AppRestrictionsProvider.java       | 29 ++++++++++++++++---
 1 file changed, 25 insertions(+), 4 deletions(-)

diff --git a/components/policy/android/java/src/org/chromium/components/policy/AppRestrictionsProvider.java b/components/policy/android/java/src/org/chromium/components/policy/AppRestrictionsProvider.java
--- a/components/policy/android/java/src/org/chromium/components/policy/AppRestrictionsProvider.java
+++ b/components/policy/android/java/src/org/chromium/components/policy/AppRestrictionsProvider.java
@@ -19,17 +19,38 @@ public class AppRestrictionsProvider extends AbstractAppRestrictionsProvider {
      * metrics on its runtime.
      * @param userManager UserManager service from Android System service
      * @param packageName package name for target application.
-     * @return The restrictions for the provided package name, an empty bundle if they are not
-     *         available.
+     * @return The restrictions for the provided package name
      */
     public static Bundle getApplicationRestrictionsFromUserManager(
             UserManager userManager, String packageName) {
+        Bundle restrictions = new Bundle();
         try {
-            return userManager.getApplicationRestrictions(packageName);
+            restrictions = userManager.getApplicationRestrictions(packageName);
         } catch (SecurityException e) {
             // Android bug may throw SecurityException. See crbug.com/886814.
-            return new Bundle();
+            // Do nothing, because we append our own policies below
         }
+        // https://chromeenterprise.google/policies/#BrowserSignin
+        restrictions.putInt("BrowserSignin", 0); // Disable browser sign-in
+        // https://chromeenterprise.google/policies/#ContextualSearchEnabled
+        restrictions.putBoolean("ContextualSearchEnabled", false);
+        // https://chromeenterprise.google/policies/#DomainReliabilityAllowed
+        restrictions.putBoolean("DomainReliabilityAllowed", false);
+        // https://chromeenterprise.google/policies/#MetricsReportingEnabled
+        restrictions.putBoolean("MetricsReportingEnabled", false);
+        // https://chromeenterprise.google/policies/#NTPContentSuggestionsEnabled
+        restrictions.putBoolean("NTPContentSuggestionsEnabled", false);
+        // https://chromeenterprise.google/policies/#NetworkPredictionOptions
+        restrictions.putInt("NetworkPredictionOptions", 2); // Do not predict network actions on any network connection
+        // https://chromeenterprise.google/policies/#PrivacySandbox
+        restrictions.putBoolean("PrivacySandboxAdMeasurementEnabled", false);
+        restrictions.putBoolean("PrivacySandboxAdTopicsEnabled", false);
+        restrictions.putBoolean("PrivacySandboxPromptEnabled", false);
+        restrictions.putBoolean("PrivacySandboxSiteEnabledAdsEnabled", false);
+        // https://chromeenterprise.google/policies/#SafeBrowsing
+        restrictions.putBoolean("SafeBrowsingExtendedReportingEnabled", false);
+        restrictions.putInt("SafeBrowsingProtectionLevel", 0); // Safe Browsing is never active.
+        return restrictions;
     }
 
     private final UserManager mUserManager;
-- 
2.39.2

