From: Tommy Webb <tommy@calyxinstitute.org>
Date: Wed, 26 Jul 2023 16:57:20 -0400
Subject: Bring in Brave feature states for privacy/security

Reviewed Brave's feature state overrides, as of brave-core tag v1.64.16,
and added any that were relevant for privacy or security and applicable
to Chromium 121. Features that were already set a particular way still
had comments added so that it will be easier to catch if upstream makes
unwanted changes to their states.

Testing feature changes (two examples):
1. AnonymousIframe: https://anonymous-iframe.glitch.me
   Will show the state enabled prior to this change, disabled after.
2. AutofillServerCommunication: Install and activate Rethink as VPN,
   clear browser storage, do a test search from the omnibar, and look
   for content-autofill.googleapis.com in Rethink logs. It will be
   present before this change, absent after.

brave-core can be found here: https://github.com/brave/brave-core

brave_main_delegate_browsertest.cc is a highly useful resource,
and the work of their privacy/security team is greatly appreciated.

Change-Id: Ic0e67157ff4a747bb05ceba264660bfeb1ac73ef
---
 android_webview/common/aw_features.cc         |  8 +-
 base/features.cc                              |  4 +-
 chrome/browser/browser_features.cc            | 25 ++----
 chrome/browser/companion/core/features.cc     | 12 +--
 .../analysis/content_analysis_features.cc     |  4 +-
 .../browser/preloading/preloading_features.cc |  4 +-
 .../extension_telemetry_service_factory.cc    | 17 +++--
 chrome/browser/ui/ui_features.cc              |  4 +-
 chrome/common/chrome_features.cc              | 12 +--
 .../common/companion/visual_query/features.cc |  1 +
 components/aggregation_service/features.cc    |  4 +-
 components/attribution_reporting/features.cc  |  5 +-
 .../payments/offer_notification_handler.cc    |  5 ++
 .../autofill/core/common/autofill_features.cc |  8 +-
 .../core/common/autofill_payments_features.cc |  4 +-
 .../commerce/core/commerce_feature_list.cc    | 28 ++++---
 .../content_settings/core/common/features.cc  |  8 +-
 components/history/core/browser/features.cc   |  4 +-
 components/history_clusters/core/features.cc  | 48 ++++++------
 .../core/on_device_clustering_features.cc     |  8 +-
 components/lens/lens_features.cc              |  4 +-
 components/metrics/metrics_features.cc        |  4 +-
 .../structured/structured_metrics_features.h  |  3 +
 .../network_time/network_time_tracker.cc      |  4 +-
 components/omnibox/common/omnibox_features.cc | 12 +--
 .../core/optimization_guide_features.cc       |  4 +-
 components/page_image_service/features.cc     |  8 +-
 components/permissions/features.cc            |  4 +-
 .../privacy_sandbox_features.cc               | 16 ++--
 .../safe_browsing/core/common/features.cc     |  8 +-
 components/search/ntp_features.cc             | 36 ++++-----
 .../segmentation_platform/public/features.cc  | 12 +--
 .../entry_point_display_reason.cc             | 16 ++--
 .../common/shared_highlighting_features.cc    |  4 +-
 .../core/common/common_features.cc            |  4 +-
 .../attribution_storage_delegate_impl.cc      |  3 +
 content/common/features.cc                    |  8 +-
 content/public/common/content_features.cc     | 49 ++++++------
 net/base/features.cc                          | 16 ++--
 services/network/public/cpp/features.cc       |  8 +-
 third_party/blink/common/features.cc          | 76 ++++++++++---------
 .../renderer/core/html/html_script_element.cc |  4 +-
 .../platform/runtime_enabled_features.json5   | 32 ++++----
 ui/base/ui_base_features.cc                   |  4 +-
 44 files changed, 289 insertions(+), 263 deletions(-)

diff --git a/android_webview/common/aw_features.cc b/android_webview/common/aw_features.cc
--- a/android_webview/common/aw_features.cc
+++ b/android_webview/common/aw_features.cc
@@ -44,8 +44,8 @@ BASE_FEATURE(kWebViewCheckPakFileDescriptors,
 // Cache origins which have camera/mic permissions approved to allow subsequent
 // calls to enumerate devices to return device labels.
 BASE_FEATURE(kWebViewEnumerateDevicesCache,
-             "WebViewEnumerateDevicesCache",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "WebViewEnumerateDevicesCache",           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kWebViewExitReasonMetric,
              "WebViewExitReasonMetric",
@@ -102,8 +102,8 @@ BASE_FEATURE(kWebViewJavaJsBridgeMojo,
 // Enable reporting filtered metrics from webview clients used to be
 // out-sampled.
 BASE_FEATURE(kWebViewMetricsFiltering,
-             "WebViewMetricsFiltering",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "WebViewMetricsFiltering",                // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Field trial feature for controlling support of Origin Trials on WebView.
 BASE_FEATURE(kWebViewOriginTrials,
diff --git a/base/features.cc b/base/features.cc
--- a/base/features.cc
+++ b/base/features.cc
@@ -63,8 +63,8 @@ BASE_FEATURE(kPartialLowEndModeOnMidRangeDevices,
 #if BUILDFLAG(IS_ANDROID)
 // Whether to report frame metrics to the Android.FrameTimeline.* histograms.
 BASE_FEATURE(kCollectAndroidFrameTimelineMetrics,
-             "CollectAndroidFrameTimelineMetrics",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CollectAndroidFrameTimelineMetrics",     // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 #endif  // BUILDFLAG(IS_ANDROID)
 
 }  // namespace base::features
diff --git a/chrome/browser/browser_features.cc b/chrome/browser/browser_features.cc
--- a/chrome/browser/browser_features.cc
+++ b/chrome/browser/browser_features.cc
@@ -26,13 +26,8 @@ BASE_FEATURE(kClosedTabCache,
 // On Lacros the feature is enabled only for secondary profiles, check the
 // implementation of `ProfileManager::ProfileInfo::FromUnownedProfile()`.
 BASE_FEATURE(kDestroyProfileOnBrowserClose,
-             "DestroyProfileOnBrowserClose",
-#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN) || \
-    BUILDFLAG(IS_CHROMEOS_LACROS)
-             base::FEATURE_ENABLED_BY_DEFAULT);
-#else
-             base::FEATURE_DISABLED_BY_DEFAULT);
-#endif
+             "DestroyProfileOnBrowserClose",           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // DestroyProfileOnBrowserClose only covers deleting regular (non-System)
 // Profiles. This flags lets us destroy the System Profile, as well.
@@ -185,12 +180,8 @@ BASE_FEATURE(kWebUsbDeviceDetection,
 // update the list of accepted logs. Embedders who are planning to enable this
 // should first reach out to chrome-certificate-transparency@google.com.
 BASE_FEATURE(kCertificateTransparencyAskBeforeEnabling,
-             "CertificateTransparencyAskBeforeEnabling",
-#if BUILDFLAG(GOOGLE_CHROME_BRANDING)
-             base::FEATURE_ENABLED_BY_DEFAULT);
-#else
-             base::FEATURE_DISABLED_BY_DEFAULT);
-#endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
+             "CertificateTransparencyAskBeforeEnabling", // enabled by default
+             base::FEATURE_ENABLED_BY_DEFAULT);          // in Brave
 
 BASE_FEATURE(kLargeFaviconFromGoogle,
              "LargeFaviconFromGoogle",
@@ -255,8 +246,8 @@ BASE_FEATURE(kFlexOrgManagementDisclosure,
 
 // Enables usage of the FedCM API without third party cookies at the same time.
 BASE_FEATURE(kFedCmWithoutThirdPartyCookies,
-             "FedCmWithoutThirdPartyCookies",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "FedCmWithoutThirdPartyCookies",          // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Enables the Incoming Call Notifications scenario. When created by an
 // installed origin, an incoming call notification should have increased
@@ -316,8 +307,8 @@ BASE_FEATURE(kAutocompleteActionPredictorConfidenceCutoff,
 // kOmniboxTriggerForPrerender2 takes effect.
 // TODO(crbug.com/1267731): Remove this flag once the experiments are completed.
 BASE_FEATURE(kOmniboxTriggerForNoStatePrefetch,
-             "OmniboxTriggerForNoStatePrefetch",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "OmniboxTriggerForNoStatePrefetch",       // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kPayloadTestComponent,
              "PayloadTestComponent",
diff --git a/chrome/browser/companion/core/features.cc b/chrome/browser/companion/core/features.cc
--- a/chrome/browser/companion/core/features.cc
+++ b/chrome/browser/companion/core/features.cc
@@ -24,16 +24,16 @@ namespace internal {
 // enabled via multiple field trials (e.g., one that's session consistent, other
 // that's permanent consistent).
 BASE_FEATURE(kSidePanelCompanion,
-             "SidePanelCompanion",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SidePanelCompanion",                         // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);           // in Brave
 BASE_FEATURE(kSidePanelCompanion2,
-             "SidePanelCompanion2",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "SidePanelCompanion2",                        // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);           // in Brave
 // Dynamically enables the search companion if the user has experiments
 // enabled.
 BASE_FEATURE(kCompanionEnabledByObservingExpsNavigations,
-             "CompanionEnabledByObservingExpsNavigations",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CompanionEnabledByObservingExpsNavigations", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);           // in Brave, too
 }  // namespace internal
 
 // When search companion is enabled, show a context menu item that allows the
diff --git a/chrome/browser/enterprise/connectors/analysis/content_analysis_features.cc b/chrome/browser/enterprise/connectors/analysis/content_analysis_features.cc
--- a/chrome/browser/enterprise/connectors/analysis/content_analysis_features.cc
+++ b/chrome/browser/enterprise/connectors/analysis/content_analysis_features.cc
@@ -7,7 +7,7 @@
 namespace enterprise_connectors {
 
 BASE_FEATURE(kLocalContentAnalysisEnabled,
-             "LocalContentAnalysisEnabled",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "LocalContentAnalysisEnabled",            // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 }  // namespace enterprise_connectors
diff --git a/chrome/browser/preloading/preloading_features.cc b/chrome/browser/preloading/preloading_features.cc
--- a/chrome/browser/preloading/preloading_features.cc
+++ b/chrome/browser/preloading/preloading_features.cc
@@ -7,8 +7,8 @@
 namespace features {
 
 BASE_FEATURE(kPerformanceSettingsPreloadingSubpage,
-             "PerformanceSettingsPreloadingSubpage",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "PerformanceSettingsPreloadingSubpage",   // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 const base::FeatureParam<bool> kPerformanceSettingsPreloadingSubpageV2{
     &kPerformanceSettingsPreloadingSubpage, "use_v2_preloading_subpage", true};
diff --git a/chrome/browser/safe_browsing/extension_telemetry/extension_telemetry_service_factory.cc b/chrome/browser/safe_browsing/extension_telemetry/extension_telemetry_service_factory.cc
--- a/chrome/browser/safe_browsing/extension_telemetry/extension_telemetry_service_factory.cc
+++ b/chrome/browser/safe_browsing/extension_telemetry/extension_telemetry_service_factory.cc
@@ -20,9 +20,13 @@
 
 namespace safe_browsing {
 
+// We attempt to turn off all of this, now that the kExtensionTelemetry flag is removed.
+// See brave-core 1d8262e0f94031472bb1419ddac1bdfbce6cbffb
+
 // static
 ExtensionTelemetryService* ExtensionTelemetryServiceFactory::GetForProfile(
     Profile* profile) {
+  if ((true)) return nullptr;
   return static_cast<ExtensionTelemetryService*>(
       GetInstance()->GetServiceForBrowserContext(profile, /* create= */ true));
 }
@@ -36,12 +40,13 @@ ExtensionTelemetryServiceFactory::GetInstance() {
 
 ExtensionTelemetryServiceFactory::ExtensionTelemetryServiceFactory()
     : ProfileKeyedServiceFactory("ExtensionTelemetryService",
-                                 ProfileSelections::BuildForRegularProfile()) {
-  DependsOn(NetworkContextServiceFactory::GetInstance());
-  DependsOn(extensions::ExtensionPrefsFactory::GetInstance());
-  DependsOn(extensions::ExtensionRegistryFactory::GetInstance());
-  DependsOn(extensions::ExtensionManagementFactory::GetInstance());
-  DependsOn(extensions::ExtensionSystemFactory::GetInstance());
+                                 ProfileSelections::BuildNoProfilesSelected()) {
+}
+
+content::BrowserContext*
+ExtensionTelemetryServiceFactory::GetBrowserContextToUse(
+    content::BrowserContext* context) const {
+  return nullptr;
 }
 
 std::unique_ptr<KeyedService>
diff --git a/chrome/browser/ui/ui_features.cc b/chrome/browser/ui/ui_features.cc
--- a/chrome/browser/ui/ui_features.cc
+++ b/chrome/browser/ui/ui_features.cc
@@ -30,7 +30,9 @@ BASE_FEATURE(kAllowEyeDropperWGCScreenCapture,
 );
 
 // Enables Chrome Labs menu in the toolbar. See https://crbug.com/1145666
-BASE_FEATURE(kChromeLabs, "ChromeLabs", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kChromeLabs,
+             "ChromeLabs",                             // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 const char kChromeLabsActivationParameterName[] =
     "chrome_labs_activation_percentage";
 const base::FeatureParam<int> kChromeLabsActivationPercentage{
diff --git a/chrome/common/chrome_features.cc b/chrome/common/chrome_features.cc
--- a/chrome/common/chrome_features.cc
+++ b/chrome/common/chrome_features.cc
@@ -892,8 +892,8 @@ BASE_FEATURE(kKioskEnableSystemWebApps,
 
 // When enabled, allows other features to use the k-Anonymity Service.
 BASE_FEATURE(kKAnonymityService,
-             "KAnonymityService",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "KAnonymityService",                      // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Origin to use for requests to the k-Anonymity Auth server to get trust
 // tokens.
@@ -935,8 +935,8 @@ constexpr base::FeatureParam<base::TimeDelta> kKAnonymityServiceQueryInterval{
 // When enabled, the k-Anonymity Service will send requests to the Join and
 // Query k-anonymity servers.
 BASE_FEATURE(kKAnonymityServiceOHTTPRequests,
-             "KAnonymityServiceOHTTPRequests",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "KAnonymityServiceOHTTPRequests",   // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT); // in Brave
 
 // When enabled, the k-Anonymity Service can use a persistent storage to cache
 // public keys.
@@ -1114,8 +1114,8 @@ BASE_FEATURE(kPrivacyGuideAndroid,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kPrivacyGuideAndroidPostMVP,
-             "PrivacyGuideAndroidPostMVP",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "PrivacyGuideAndroidPostMVP",             // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 #endif
 
 // Enables or disables push subscriptions keeping Chrome running in the
diff --git a/chrome/common/companion/visual_query/features.cc b/chrome/common/companion/visual_query/features.cc
--- a/chrome/common/companion/visual_query/features.cc
+++ b/chrome/common/companion/visual_query/features.cc
@@ -35,4 +35,5 @@ int MaxVisualSuggestions() {
                                           "max_visual_suggestions", 1);
 }
 
+SET_CROMITE_FEATURE_DISABLED(kVisualQuerySuggestions);   // disabled in Brave
 }  // namespace companion::visual_query::features
diff --git a/components/aggregation_service/features.cc b/components/aggregation_service/features.cc
--- a/components/aggregation_service/features.cc
+++ b/components/aggregation_service/features.cc
@@ -13,8 +13,8 @@
 namespace aggregation_service {
 
 BASE_FEATURE(kAggregationServiceMultipleCloudProviders,
-             "AggregationServiceMultipleCloudProviders",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "AggregationServiceMultipleCloudProviders", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);         // in Brave
 
 const base::FeatureParam<std::string> kAggregationServiceCoordinatorAwsCloud{
     &kAggregationServiceMultipleCloudProviders, "aws_cloud",
diff --git a/components/attribution_reporting/features.cc b/components/attribution_reporting/features.cc
--- a/components/attribution_reporting/features.cc
+++ b/components/attribution_reporting/features.cc
@@ -14,12 +14,13 @@ BASE_FEATURE(kConversionMeasurement,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kAttributionReportingTriggerConfig,
-             "AttributionReportingTriggerConfig",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "AttributionReportingTriggerConfig", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);  // in Brave, too
 
 BASE_FEATURE(kAttributionReportingTriggerContextId,
              "AttributionReportingTriggerContextId",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 SET_CROMITE_FEATURE_DISABLED(kConversionMeasurement);
+SET_CROMITE_FEATURE_DISABLED(kAttributionReportingTriggerContextId);   // disabled in Brave
 }  // namespace attribution_reporting::features
diff --git a/components/autofill/core/browser/payments/offer_notification_handler.cc b/components/autofill/core/browser/payments/offer_notification_handler.cc
--- a/components/autofill/core/browser/payments/offer_notification_handler.cc
+++ b/components/autofill/core/browser/payments/offer_notification_handler.cc
@@ -23,6 +23,11 @@ bool IsOfferValid(AutofillOfferData* offer) {
     return false;
   }
 
+  // See brave-core 36df5203f5164b9f63b74a47870370793ed992e4
+  if (offer->IsPromoCodeOffer()) {
+    return false;
+  }
+
   if (offer->GetMerchantOrigins().empty()) {
     return false;
   }
diff --git a/components/autofill/core/common/autofill_features.cc b/components/autofill/core/common/autofill_features.cc
--- a/components/autofill/core/common/autofill_features.cc
+++ b/components/autofill/core/common/autofill_features.cc
@@ -144,8 +144,8 @@ BASE_FEATURE(kAutofillDisableAddressImport,
 // Kill switch for computing heuristics other than the active ones
 // (GetActivePatternSource()).
 BASE_FEATURE(kAutofillDisableShadowHeuristics,
-             "AutofillDisableShadowHeuristics",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "AutofillDisableShadowHeuristics",        // enabled by default
+             base::FEATURE_ENABLED_BY_DEFAULT);        // in Brave
 
 // When enabled, autofill will use the new ranking algorithm for address profile
 // autofill suggestions.
@@ -847,8 +847,8 @@ const base::FeatureParam<std::string>
 // "upload" resources.
 // i.e., https://other.autofill.server:port/tbproxy/af/
 BASE_FEATURE(kAutofillServerCommunication,
-             "AutofillServerCommunication",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "AutofillServerCommunication",            // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Controls attaching the autofill type predictions to their respective
 // element in the DOM.
diff --git a/components/autofill/core/common/autofill_payments_features.cc b/components/autofill/core/common/autofill_payments_features.cc
--- a/components/autofill/core/common/autofill_payments_features.cc
+++ b/components/autofill/core/common/autofill_payments_features.cc
@@ -164,8 +164,8 @@ BASE_FEATURE(kAutofillEnablePaymentsMandatoryReauth,
 
 // When enabled, some extra metrics logging for Autofill Downstream will start.
 BASE_FEATURE(kAutofillEnableRemadeDownstreamMetrics,
-             "AutofillEnableRemadeDownstreamMetrics",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "AutofillEnableRemadeDownstreamMetrics",  // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // When enabled, the save card screen will present a loading spinner when
 // uploading the card to the server and present a confirmation screen with the
diff --git a/components/commerce/core/commerce_feature_list.cc b/components/commerce/core/commerce_feature_list.cc
--- a/components/commerce/core/commerce_feature_list.cc
+++ b/components/commerce/core/commerce_feature_list.cc
@@ -122,8 +122,8 @@ BASE_FEATURE(kCommerceAllowLocalImages,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kCommerceAllowOnDemandBookmarkUpdates,
-             "CommerceAllowOnDemandBookmarkUpdates",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "CommerceAllowOnDemandBookmarkUpdates",   // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kCommerceAllowOnDemandBookmarkBatchUpdates,
              "CommerceAllowOnDemandBookmarkBatchUpdates",
@@ -134,8 +134,8 @@ BASE_FEATURE(kCommerceAllowServerImages,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kCommerceMerchantViewer,
-             "CommerceMerchantViewer",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CommerceMerchantViewer",                 // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 #if BUILDFLAG(IS_ANDROID)
 BASE_FEATURE(kCommerceMerchantViewerRegionLaunched,
              "CommerceMerchantViewerRegionLaunched",
@@ -151,8 +151,8 @@ BASE_FEATURE(kCommerceLocalPDPDetection,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kCommercePriceTracking,
-             "CommercePriceTracking",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CommercePriceTracking",                  // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 #if BUILDFLAG(IS_ANDROID)
 BASE_FEATURE(kCommercePriceTrackingRegionLaunched,
@@ -247,7 +247,9 @@ BASE_FEATURE(kShoppingCollection,
              "ShoppingCollection",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
-BASE_FEATURE(kShoppingList, "ShoppingList", base::FEATURE_DISABLED_BY_DEFAULT);
+BASE_FEATURE(kShoppingList,
+             "ShoppingList",                           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 #if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC) || \
     BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_IOS)
 BASE_FEATURE(kShoppingListRegionLaunched,
@@ -268,8 +270,8 @@ BASE_FEATURE(kShoppingListWAARestrictionRemoval,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kShoppingPDPMetrics,
-             "ShoppingPDPMetrics",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "ShoppingPDPMetrics",                     // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kShoppingPDPMetricsRegionLaunched,
              "ShoppingPDPMetricsRegionLaunched",
@@ -283,11 +285,13 @@ BASE_FEATURE(kShoppingPageTypesRegionLaunched,
              "ShoppingPageTypesRegionLaunched",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
-BASE_FEATURE(kRetailCoupons, "RetailCoupons", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kRetailCoupons,
+             "RetailCoupons",                          // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kCommerceDeveloper,
-             "CommerceDeveloper",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CommerceDeveloper",                      // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 const char kRetailCouponsWithCodeParam[] = "RetailCouponsWithCodeParam";
 
diff --git a/components/content_settings/core/common/features.cc b/components/content_settings/core/common/features.cc
--- a/components/content_settings/core/common/features.cc
+++ b/components/content_settings/core/common/features.cc
@@ -52,7 +52,9 @@ const base::FeatureParam<base::TimeDelta>
         &kSafetyCheckUnusedSitePermissions,
         "unused-site-permissions-revocation-cleanup-threshold", base::Days(30)};
 
-BASE_FEATURE(kUserBypassUI, "UserBypassUI", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kUserBypassUI,
+             "UserBypassUI",                           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 const base::FeatureParam<base::TimeDelta> kUserBypassUIExceptionExpiration{
     &kUserBypassUI, "expiration", base::Days(90)};
@@ -75,8 +77,8 @@ BASE_FEATURE(kImprovedSemanticsActivityIndicators,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kTrackingProtection3pcd,
-             "TrackingProtection3pcd",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "TrackingProtection3pcd",                    // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);          // in Brave, too
 
 const char kTpcdReadHeuristicsGrantsName[] = "TpcdReadHeuristicsGrants";
 
diff --git a/components/history/core/browser/features.cc b/components/history/core/browser/features.cc
--- a/components/history/core/browser/features.cc
+++ b/components/history/core/browser/features.cc
@@ -81,8 +81,8 @@ BASE_FEATURE(kPopulateVisitedLinkDatabase,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kSyncSegmentsData,
-             "SyncSegmentsData",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "SyncSegmentsData",                       // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // The maximum number of New Tab Page displays to show with synced segments
 // data.
diff --git a/components/history_clusters/core/features.cc b/components/history_clusters/core/features.cc
--- a/components/history_clusters/core/features.cc
+++ b/components/history_clusters/core/features.cc
@@ -27,7 +27,9 @@ constexpr auto enabled_by_default_desktop_only =
 
 namespace internal {
 
-BASE_FEATURE(kJourneys, "Journeys", enabled_by_default_desktop_only);
+BASE_FEATURE(kJourneys,
+             "Journeys",                               // disabled by default
+             enabled_by_default_desktop_only);         // in Brave, too; we are Android
 
 BASE_FEATURE(kJourneysLabels,
              "JourneysLabel",
@@ -41,16 +43,16 @@ const base::FeatureParam<bool> kJourneysImagesCover{
     &kJourneysImages, "JourneysImagesCover", true};
 
 BASE_FEATURE(kPersistedClusters,
-             "HistoryClustersPersistedClusters",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "HistoryClustersPersistedClusters",       // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kOmniboxAction,
-             "JourneysOmniboxAction",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "JourneysOmniboxAction",                  // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kOmniboxHistoryClusterProvider,
-             "JourneysOmniboxHistoryClusterProvider",
-             enabled_by_default_desktop_only);
+             "JourneysOmniboxHistoryClusterProvider",  // disabled by default
+             enabled_by_default_desktop_only);         // in Brave (too; we are Android)
 
 BASE_FEATURE(kNonUserVisibleDebug,
              "JourneysNonUserVisibleDebug",
@@ -61,12 +63,12 @@ BASE_FEATURE(kUserVisibleDebug,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kPersistContextAnnotationsInHistoryDb,
-             "JourneysPersistContextAnnotationsInHistoryDb",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "JourneysPersistContextAnnotationsInHistoryDb", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);             // in Brave
 
 BASE_FEATURE(kHistoryClustersInternalsPage,
-             "HistoryClustersInternalsPage",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "HistoryClustersInternalsPage",                 // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);             // in Brave, too
 
 BASE_FEATURE(kHistoryClustersUseContinueOnShutdown,
              "HistoryClustersUseContinueOnShutdown",
@@ -85,34 +87,34 @@ BASE_FEATURE(kJourneysIncludeSyncedVisits,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kJourneysPersistCachesToPrefs,
-             "JourneysPersistCachesToPrefs",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "JourneysPersistCachesToPrefs",               // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);           // in Brave
 
 BASE_FEATURE(kHistoryClustersNavigationContextClustering,
-             "HistoryClustersNavigationContextClustering",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "HistoryClustersNavigationContextClustering", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);           // in Brave
 
 // Killswitch only.
 BASE_FEATURE(kJourneysNamedNewTabGroups,
-             "JourneysNamedNewTabGroups",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "JourneysNamedNewTabGroups",              // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kJourneysZeroStateFiltering,
-             "JourneysZeroStateFiltering",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "JourneysZeroStateFiltering",             // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 }  // namespace internal
 
 BASE_FEATURE(kSidePanelJourneys,
-             "SidePanelJourneys",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SidePanelJourneys",                      // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 // If enabled, and the main flag is also enabled, the Journeys omnibox
 // entrypoints open Journeys in Side Panel rather than the History WebUI.
 const base::FeatureParam<bool> kSidePanelJourneysOpensFromOmnibox{
     &kSidePanelJourneys, "SidePanelJourneysOpensFromOmnibox", true};
 
 BASE_FEATURE(kRenameJourneys,
-             "RenameJourneys",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "RenameJourneys",                         // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 }  // namespace history_clusters
diff --git a/components/history_clusters/core/on_device_clustering_features.cc b/components/history_clusters/core/on_device_clustering_features.cc
--- a/components/history_clusters/core/on_device_clustering_features.cc
+++ b/components/history_clusters/core/on_device_clustering_features.cc
@@ -15,8 +15,8 @@ namespace history_clusters {
 namespace features {
 
 BASE_FEATURE(kOnDeviceClustering,
-             "HistoryClustersOnDeviceClustering",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "HistoryClustersOnDeviceClustering",      // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kOnDeviceClusteringContentClustering,
              "JourneysOnDeviceClusteringContentClustering",
@@ -31,8 +31,8 @@ BASE_FEATURE(kOnDeviceClusteringBlocklists,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kOnDeviceClusteringKeywordFiltering,
-             "JourneysKeywordFiltering",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "JourneysKeywordFiltering",               // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kOnDeviceClusteringVisitRanking,
              "JourneysOnDeviceClusteringVisitRanking",
diff --git a/components/lens/lens_features.cc b/components/lens/lens_features.cc
--- a/components/lens/lens_features.cc
+++ b/components/lens/lens_features.cc
@@ -47,8 +47,8 @@ BASE_FEATURE(kEnableContextMenuInLensSidePanel,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kEnableLensPing,
-             "EnableLensPing",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "EnableLensPing",                         // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 constexpr base::FeatureParam<std::string> kHomepageURLForLens{
     &kLensStandalone, "lens-homepage-url", "https://lens.google.com/v3/"};
diff --git a/components/metrics/metrics_features.cc b/components/metrics/metrics_features.cc
--- a/components/metrics/metrics_features.cc
+++ b/components/metrics/metrics_features.cc
@@ -11,8 +11,8 @@ BASE_FEATURE(kMetricsServiceAllowEarlyLogClose,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kStructuredMetrics,
-             "EnableStructuredMetrics",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "EnableStructuredMetrics",                // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kFlushPersistentSystemProfileOnWrite,
              "FlushPersistentSystemProfileOnWrite",
diff --git a/components/metrics/structured/structured_metrics_features.h b/components/metrics/structured/structured_metrics_features.h
--- a/components/metrics/structured/structured_metrics_features.h
+++ b/components/metrics/structured/structured_metrics_features.h
@@ -87,6 +87,9 @@ int GetUploadInterval();
 // minutes).
 base::TimeDelta GetExternalMetricsCollectionInterval();
 
+SET_CROMITE_FEATURE_DISABLED(kEnabledStructuredMetricsService);   // disabled in Brave
+SET_CROMITE_FEATURE_DISABLED(kNearbyShareMetrics);                // disabled in Brave
+SET_CROMITE_FEATURE_DISABLED(kPhoneHubStructuredMetrics);         // disabled in Brave
 }  // namespace metrics::structured
 
 #endif  // COMPONENTS_METRICS_STRUCTURED_STRUCTURED_METRICS_FEATURES_H_
diff --git a/components/network_time/network_time_tracker.cc b/components/network_time/network_time_tracker.cc
--- a/components/network_time/network_time_tracker.cc
+++ b/components/network_time/network_time_tracker.cc
@@ -61,8 +61,8 @@ namespace network_time {
 // which uses tlsdated to set the system time.
 #if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_CHROMEOS_ASH) || BUILDFLAG(IS_IOS)
 BASE_FEATURE(kNetworkTimeServiceQuerying,
-             "NetworkTimeServiceQuerying",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "NetworkTimeServiceQuerying",             // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 #else
 BASE_FEATURE(kNetworkTimeServiceQuerying,
              "NetworkTimeServiceQuerying",
diff --git a/components/omnibox/common/omnibox_features.cc b/components/omnibox/common/omnibox_features.cc
--- a/components/omnibox/common/omnibox_features.cc
+++ b/components/omnibox/common/omnibox_features.cc
@@ -237,15 +237,15 @@ BASE_FEATURE(kDocumentProvider,
 // If enabled, the 'Show Google Drive Suggestions' setting is removed and Drive
 // suggestions are available to all clients who meet the other requirements.
 BASE_FEATURE(kDocumentProviderNoSetting,
-             "OmniboxDocumentProviderNoSetting",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "OmniboxDocumentProviderNoSetting",       // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // If enabled, the requirement to be in an active Sync state is removed and
 // Drive suggestions are available to all clients who meet the other
 // requirements.
 BASE_FEATURE(kDocumentProviderNoSyncRequirement,
-             "OmniboxDocumentProviderNoSyncRequirement",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "OmniboxDocumentProviderNoSyncRequirement", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);         // in Brave, too
 
 // Feature to determine if the HQP should double as a domain provider by
 // suggesting up to the provider limit for each of the user's highly visited
@@ -311,8 +311,8 @@ BASE_FEATURE(kMostVisitedTilesHorizontalRenderGroup,
 // prefixes. Will also adjust the location bar UI and omnibox text selection to
 // accommodate the autocompletions.
 BASE_FEATURE(kRichAutocompletion,
-             "OmniboxRichAutocompletion",
-             enabled_by_default_desktop_only);
+             "OmniboxRichAutocompletion",              // disabled by default
+             enabled_by_default_desktop_only);         // in Brave, too; we are Android
 
 // Feature used to enable Pedals in the NTP Realbox.
 BASE_FEATURE(kNtpRealboxPedals,
diff --git a/components/optimization_guide/core/optimization_guide_features.cc b/components/optimization_guide/core/optimization_guide_features.cc
--- a/components/optimization_guide/core/optimization_guide_features.cc
+++ b/components/optimization_guide/core/optimization_guide_features.cc
@@ -173,8 +173,8 @@ BASE_FEATURE(kPageVisibilityPageContentAnnotations,
              base::FEATURE_ENABLED_BY_DEFAULT);
 // Enables the text embedding model to be annotated on every page load.
 BASE_FEATURE(kTextEmbeddingPageContentAnnotations,
-             "TextEmbeddingPageContentAnnotations",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "TextEmbeddingPageContentAnnotations",    // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // This feature flag does not allow for the entities model to load the name and
 // prefix filters.
diff --git a/components/page_image_service/features.cc b/components/page_image_service/features.cc
--- a/components/page_image_service/features.cc
+++ b/components/page_image_service/features.cc
@@ -7,12 +7,14 @@
 namespace page_image_service {
 
 // Enabled by default because we are only using this as a killswitch.
-BASE_FEATURE(kImageService, "ImageService", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kImageService,
+             "ImageService",                           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Enabled the capability by default, can be used as a killswitch.
 BASE_FEATURE(kImageServiceSuggestPoweredImages,
-             "ImageServiceSuggestPoweredImages",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "ImageServiceSuggestPoweredImages",       // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Enabled the capability by default, can be used as a killswitch.
 BASE_FEATURE(kImageServiceOptimizationGuideSalientImages,
diff --git a/components/permissions/features.cc b/components/permissions/features.cc
--- a/components/permissions/features.cc
+++ b/components/permissions/features.cc
@@ -132,8 +132,8 @@ BASE_FEATURE(kWindowPlacementPermissionAlias,
 // storage access exceptions. This will allow RWS permission grants to be
 // visible in the Embedded content settings page.
 BASE_FEATURE(kShowRelatedWebsiteSetsPermissionGrants,
-             "ShowRelatedWebsiteSetsPermissionGrants",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "ShowRelatedWebsiteSetsPermissionGrants", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 #include "cromite_flags/components_permissions_features_cc.inc"
 }  // namespace features
diff --git a/components/privacy_sandbox/privacy_sandbox_features.cc b/components/privacy_sandbox/privacy_sandbox_features.cc
--- a/components/privacy_sandbox/privacy_sandbox_features.cc
+++ b/components/privacy_sandbox/privacy_sandbox_features.cc
@@ -87,22 +87,22 @@ const base::FeatureParam<bool> kPrivacySandboxSettings4CloseAllPrompts{
     &kPrivacySandboxSettings4, "close-all-prompts", true};
 
 BASE_FEATURE(kOverridePrivacySandboxSettingsLocalTesting,
-             "OverridePrivacySandboxSettingsLocalTesting",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "OverridePrivacySandboxSettingsLocalTesting", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);           // in Brave, too
 
 BASE_FEATURE(kDisablePrivacySandboxPrompts,
              "DisablePrivacySandboxPrompts",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kPrivacySandboxFirstPartySetsUI,
-             "PrivacySandboxFirstPartySetsUI",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "PrivacySandboxFirstPartySetsUI",         // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 const base::FeatureParam<bool> kPrivacySandboxFirstPartySetsUISampleSets{
     &kPrivacySandboxFirstPartySetsUI, "use-sample-sets", false};
 
 BASE_FEATURE(kEnforcePrivacySandboxAttestations,
-             "EnforcePrivacySandboxAttestations",  // if enabled
-             base::FEATURE_ENABLED_BY_DEFAULT);    // log to console
+             "EnforcePrivacySandboxAttestations",      // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kDefaultAllowPrivacySandboxAttestations,
              "DefaultAllowPrivacySandboxAttestations",
@@ -120,8 +120,8 @@ BASE_FEATURE(kPrivacySandboxAttestationsHigherComponentRegistrationPriority,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kPrivacySandboxProactiveTopicsBlocking,
-             "PrivacySandboxProactiveTopicsBlocking",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "PrivacySandboxProactiveTopicsBlocking",  // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kTrackingProtectionSettingsPageRollbackNotice,
              "TrackingProtectionSettingsPageRollbackNotice",
diff --git a/components/safe_browsing/core/common/features.cc b/components/safe_browsing/core/common/features.cc
--- a/components/safe_browsing/core/common/features.cc
+++ b/components/safe_browsing/core/common/features.cc
@@ -131,16 +131,16 @@ BASE_FEATURE(
     base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kExtensionTelemetryTabsApiSignal,
-             "SafeBrowsingExtensionTelemetryTabsApiSignal",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SafeBrowsingExtensionTelemetryTabsApiSignal", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);            // in Brave
 
 BASE_FEATURE(kExtensionTelemetryTabsExecuteScriptSignal,
              "SafeBrowsingExtensionTelemetryTabsExecuteScriptSignal",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kExtensionTelemetryDisableOffstoreExtensions,
-             "SafeBrowsingExtensionTelemetryDisableOffstoreExtensions",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SafeBrowsingExtensionTelemetryDisableOffstoreExtensions",   // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);                          // in Brave
 
 BASE_FEATURE(kFriendlierSafeBrowsingSettingsEnhancedProtection,
              "FriendlierSafeBrowsingSettingsEnhancedProtection",
diff --git a/components/search/ntp_features.cc b/components/search/ntp_features.cc
--- a/components/search/ntp_features.cc
+++ b/components/search/ntp_features.cc
@@ -33,13 +33,13 @@ BASE_FEATURE(kCustomizeChromeColorExtraction,
 // If enabled, shows an extension card within the Customize Chrome Side
 // Panel for access to the Chrome Web Store extensions.
 BASE_FEATURE(kCustomizeChromeSidePanelExtensionsCard,
-             "CustomizeChromeSidePanelExtensionsCard",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CustomizeChromeSidePanelExtensionsCard", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // If enabled, shows wallpaper search within the Cusotmize Chrome Side Panel.
 BASE_FEATURE(kCustomizeChromeWallpaperSearch,
-             "CustomizeChromeWallpaperSearch",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CustomizeChromeWallpaperSearch",         // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // If enabled, shows inspiration card in Customize Chrome Side Panel Wallpaper
 // Search.
@@ -113,19 +113,19 @@ BASE_FEATURE(kRealboxUseGoogleGIcon,
 
 // If enabled, alpha NTP backgrounds will show in Customize Chrome.
 BASE_FEATURE(kNtpAlphaBackgroundCollections,
-             "NtpAlphaBackgroundCollections",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "NtpAlphaBackgroundCollections",          // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // If enabled, NTP background image links will be checked for HTTP status
 // errors."
 BASE_FEATURE(kNtpBackgroundImageErrorDetection,
-             "NtpBackgroundImageErrorDetection",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "NtpBackgroundImageErrorDetection",       // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // If enabled, chrome cart module will be shown.
 BASE_FEATURE(kNtpChromeCartModule,
-             "NtpChromeCartModule",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "NtpChromeCartModule",                    // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // If enabled, Comprehensive Theming color changes will be applied to the
 // Realbox on the New Tab Page.
@@ -201,8 +201,8 @@ BASE_FEATURE(kNtpModulesOrder,
 
 // Dummy feature to set param "NtpModulesMaxColumnCountParam".
 BASE_FEATURE(kNtpModulesMaxColumnCount,
-             "NtpModulesMaxColumnCount",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "NtpModulesMaxColumnCount",               // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Dummy feature to set param "NtpModulesLoadedWithOtherModulesMaxInstanceCount"
 BASE_FEATURE(kNtpModulesLoadedWithOtherModulesMaxInstanceCount,
@@ -308,8 +308,8 @@ BASE_FEATURE(kNtpSingleRowShortcuts,
 
 // If enabled, the History clusters module will be shown.
 BASE_FEATURE(kNtpHistoryClustersModule,
-             "NtpHistoryClustersModule",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "NtpHistoryClustersModule",               // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Dummy feature to set kNtpHistoryClustersModuleBeginTimeDurationHoursParam.
 BASE_FEATURE(kNtpHistoryClustersModuleBeginTimeDuration,
@@ -335,8 +335,8 @@ BASE_FEATURE(kNtpHistoryClustersModuleCategories,
 // useful to determine if a user would have seen modules in order to
 // counterfactually log or trigger.
 BASE_FEATURE(kNtpHistoryClustersModuleLoad,
-             "NtpHistoryClustersModuleLoad",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "NtpHistoryClustersModuleLoad",           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Dummy feature to set kNtpHistoryClustersModuleMaxClustersParam.
 BASE_FEATURE(kNtpHistoryClustersModuleMaxClusters,
@@ -356,8 +356,8 @@ BASE_FEATURE(kNtpHistoryClustersModuleSuggestionChipHeader,
 // If enabled, Discounts badge will show on the visit tile in the History
 // clusters module when available.
 BASE_FEATURE(kNtpHistoryClustersModuleDiscounts,
-             "NtpHistoryClustersModuleDiscounts",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "NtpHistoryClustersModuleDiscounts",      // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // If enabled, ChromeCart tile will show in the History clusters module when
 // available.
diff --git a/components/segmentation_platform/public/features.cc b/components/segmentation_platform/public/features.cc
--- a/components/segmentation_platform/public/features.cc
+++ b/components/segmentation_platform/public/features.cc
@@ -81,8 +81,8 @@ BASE_FEATURE(kSegmentationDefaultReportingSegments,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kSegmentationPlatformDeviceTier,
-             "SegmentationPlatformDeviceTier",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SegmentationPlatformDeviceTier",         // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kSegmentationPlatformTabletProductivityUser,
              "SegmentationPlatformTabletProductivityUser",
@@ -117,12 +117,12 @@ BASE_FEATURE(kSegmentationPlatformIosModuleRanker,
 #endif
 
 BASE_FEATURE(kSegmentationPlatformTimeDelaySampling,
-             "SegmentationPlatformTimeDelaySampling",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "SegmentationPlatformTimeDelaySampling",  // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kSegmentationPlatformCollectTabRankData,
-             "SegmentationPlatformCollectTabRankData",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "SegmentationPlatformCollectTabRankData", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kSegmentationPlatformModelInitializationDelay,
              "SegmentationPlatformModelInitializationDelay",
diff --git a/components/send_tab_to_self/entry_point_display_reason.cc b/components/send_tab_to_self/entry_point_display_reason.cc
--- a/components/send_tab_to_self/entry_point_display_reason.cc
+++ b/components/send_tab_to_self/entry_point_display_reason.cc
@@ -40,6 +40,9 @@ absl::optional<EntryPointDisplayReason> GetEntryPointDisplayReason(
     syncer::SyncService* sync_service,
     SendTabToSelfModel* send_tab_to_self_model,
     PrefService* pref_service) {
+  // Modified to replicate logic in brave-core 111b3401484fc8f52352776ea12fa40fb9880899
+  // since the kSendTabToSelfSigninPromo flag is removed.
+
   if (!url_to_share.SchemeIsHTTPOrHTTPS()) {
     return absl::nullopt;
   }
@@ -50,24 +53,15 @@ absl::optional<EntryPointDisplayReason> GetEntryPointDisplayReason(
   }
 
   if (ShouldOfferSignin(sync_service, pref_service)) {
-    return EntryPointDisplayReason::kOfferSignIn;
+    return absl::nullopt;
   }
 
   if (!send_tab_to_self_model->IsReady()) {
-    syncer::SyncUserSettings* settings = sync_service->GetUserSettings();
-    if (sync_service->IsEngineInitialized() &&
-        (settings->IsPassphraseRequiredForPreferredDataTypes() ||
-         settings->IsTrustedVaultKeyRequiredForPreferredDataTypes())) {
-      // There's an encryption error, the model won't become ready unless the
-      // user takes explicit action. But the error will be surfaced by dedicated
-      // non send-tab-to-self UI. So just treat this as the no device case.
-      return EntryPointDisplayReason::kInformNoTargetDevice;
-    }
     return absl::nullopt;
   }
 
   if (!send_tab_to_self_model->HasValidTargetDevice()) {
-    return EntryPointDisplayReason::kInformNoTargetDevice;
+    return absl::nullopt;
   }
 
   return EntryPointDisplayReason::kOfferFeature;
diff --git a/components/shared_highlighting/core/common/shared_highlighting_features.cc b/components/shared_highlighting/core/common/shared_highlighting_features.cc
--- a/components/shared_highlighting/core/common/shared_highlighting_features.cc
+++ b/components/shared_highlighting/core/common/shared_highlighting_features.cc
@@ -26,8 +26,8 @@ BASE_FEATURE(kIOSSharedHighlightingV2,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kSharedHighlightingManager,
-             "SharedHighlightingManager",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "SharedHighlightingManager",              // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 int GetPreemptiveLinkGenTimeoutLengthMs() {
   return kPreemptiveLinkGenTimeoutLengthMs.Get();
diff --git a/components/subresource_filter/core/common/common_features.cc b/components/subresource_filter/core/common/common_features.cc
--- a/components/subresource_filter/core/common/common_features.cc
+++ b/components/subresource_filter/core/common/common_features.cc
@@ -6,7 +6,9 @@
 
 namespace subresource_filter {
 
-BASE_FEATURE(kAdTagging, "AdTagging", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kAdTagging,
+             "AdTagging",                              // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kTPCDAdHeuristicSubframeRequestTagging,
              "TPCDAdHeuristicSubframeRequestTagging",
diff --git a/content/browser/attribution_reporting/attribution_storage_delegate_impl.cc b/content/browser/attribution_reporting/attribution_storage_delegate_impl.cc
--- a/content/browser/attribution_reporting/attribution_storage_delegate_impl.cc
+++ b/content/browser/attribution_reporting/attribution_storage_delegate_impl.cc
@@ -237,6 +237,9 @@ AttributionStorageDelegateImpl::GetNullAggregatableReports(
     absl::optional<base::Time> attributed_source_time) const {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
 
+  // See brave-core da32f5c44b1563e408eabe2f8e9ed263d28ce468
+  if ((true)) return {};
+
   switch (noise_mode_) {
     case AttributionNoiseMode::kDefault:
       return GetNullAggregatableReportsImpl(trigger, trigger_time,
diff --git a/content/common/features.cc b/content/common/features.cc
--- a/content/common/features.cc
+++ b/content/common/features.cc
@@ -373,8 +373,8 @@ BASE_FEATURE(kPrivateNetworkAccessForNavigationsWarningOnly,
 // Enables reporting ResourceTiming entries for document, who initiated a
 // cancelled navigation in one of their <iframe>.
 BASE_FEATURE(kResourceTimingForCancelledNavigationInFrame,
-             "ResourceTimingForCancelledNavigationInFrame",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "ResourceTimingForCancelledNavigationInFrame", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);            // in Brave
 
 // Enable the ProactivelySwapBrowsingInstance experiment. A browsing instance
 // represents a set of frames that can script each other. Currently, Chrome does
@@ -462,8 +462,8 @@ BASE_FEATURE(kRunStableVideoDecoderFactoryProcessServiceOnIOThread,
 //
 // crbug.com/1472634 for more details.
 BASE_FEATURE(kServiceWorkerAutoPreload,
-             "ServiceWorkerAutoPreload",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "ServiceWorkerAutoPreload",               // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // (crbug.com/1371756): When enabled, the static routing API starts
 // ServiceWorker when the routing result of a main resource request was network
diff --git a/content/public/common/content_features.cc b/content/public/common/content_features.cc
--- a/content/public/common/content_features.cc
+++ b/content/public/common/content_features.cc
@@ -27,8 +27,8 @@ BASE_FEATURE(kAndroidSurfaceControlMagnifier,
 
 // Enables FLEDGE and Attribution Reporting API integration.
 BASE_FEATURE(kAttributionFencedFrameReportingBeacon,
-             "AttributionFencedFrameReportingBeacon",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "AttributionFencedFrameReportingBeacon",  // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Launches the audio service on the browser startup.
 BASE_FEATURE(kAudioServiceLaunchOnStartup,
@@ -191,8 +191,8 @@ BASE_FEATURE(kCompositeBGColorAnimation,
 // server side testing without cookies.
 // (See https://developer.chrome.com/en/docs/privacy-sandbox/chrome-testing)
 BASE_FEATURE(kCookieDeprecationFacilitatedTesting,
-             "CookieDeprecationFacilitatedTesting",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CookieDeprecationFacilitatedTesting", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);    // in Brave, too
 
 // Set whether to enable cookie deprecation API for off-the-record profiles.
 const base::FeatureParam<bool>
@@ -235,18 +235,15 @@ BASE_FEATURE(kDevicePosture,
 // Controls whether the Digital Goods API is enabled.
 // https://github.com/WICG/digital-goods/
 BASE_FEATURE(kDigitalGoodsApi,
-             "DigitalGoodsApi",
-#if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_CHROMEOS)
-             base::FEATURE_ENABLED_BY_DEFAULT
-#else
-             base::FEATURE_DISABLED_BY_DEFAULT
-#endif
-);
+             "DigitalGoodsApi",                        // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Enables the DIPS (Detect Incidental Party State) feature.
 // On by default to allow for collecting metrics. All potentially dangerous
 // behavior (database persistence, DIPS deletion) will be gated by params.
-BASE_FEATURE(kDIPS, "DIPS", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kDIPS,
+             "DIPS",                                   // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Set whether DIPS persists its database to disk.
 const base::FeatureParam<bool> kDIPSPersistedDatabaseEnabled{
@@ -351,7 +348,9 @@ BASE_FEATURE(kEnableServiceWorkersForChromeScheme,
 // by the flag in RuntimeEnabledFeatures on the blink side. See also
 // the use of kSetOnlyIfOverridden in content/child/runtime_features.cc.
 // We enable it here by default to support use in origin trials.
-BASE_FEATURE(kFedCm, "FedCm", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kFedCm,
+             "FedCm",                                  // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Enables the "Add Account" button in the FedCM account chooser to log in to
 // another IDP account, if the IDP opts in.
@@ -434,8 +433,8 @@ BASE_FEATURE(kWebIdentityDigitalCredentials,
 
 // Enables usage of First Party Sets to determine cookie availability.
 BASE_FEATURE(kFirstPartySets,
-             "FirstPartySets",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "FirstPartySets",                         // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Controls whether to clear sites data on FPS transitions.
 const base::FeatureParam<bool> kFirstPartySetsClearSiteDataOnChangedSets{
@@ -524,14 +523,14 @@ BASE_FEATURE(kLazyInitializeMediaControls,
 
 // Enables reporting of Cookie Issues for Legacy Technology Report.
 BASE_FEATURE(kLegacyTechReportEnableCookieIssueReports,
-             "LegacyTechReportEnableCookieIssueReports",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "LegacyTechReportEnableCookieIssueReports", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);         // in Brave, too
 
 // Using top-level document URL when create an enterprise report for legacy
 // technologies usage
 BASE_FEATURE(kLegacyTechReportTopLevelUrl,
-             "LegacyTechReportTopLevelUrl",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "LegacyTechReportTopLevelUrl",              // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);         // in Brave
 
 // Configures whether Blink on Windows 8.0 and below should use out of process
 // API font fallback calls to retrieve a fallback font family name as opposed to
@@ -625,8 +624,8 @@ BASE_FEATURE(kNotificationContentImage,
 
 // Enables the notification trigger API.
 BASE_FEATURE(kNotificationTriggers,
-             "NotificationTriggers",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "NotificationTriggers",                   // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Feature which holdbacks NoStatePrefetch on all surfaces.
 BASE_FEATURE(kNoStatePrefetchHoldback,
@@ -994,7 +993,9 @@ BASE_FEATURE(kUserMediaCaptureOnFocus,
 
 // This is intended as a kill switch for the WebOTP Service feature. To enable
 // this feature, the experimental web platform features flag should be set.
-BASE_FEATURE(kWebOTP, "WebOTP", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kWebOTP,
+             "WebOTP",                                 // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Enable the web lockscreen API implementation
 // (https://github.com/WICG/lock-screen) in Chrome.
@@ -1313,7 +1314,9 @@ BASE_FEATURE(kUserMediaScreenCapturing,
 // Kill switch for the WebNFC feature. This feature can be enabled for all sites
 // using the kEnableExperimentalWebPlatformFeatures flag.
 // https://w3c.github.io/web-nfc/
-BASE_FEATURE(kWebNfc, "WebNFC", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kWebNfc,
+             "WebNFC",                                 // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 #endif  // BUILDFLAG(IS_ANDROID)
 
diff --git a/net/base/features.cc b/net/base/features.cc
--- a/net/base/features.cc
+++ b/net/base/features.cc
@@ -244,12 +244,12 @@ BASE_FEATURE(kCookieSameSiteConsidersRedirectChain,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kWaitForFirstPartySetsInit,
-             "WaitForFirstPartySetsInit",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "WaitForFirstPartySetsInit",              // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kPartitionedCookies,
-             "PartitionedCookies",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "PartitionedCookies",                     // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kBlockTruncatedCookies,
              "BlockTruncatedCookies",
@@ -281,8 +281,8 @@ BASE_FEATURE(kTpcdSupportSettings,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kTpcdMetadataGrants,
-             "TpcdMetadataGrants",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "TpcdMetadataGrants",               // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT); // in Brave
 
 BASE_FEATURE(kAlpsParsing, "AlpsParsing", base::FEATURE_ENABLED_BY_DEFAULT);
 
@@ -454,8 +454,8 @@ BASE_FEATURE(kEnableEarlyHintsOnHttp11,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kEnableWebTransportDraft07,
-             "EnableWebTransportDraft07",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "EnableWebTransportDraft07",              // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kZstdContentEncoding,
              "ZstdContentEncoding",
diff --git a/services/network/public/cpp/features.cc b/services/network/public/cpp/features.cc
--- a/services/network/public/cpp/features.cc
+++ b/services/network/public/cpp/features.cc
@@ -159,12 +159,14 @@ BASE_FEATURE(kAttributionReportingCrossAppWeb,
 // set, and handling their responses, according to the protocol.
 // (See https://github.com/WICG/trust-token-api.)
 BASE_FEATURE(kPrivateStateTokens,
-             "PrivateStateTokens",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "PrivateStateTokens",                     // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Secondary flag used by the FLEDGE ads experiment in the interim before
 // PSTs are fully rolled out to stable.
-BASE_FEATURE(kFledgePst, "TrustTokens", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kFledgePst,
+             "TrustTokens",                            // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Determines which Trust Tokens operations require the TrustTokens origin trial
 // active in order to be used. This is runtime-configurable so that the Trust
diff --git a/third_party/blink/common/features.cc b/third_party/blink/common/features.cc
--- a/third_party/blink/common/features.cc
+++ b/third_party/blink/common/features.cc
@@ -114,8 +114,8 @@ BASE_FEATURE(kAllowSyncXHRInPageDismissal,
 // Enables URN URLs like those produced by Protected Audience auctions to be
 // displayed by iframes (instead of requiring fenced frames).
 BASE_FEATURE(kAllowURNsInIframes,
-             "AllowURNsInIframes",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "AllowURNsInIframes",                     // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Anchor Element Interaction
 BASE_FEATURE(kAnchorElementInteraction,
@@ -243,8 +243,8 @@ BASE_FEATURE(kBackForwardCacheWithKeepaliveRequest,
 // Enable background resource fetch in Blink. See https://crbug.com/1379780 for
 // more details.
 BASE_FEATURE(kBackgroundResourceFetch,
-             "BackgroundResourceFetch",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "BackgroundResourceFetch",               // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);      // in Brave, too
 
 // Used to configure a per-origin allowlist of performance.mark events that are
 // permitted to be included in slow reports traces. See crbug.com/1181774.
@@ -258,8 +258,8 @@ const base::FeatureParam<std::string>
 // See https://github.com/WICG/turtledove/blob/main/FLEDGE.md
 // Feature flag to enable debug reporting APIs.
 BASE_FEATURE(kBiddingAndScoringDebugReportingAPI,
-             "BiddingAndScoringDebugReportingAPI",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "BiddingAndScoringDebugReportingAPI",     // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Blink garbage collection.
 // Enables compaction of backing stores on Blink's heap.
@@ -479,8 +479,8 @@ BASE_FEATURE(kClientHintsDeviceMemory_DEPRECATED,
 
 // Enable `form-factor` client hint.
 BASE_FEATURE(kClientHintsFormFactor,
-             "ClientHintsFormFactor",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "ClientHintsFormFactor",                  // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Enable `sec-ch-prefers-reduced-transparency` client hint.
 BASE_FEATURE(kClientHintsPrefersReducedTransparency,
@@ -722,8 +722,8 @@ BASE_FEATURE(kEventTimingMatchPresentationIndex,
 // Enables reporting Event Timing entries with a smaller presentation index on
 // resolved painted presentation.
 BASE_FEATURE(kEventTimingReportAllEarlyEntriesOnPaintedPresentation,
-             "EventTimingReportAllEarlyEntriesOnPaintedPresentation",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "EventTimingReportAllEarlyEntriesOnPaintedPresentation", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);                      // in Brave, too
 
 // Enables unload handler deprecation via Permissions-Policy.
 // https://crbug.com/1324111
@@ -760,7 +760,9 @@ const base::FeatureParam<double> kMinimumEntropyForLCP{
 // this feature does not automatically expose this element to the web, it only
 // allows the element to be enabled by the runtime enabled feature, for origin
 // trials.
-BASE_FEATURE(kFencedFrames, "FencedFrames", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kFencedFrames,
+             "FencedFrames",                           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Enable the new fenced frame-related features in M120. (These are
 // conditionally dependent on other fenced frame-related feature flags being
@@ -838,7 +840,9 @@ BASE_FEATURE(kFixGestureScrollQueuingBug,
 
 // See https://github.com/WICG/turtledove/blob/main/FLEDGE.md
 // Enables FLEDGE implementation. See https://crbug.com/1186444.
-BASE_FEATURE(kFledge, "Fledge", base::FEATURE_DISABLED_BY_DEFAULT);
+BASE_FEATURE(kFledge,
+             "Fledge",                                 // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // See
 // https://github.com/WICG/turtledove/blob/main/FLEDGE_browser_bidding_and_auction_API.md
@@ -852,11 +856,11 @@ const base::FeatureParam<std::string> kFledgeBiddingAndAuctionKeyConfig{
 
 // See in the header.
 BASE_FEATURE(kFledgeConsiderKAnonymity,
-             "FledgeConsiderKAnonymity",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "FledgeConsiderKAnonymity",               // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 BASE_FEATURE(kFledgeEnforceKAnonymity,
-             "FledgeEnforceKAnonymity",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "FledgeEnforceKAnonymity",                // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kFledgePassKAnonStatusToReportWin,
              "FledgePassKAnonStatusToReportWin",
@@ -1056,8 +1060,8 @@ BASE_FEATURE(kKeepAliveInBrowserMigration,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kAttributionReportingInBrowserMigration,
-             "kAttributionReportingInBrowserMigration",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "kAttributionReportingInBrowserMigration", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);        // in Brave, too
 
 // Enables reporting as LCP of the time the first frame of an animated image was
 // painted.
@@ -1267,8 +1271,8 @@ BASE_FEATURE(kMaxUnthrottledTimeoutNestingLevel,
 const base::FeatureParam<int> kMaxUnthrottledTimeoutNestingLevelParam{
     &kMaxUnthrottledTimeoutNestingLevel, "nesting", 15};
 BASE_FEATURE(kMixedContentAutoupgrade,
-             "AutoupgradeMixedContent",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "AutoupgradeMixedContent",                // enabled by default
+             base::FEATURE_ENABLED_BY_DEFAULT);        // in Brave, too
 
 BASE_FEATURE(kMemoryCacheStrongReferenceFilterImages,
              "MemoryCacheStrongReferenceFilterImages",
@@ -1524,8 +1528,8 @@ constexpr base::FeatureParam<bool> kPrivateAggregationApiDebugModeEnabledAtAll{
 // Allows for different aggregation coordinators to be set. If disabled, any
 // selection will be ignored and replaced with the default.
 BASE_FEATURE(kPrivateAggregationApiMultipleCloudProviders,
-             "PrivateAggregationApiMultipleCloudProviders",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "PrivateAggregationApiMultipleCloudProviders", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);            // in Brave
 
 BASE_FEATURE(kPrivateNetworkAccessNullIpAddress,
              "PrivateNetworkAccessNullIpAddress",
@@ -1596,8 +1600,8 @@ const base::FeatureParam<int> kRTCGpuCodecSupportWaiterTimeoutParam{
 // Reduce the amount of information in the default 'referer' header for
 // cross-origin requests.
 BASE_FEATURE(kReducedReferrerGranularity,
-             "ReducedReferrerGranularity",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "ReducedReferrerGranularity",             // enabled by default
+             base::FEATURE_ENABLED_BY_DEFAULT);        // in Brave, too
 
 const base::FeatureParam<std::string> kUserAgentFrozenBuildVersion{
     &kReduceUserAgentMinorVersion, "build_version", "0"};
@@ -1738,8 +1742,8 @@ BASE_FEATURE(kSetTimeoutWithoutClamp,
 // enabled by the runtime enabled feature, for origin trials.
 // https://github.com/pythagoraskitty/shared-storage/blob/main/README.md
 BASE_FEATURE(kSharedStorageAPI,
-             "SharedStorageAPI",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SharedStorageAPI",                       // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 const base::FeatureParam<int>
     kSharedStorageURLSelectionOperationInputURLSizeLimit{
         &kSharedStorageAPI, "url_selection_operation_input_url_size_limit", 8};
@@ -1775,8 +1779,8 @@ const base::FeatureParam<int>
         "SharedStorageMaxAllowedFencedFrameDepthForSelectURL", 1};
 
 BASE_FEATURE(kSharedStorageSelectURLLimit,
-             "SharedStorageSelectURLLimit",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SharedStorageSelectURLLimit",            // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 const base::FeatureParam<int> kSharedStorageSelectURLBitBudgetPerPageLoad = {
     &kSharedStorageSelectURLLimit, "SharedStorageSelectURLBitBudgetPerPageLoad",
     12};
@@ -1786,8 +1790,8 @@ const base::FeatureParam<int>
         "SharedStorageSelectURLBitBudgetPerSitePerPageLoad", 6};
 
 BASE_FEATURE(kSharedStorageAPIM118,
-             "SharedStorageAPIM118",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SharedStorageAPIM118",                   // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kSimulateClickOnAXFocus,
              "SimulateClickOnAXFocus",
@@ -1808,12 +1812,12 @@ BASE_FEATURE(kSmallScriptStreaming,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kSpeculationRulesHeaderEnableThirdPartyOriginTrial,
-             "SpeculationRulesHeaderEnableThirdPartyOriginTrial",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SpeculationRulesHeaderEnableThirdPartyOriginTrial", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);                  // in Brave
 
 BASE_FEATURE(kSpeculationRulesPrefetchFuture,
-             "SpeculationRulesPrefetchFuture",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SpeculationRulesPrefetchFuture",                    // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);                  // in Brave
 
 // Enable service worker warming-up feature. (https://crbug.com/1431792)
 BASE_FEATURE(kSpeculativeServiceWorkerWarmUp,
@@ -2022,8 +2026,8 @@ BASE_FEATURE(kTimedHTMLParserBudget,
 // Changes behavior of User-Agent Client Hints to send blank headers when the
 // User-Agent string is overridden, instead of disabling the headers altogether.
 BASE_FEATURE(kUACHOverrideBlank,
-             "UACHOverrideBlank",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "UACHOverrideBlank",                      // enabled by default
+             base::FEATURE_ENABLED_BY_DEFAULT);        // in Brave
 
 // If enabled, the body of `EmulateLoadStartedForInspector` is executed only
 // once per Resource per ResourceFetcher, and thus duplicated network load
diff --git a/third_party/blink/renderer/core/html/html_script_element.cc b/third_party/blink/renderer/core/html/html_script_element.cc
--- a/third_party/blink/renderer/core/html/html_script_element.cc
+++ b/third_party/blink/renderer/core/html/html_script_element.cc
@@ -383,8 +383,8 @@ bool HTMLScriptElement::supports(const AtomicString& type) {
   if (type == script_type_names::kImportmap)
     return true;
 
-  if (type == script_type_names::kSpeculationrules) {
-    return true;
+  if (type == script_type_names::kSpeculationrules) {  // disabled
+    return false;                                      // in Brave
   }
   if (type == script_type_names::kWebbundle)
     return true;
diff --git a/third_party/blink/renderer/platform/runtime_enabled_features.json5 b/third_party/blink/renderer/platform/runtime_enabled_features.json5
--- a/third_party/blink/renderer/platform/runtime_enabled_features.json5
+++ b/third_party/blink/renderer/platform/runtime_enabled_features.json5
@@ -286,9 +286,9 @@
     },
     {
       // Interest Group JS API/runtimeflag.
-      name: "AdInterestGroupAPI",
+      name: "AdInterestGroupAPI", // disabled
+      status: {},                 // in Brave
       origin_trial_feature_name: "AdInterestGroupAPI",
-      implied_by: ["Fledge", "Parakeet"],
       public: true,
     },
     {
@@ -320,9 +320,9 @@
       base_feature: "none",
     },
     {
-      name: "AnonymousIframe",
+      name: "AnonymousIframe", // disabled
+      status: {},              // in Brave
       public: true,
-      status: "stable",
       base_feature: "none",
     },
     {
@@ -630,8 +630,8 @@
       base_feature: "none",
     },
     {
-      name: "ClientHintsMetaEquivDelegateCH",
-      status: "stable",
+      name: "ClientHintsMetaEquivDelegateCH", // disabled
+      status: {},                             // in Brave
     },
     {
       name: "ClientHintsMetaHTTPEquivAcceptCH",
@@ -740,11 +740,9 @@
     {
       // blink::features::kComputePressure is a kill switch for the API. If the
       // feature is disabled, origin trial tokens are ignored.
-      name: "ComputePressure",
+      name: "ComputePressure", // disabled
+      status: {},              // in Brave
       origin_trial_feature_name: "ComputePressure_v2",
-      status: "experimental",
-      base_feature_status: "enabled",
-      copied_from_base_feature_if: "overridden",
     },
     {
       name: "ConfirmationOfAction",
@@ -1090,8 +1088,8 @@
       implied_by: ["CSSStickyContainerQueries", "CSSStickyContainerQueries"],
     },
     {
-      name: "CSSSelectorFragmentAnchor",
-      status: "experimental",
+      name: "CSSSelectorFragmentAnchor", // disabled
+      status: {},                        // in Brave
       base_feature: "CssSelectorFragmentAnchor",
     },
     {
@@ -1767,7 +1765,8 @@
       status: "experimental",
     },
     {
-      name: "Fledge",
+      name: "Fledge", // disabled
+      status: {},     // in Brave
       base_feature: "none",
       origin_trial_feature_name: "PrivacySandboxAdsAPIs",
       origin_trial_allows_third_party: true,
@@ -2780,7 +2779,8 @@
     },
     {
       // PARAKEET ad serving runtime flag/JS API.
-      name: "Parakeet",
+      name: "Parakeet", // disabled
+      status: {},       // in Brave
       origin_trial_feature_name: "Parakeet",
     },
     {
@@ -2958,8 +2958,8 @@
     },
     {
       // https://crbug.com/1126305
-      name: "Prerender2",
-      status: "test",
+      name: "Prerender2", // disabled
+      status: {},         // in Brave
     },
     {
       name: "Presentation",
diff --git a/ui/base/ui_base_features.cc b/ui/base/ui_base_features.cc
--- a/ui/base/ui_base_features.cc
+++ b/ui/base/ui_base_features.cc
@@ -491,8 +491,8 @@ bool CustomizeChromeSupportsChromeRefresh2023() {
 }
 
 BASE_FEATURE(kChromeRefresh2023,
-             "ChromeRefresh2023",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "ChromeRefresh2023",                      // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kChromeRefreshSecondary2023,
              "ChromeRefreshSecondary2023",
-- 

