From: Tommy Webb <tommy@calyxinstitute.org>
Date: Wed, 26 Jul 2023 16:57:20 -0400
Subject: Bring in Brave feature states for privacy/security

Reviewed Brave's feature state overrides, as of brave-core tag v1.58.64,
and added any that were relevant for privacy or security and applicable
to Chromium 115. Features that were already set a particular way still
had comments added so that it will be easier to catch if upstream makes
unwanted changes to their states.

The following feature state changes were intentionally excluded:
* kHideVisits: flag removed upstream
* kIOSSharedHighlightingV2: we are not iOS
* kLensStandalone: not a privacy/security change
* kOmniboxSteadyStateHeight: not a privacy/security change
* kOrganicRepeatableQueries: not marked as a privacy/security change;
  shows repeated searches on new tab page, already shown in omnibar
* kTabHoverCardImages: not a privacy/security change
* kTextFragmentAnchor: not a privacy/security change
* kWebViewMeasureScreenCoverage: flag removed upstream

Testing feature changes (two examples):
1. AnonymousIframe: https://anonymous-iframe.glitch.me
   Will show the state enabled prior to this change, disabled after.
2. AutofillServerCommunication: Install and activate Rethink as VPN,
   clear browser storage, do a test search from the omnibar, and look
   for content-autofill.googleapis.com in Rethink logs. It will be
   present before this change, absent after.

brave-core can be found here: https://github.com/brave/brave-core

brave_main_delegate_browsertest.cc is a highly useful resource,
and the work of their privacy/security team is greatly appreciated.

Change-Id: Ic0e67157ff4a747bb05ceba264660bfeb1ac73ef
---
 android_webview/common/aw_features.cc         | 12 +--
 .../intent_helper/intent_picker_features.cc   |  4 +-
 chrome/browser/browser_features.cc            | 25 ++----
 chrome/browser/companion/core/features.cc     | 12 +--
 .../companion/visual_search/features.cc       |  4 +-
 chrome/browser/dips/dips_features.cc          |  4 +-
 .../analysis/content_analysis_features.cc     |  4 +-
 chrome/browser/ui/ui_features.cc              |  4 +-
 chrome/common/chrome_features.cc              |  8 +-
 components/aggregation_service/features.cc    |  4 +-
 components/attribution_reporting/features.cc  |  4 +-
 .../autofill/core/common/autofill_features.cc |  8 +-
 .../core/common/autofill_payments_features.cc | 12 +--
 .../commerce/core/commerce_feature_list.cc    | 28 ++++---
 .../content_settings/core/common/features.cc  |  4 +-
 components/history/core/browser/features.cc   |  4 +-
 components/history_clusters/core/features.cc  | 40 ++++-----
 .../core/on_device_clustering_features.cc     |  8 +-
 components/lens/lens_features.cc              |  4 +-
 components/metrics/metrics_features.cc        |  4 +-
 .../network_time/network_time_tracker.cc      |  4 +-
 components/omnibox/common/omnibox_features.cc | 16 ++--
 .../core/optimization_guide_features.cc       |  4 +-
 components/page_image_service/features.cc     |  8 +-
 .../privacy_sandbox_features.cc               |  8 +-
 .../safe_browsing/core/common/features.cc     |  8 +-
 components/search/ntp_features.cc             | 20 ++---
 .../segmentation_platform/public/features.cc  |  4 +-
 components/send_tab_to_self/features.cc       |  4 +-
 .../common/shared_highlighting_features.cc    |  4 +-
 .../core/common/common_features.cc            |  4 +-
 .../browser/file_system_access/features.cc    |  4 +-
 content/public/common/content_features.cc     | 33 ++++----
 net/base/features.cc                          | 12 +--
 services/network/public/cpp/features.cc       |  4 +-
 third_party/blink/common/features.cc          | 84 ++++++++++---------
 .../platform/runtime_enabled_features.json5   | 49 +++++------
 ui/base/ui_base_features.cc                   |  4 +-
 38 files changed, 237 insertions(+), 234 deletions(-)

diff --git a/android_webview/common/aw_features.cc b/android_webview/common/aw_features.cc
--- a/android_webview/common/aw_features.cc
+++ b/android_webview/common/aw_features.cc
@@ -16,8 +16,8 @@ namespace features {
 // The filtering for package names will be done on the server side using this
 // flag
 BASE_FEATURE(kWebViewAppsPackageNamesServerSideAllowlist,
-             "WebViewAppsPackageNamesServerSideAllowlist",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "WebViewAppsPackageNamesServerSideAllowlist", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);           // in Brave
 
 // Enable brotli compression support in WebView.
 BASE_FEATURE(kWebViewBrotliSupport,
@@ -44,8 +44,8 @@ BASE_FEATURE(kWebViewConnectionlessSafeBrowsing,
 // Cache origins which have camera/mic permissions approved to allow subsequent
 // calls to enumerate devices to return device labels.
 BASE_FEATURE(kWebViewEnumerateDevicesCache,
-             "WebViewEnumerateDevicesCache",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "WebViewEnumerateDevicesCache",           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Enable WebView to automatically darken the page in FORCE_DARK_AUTO mode if
 // the app's theme is dark.
@@ -92,8 +92,8 @@ BASE_FEATURE(kWebViewJavaJsBridgeMojo,
 // Enable reporting filtered metrics from webview clients used to be
 // out-sampled.
 BASE_FEATURE(kWebViewMetricsFiltering,
-             "WebViewMetricsFiltering",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "WebViewMetricsFiltering",                // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Field trial feature for controlling support of Origin Trials on WebView.
 BASE_FEATURE(kWebViewOriginTrials,
diff --git a/chrome/browser/apps/intent_helper/intent_picker_features.cc b/chrome/browser/apps/intent_helper/intent_picker_features.cc
--- a/chrome/browser/apps/intent_helper/intent_picker_features.cc
+++ b/chrome/browser/apps/intent_helper/intent_picker_features.cc
@@ -21,8 +21,8 @@ BASE_FEATURE(kLinkCapturingUiUpdate,
 );
 
 BASE_FEATURE(kLinkCapturingInfoBar,
-             "LinkCapturingInfoBar",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "LinkCapturingInfoBar",                   // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 bool LinkCapturingUiUpdateEnabled() {
   return base::FeatureList::IsEnabled(kLinkCapturingUiUpdate);
diff --git a/chrome/browser/browser_features.cc b/chrome/browser/browser_features.cc
--- a/chrome/browser/browser_features.cc
+++ b/chrome/browser/browser_features.cc
@@ -26,13 +26,8 @@ BASE_FEATURE(kClosedTabCache,
 // On Lacros the feature is enabled only for secondary profiles, check the
 // implementation of `ProfileManager::ProfileInfo::FromUnownedProfile()`.
 BASE_FEATURE(kDestroyProfileOnBrowserClose,
-             "DestroyProfileOnBrowserClose",
-#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN) || \
-    BUILDFLAG(IS_CHROMEOS_LACROS)
-             base::FEATURE_ENABLED_BY_DEFAULT);
-#else
-             base::FEATURE_DISABLED_BY_DEFAULT);
-#endif
+             "DestroyProfileOnBrowserClose",           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // DestroyProfileOnBrowserClose only covers deleting regular (non-System)
 // Profiles. This flags lets us destroy the System Profile, as well.
@@ -171,12 +166,8 @@ BASE_FEATURE(kWebUsbDeviceDetection,
 // update the list of accepted logs. Embedders who are planning to enable this
 // should first reach out to chrome-certificate-transparency@google.com.
 BASE_FEATURE(kCertificateTransparencyAskBeforeEnabling,
-             "CertificateTransparencyAskBeforeEnabling",
-#if BUILDFLAG(GOOGLE_CHROME_BRANDING)
-             base::FEATURE_ENABLED_BY_DEFAULT);
-#else
-             base::FEATURE_DISABLED_BY_DEFAULT);
-#endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
+             "CertificateTransparencyAskBeforeEnabling", // enabled by default
+             base::FEATURE_ENABLED_BY_DEFAULT);          // in Brave
 
 BASE_FEATURE(kLargeFaviconFromGoogle,
              "LargeFaviconFromGoogle",
@@ -224,8 +215,8 @@ BASE_FEATURE(kFlexOrgManagementDisclosure,
 
 // Enables usage of the FedCM API without third party cookies at the same time.
 BASE_FEATURE(kFedCmWithoutThirdPartyCookies,
-             "FedCmWithoutThirdPartyCookies",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "FedCmWithoutThirdPartyCookies",          // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Enables the Incoming Call Notifications scenario. When created by an
 // installed origin, an incoming call notification should have increased
@@ -291,7 +282,7 @@ BASE_FEATURE(kAutocompleteActionPredictorConfidenceCutoff,
 // kOmniboxTriggerForPrerender2 takes effect.
 // TODO(crbug.com/1267731): Remove this flag once the experiments are completed.
 BASE_FEATURE(kOmniboxTriggerForNoStatePrefetch,
-             "OmniboxTriggerForNoStatePrefetch",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "OmniboxTriggerForNoStatePrefetch",       // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 }  // namespace features
diff --git a/chrome/browser/companion/core/features.cc b/chrome/browser/companion/core/features.cc
--- a/chrome/browser/companion/core/features.cc
+++ b/chrome/browser/companion/core/features.cc
@@ -24,16 +24,16 @@ namespace internal {
 // enabled via multiple field trials (e.g., one that's session consistent, other
 // that's permanent consistent).
 BASE_FEATURE(kSidePanelCompanion,
-             "SidePanelCompanion",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "SidePanelCompanion",                         // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);           // in Brave, too
 BASE_FEATURE(kSidePanelCompanion2,
-             "SidePanelCompanion2",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "SidePanelCompanion2",                        // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);           // in Brave
 // Dynamically enables the search companion if the user has experiments
 // enabled.
 BASE_FEATURE(kCompanionEnabledByObservingExpsNavigations,
-             "CompanionEnabledByObservingExpsNavigations",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CompanionEnabledByObservingExpsNavigations", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);           // in Brave, too
 }  // namespace internal
 
 // When search companion is enabled, show a context menu item that allows the
diff --git a/chrome/browser/companion/visual_search/features.cc b/chrome/browser/companion/visual_search/features.cc
--- a/chrome/browser/companion/visual_search/features.cc
+++ b/chrome/browser/companion/visual_search/features.cc
@@ -13,8 +13,8 @@ namespace companion::visual_search {
 namespace features {
 
 BASE_FEATURE(kVisualSearchSuggestions,
-             "VisualSearchSuggestions",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "VisualSearchSuggestions",                // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 }  // namespace features
 
diff --git a/chrome/browser/dips/dips_features.cc b/chrome/browser/dips/dips_features.cc
--- a/chrome/browser/dips/dips_features.cc
+++ b/chrome/browser/dips/dips_features.cc
@@ -12,7 +12,9 @@ namespace dips {
 // Enables the DIPS (Detect Incidental Party State) feature.
 // On by default to allow for collecting metrics. All potentially dangerous
 // behavior (database persistence, DIPS deletion) will be gated by params.
-BASE_FEATURE(kFeature, "DIPS", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kFeature,
+             "DIPS",                                   // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Set whether DIPS persists its database to disk.
 const base::FeatureParam<bool> kPersistedDatabaseEnabled{
diff --git a/chrome/browser/enterprise/connectors/analysis/content_analysis_features.cc b/chrome/browser/enterprise/connectors/analysis/content_analysis_features.cc
--- a/chrome/browser/enterprise/connectors/analysis/content_analysis_features.cc
+++ b/chrome/browser/enterprise/connectors/analysis/content_analysis_features.cc
@@ -7,7 +7,7 @@
 namespace enterprise_connectors {
 
 BASE_FEATURE(kLocalContentAnalysisEnabled,
-             "LocalContentAnalysisEnabled",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "LocalContentAnalysisEnabled",            // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 }  // namespace enterprise_connectors
diff --git a/chrome/browser/ui/ui_features.cc b/chrome/browser/ui/ui_features.cc
--- a/chrome/browser/ui/ui_features.cc
+++ b/chrome/browser/ui/ui_features.cc
@@ -25,7 +25,9 @@ BASE_FEATURE(kDesktopPWAsAppHomePage,
 #endif  // !BUILDFLAG(IS_CHROMEOS) && !BUILDFLAG(IS_ANDROID)
 
 // Enables Chrome Labs menu in the toolbar. See https://crbug.com/1145666
-BASE_FEATURE(kChromeLabs, "ChromeLabs", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kChromeLabs,
+             "ChromeLabs",                             // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 const char kChromeLabsActivationParameterName[] =
     "chrome_labs_activation_percentage";
 const base::FeatureParam<int> kChromeLabsActivationPercentage{
diff --git a/chrome/common/chrome_features.cc b/chrome/common/chrome_features.cc
--- a/chrome/common/chrome_features.cc
+++ b/chrome/common/chrome_features.cc
@@ -770,8 +770,8 @@ BASE_FEATURE(kKioskEnableAppService,
 
 // When enabled, allows other features to use the k-Anonymity Service.
 BASE_FEATURE(kKAnonymityService,
-             "KAnonymityService",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "KAnonymityService",                      // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Origin to use for requests to the k-Anonymity Auth server to get trust
 // tokens.
@@ -997,8 +997,8 @@ BASE_FEATURE(kPrivacyGuideAndroid,
 
 #if BUILDFLAG(IS_ANDROID)
 BASE_FEATURE(kPrivacyGuideAndroidPostMVP,
-             "PrivacyGuideAndroidPostMVP",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "PrivacyGuideAndroidPostMVP",             // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 #endif
 
 // Enables or disables push subscriptions keeping Chrome running in the
diff --git a/components/aggregation_service/features.cc b/components/aggregation_service/features.cc
--- a/components/aggregation_service/features.cc
+++ b/components/aggregation_service/features.cc
@@ -13,8 +13,8 @@
 namespace aggregation_service {
 
 BASE_FEATURE(kAggregationServiceMultipleCloudProviders,
-             "AggregationServiceMultipleCloudProviders",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "AggregationServiceMultipleCloudProviders", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);         // in Brave, too
 
 const base::FeatureParam<std::string> kAggregationServiceCoordinatorAwsCloud{
     &kAggregationServiceMultipleCloudProviders, "aws_cloud",
diff --git a/components/attribution_reporting/features.cc b/components/attribution_reporting/features.cc
--- a/components/attribution_reporting/features.cc
+++ b/components/attribution_reporting/features.cc
@@ -9,7 +9,7 @@
 namespace attribution_reporting {
 
 BASE_FEATURE(kAttributionReportingNullAggregatableReports,
-             "AttributionReportingNullAggregatableReports",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "AttributionReportingNullAggregatableReports", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);            // in Brave
 
 }  // namespace attribution_reporting
diff --git a/components/autofill/core/common/autofill_features.cc b/components/autofill/core/common/autofill_features.cc
--- a/components/autofill/core/common/autofill_features.cc
+++ b/components/autofill/core/common/autofill_features.cc
@@ -142,8 +142,8 @@ BASE_FEATURE(kAutofillDisableAddressImport,
 // Kill switch for computing heuristics other than the active ones
 // (GetActivePatternSource()).
 BASE_FEATURE(kAutofillDisableShadowHeuristics,
-             "AutofillDisableShadowHeuristics",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "AutofillDisableShadowHeuristics",        // enabled by default
+             base::FEATURE_ENABLED_BY_DEFAULT);        // in Brave
 
 // When enabled, autofill will use the new ranking algorithm for address profile
 // autofill suggestions.
@@ -753,8 +753,8 @@ BASE_FEATURE(kAutofillLogToTerminal,
 // "upload" resources.
 // i.e., https://other.autofill.server:port/tbproxy/af/
 BASE_FEATURE(kAutofillServerCommunication,
-             "AutofillServerCommunication",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "AutofillServerCommunication",            // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Controls attaching the autofill type predictions to their respective
 // element in the DOM.
diff --git a/components/autofill/core/common/autofill_payments_features.cc b/components/autofill/core/common/autofill_payments_features.cc
--- a/components/autofill/core/common/autofill_payments_features.cc
+++ b/components/autofill/core/common/autofill_payments_features.cc
@@ -113,8 +113,8 @@ BASE_FEATURE(kAutofillEnableNewSaveCardBubbleUi,
 // When enabled, a notification will be displayed on page navigation if the
 // domain has an eligible merchant promo code offer or reward.
 BASE_FEATURE(kAutofillEnableOfferNotificationForPromoCodes,
-             "AutofillEnableOfferNotificationForPromoCodes",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "AutofillEnableOfferNotificationForPromoCodes", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);             // in Brave
 
 // When enabled, offers will be displayed in the Clank keyboard accessory during
 // downstream.
@@ -139,8 +139,8 @@ BASE_FEATURE(kAutofillEnablePaymentsMandatoryReauth,
 
 // When enabled, some extra metrics logging for Autofill Downstream will start.
 BASE_FEATURE(kAutofillEnableRemadeDownstreamMetrics,
-             "AutofillEnableRemadeDownstreamMetrics",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "AutofillEnableRemadeDownstreamMetrics",  // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // When enabled, if the user interacts with the manual fallback bottom sheet
 // on Android, it'll remain sticky until the user dismisses it.
@@ -252,8 +252,8 @@ BASE_FEATURE(kAutofillUpstream,
 // user's email domain is from a common email provider (thus unlikely to be an
 // enterprise or education user).
 BASE_FEATURE(kAutofillUpstreamAllowAdditionalEmailDomains,
-             "AutofillUpstreamAllowAdditionalEmailDomains",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "AutofillUpstreamAllowAdditionalEmailDomains", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);            // in Brave
 
 // When enabled, Chrome allows credit card upload to Google Payments, no matter
 // the user's email domain.
diff --git a/components/commerce/core/commerce_feature_list.cc b/components/commerce/core/commerce_feature_list.cc
--- a/components/commerce/core/commerce_feature_list.cc
+++ b/components/commerce/core/commerce_feature_list.cc
@@ -116,8 +116,8 @@ BASE_FEATURE(kCommerceAllowLocalImages,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kCommerceAllowOnDemandBookmarkUpdates,
-             "CommerceAllowOnDemandBookmarkUpdates",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "CommerceAllowOnDemandBookmarkUpdates",   // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kCommerceAllowOnDemandBookmarkBatchUpdates,
              "CommerceAllowOnDemandBookmarkBatchUpdates",
@@ -128,8 +128,8 @@ BASE_FEATURE(kCommerceAllowServerImages,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kCommerceMerchantViewer,
-             "CommerceMerchantViewer",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CommerceMerchantViewer",                 // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 #if BUILDFLAG(IS_ANDROID)
 BASE_FEATURE(kCommerceMerchantViewerRegionLaunched,
              "CommerceMerchantViewerRegionLaunched",
@@ -145,8 +145,8 @@ BASE_FEATURE(kCommerceLocalPDPDetection,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kCommercePriceTracking,
-             "CommercePriceTracking",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CommercePriceTracking",                  // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kCommercePriceTrackingChipExperiment,
              "CommercePriceTrackingChipExperiment",
@@ -187,7 +187,9 @@ BASE_FEATURE(kShoppingCollection,
              "ShoppingCollection",
              base::FEATURE_DISABLED_BY_DEFAULT);
 
-BASE_FEATURE(kShoppingList, "ShoppingList", base::FEATURE_DISABLED_BY_DEFAULT);
+BASE_FEATURE(kShoppingList,
+             "ShoppingList",                           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 #if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC) || \
     BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
 BASE_FEATURE(kShoppingListRegionLaunched,
@@ -204,18 +206,20 @@ BASE_FEATURE(kShoppingListTrackByDefault,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kShoppingPDPMetrics,
-             "ShoppingPDPMetrics",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "ShoppingPDPMetrics",                     // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kShoppingPDPMetricsRegionLaunched,
              "ShoppingPDPMetricsRegionLaunched",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
-BASE_FEATURE(kRetailCoupons, "RetailCoupons", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kRetailCoupons,
+             "RetailCoupons",                          // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kCommerceDeveloper,
-             "CommerceDeveloper",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "CommerceDeveloper",                      // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 const char kRetailCouponsWithCodeParam[] = "RetailCouponsWithCodeParam";
 
diff --git a/components/content_settings/core/common/features.cc b/components/content_settings/core/common/features.cc
--- a/components/content_settings/core/common/features.cc
+++ b/components/content_settings/core/common/features.cc
@@ -59,7 +59,9 @@ const base::FeatureParam<base::TimeDelta>
         &kSafetyCheckUnusedSitePermissions,
         "unused-site-permissions-revocation-cleanup-threshold", base::Days(30)};
 
-BASE_FEATURE(kUserBypassUI, "UserBypassUI", base::FEATURE_DISABLED_BY_DEFAULT);
+BASE_FEATURE(kUserBypassUI,
+             "UserBypassUI",                           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 const base::FeatureParam<base::TimeDelta> kUserBypassUIExceptionExpiration{
     &kUserBypassUI, "expiration", base::Days(90)};
diff --git a/components/history/core/browser/features.cc b/components/history/core/browser/features.cc
--- a/components/history/core/browser/features.cc
+++ b/components/history/core/browser/features.cc
@@ -77,8 +77,8 @@ const base::FeatureParam<int> kRepeatableQueriesMinVisitCount(
     is_android ? 6 : 1);
 
 BASE_FEATURE(kSyncSegmentsData,
-             "SyncSegmentsData",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "SyncSegmentsData",                       // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // The maximum number of New Tab Page displays to show with synced segments
 // data.
diff --git a/components/history_clusters/core/features.cc b/components/history_clusters/core/features.cc
--- a/components/history_clusters/core/features.cc
+++ b/components/history_clusters/core/features.cc
@@ -27,7 +27,9 @@ constexpr auto enabled_by_default_desktop_only =
 
 namespace internal {
 
-BASE_FEATURE(kJourneys, "Journeys", enabled_by_default_desktop_only);
+BASE_FEATURE(kJourneys,
+             "Journeys",                               // disabled by default
+             enabled_by_default_desktop_only);         // in Brave, too; we are Android
 
 BASE_FEATURE(kJourneysLabels,
              "JourneysLabel",
@@ -41,16 +43,16 @@ const base::FeatureParam<bool> kJourneysImagesCover{
     &kJourneysImages, "JourneysImagesCover", true};
 
 BASE_FEATURE(kPersistedClusters,
-             "HistoryClustersPersistedClusters",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "HistoryClustersPersistedClusters",       // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kOmniboxAction,
-             "JourneysOmniboxAction",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "JourneysOmniboxAction",                  // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kOmniboxHistoryClusterProvider,
-             "JourneysOmniboxHistoryClusterProvider",
-             enabled_by_default_desktop_only);
+             "JourneysOmniboxHistoryClusterProvider",  // disabled by default
+             enabled_by_default_desktop_only);         // in Brave (too; we are Android)
 
 BASE_FEATURE(kNonUserVisibleDebug,
              "JourneysNonUserVisibleDebug",
@@ -61,12 +63,12 @@ BASE_FEATURE(kUserVisibleDebug,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kPersistContextAnnotationsInHistoryDb,
-             "JourneysPersistContextAnnotationsInHistoryDb",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "JourneysPersistContextAnnotationsInHistoryDb", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);             // in Brave
 
 BASE_FEATURE(kHistoryClustersInternalsPage,
-             "HistoryClustersInternalsPage",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "HistoryClustersInternalsPage",                 // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);             // in Brave, too
 
 BASE_FEATURE(kHistoryClustersUseContinueOnShutdown,
              "HistoryClustersUseContinueOnShutdown",
@@ -89,23 +91,23 @@ BASE_FEATURE(kJourneysPersistCachesToPrefs,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kHistoryClustersNavigationContextClustering,
-             "HistoryClustersNavigationContextClustering",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "HistoryClustersNavigationContextClustering", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);           // in Brave
 
 // Killswitch only.
 BASE_FEATURE(kJourneysNamedNewTabGroups,
-             "JourneysNamedNewTabGroups",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "JourneysNamedNewTabGroups",              // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kJourneysZeroStateFiltering,
-             "JourneysZeroStateFiltering",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "JourneysZeroStateFiltering",             // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 }  // namespace internal
 
 BASE_FEATURE(kSidePanelJourneys,
-             "SidePanelJourneys",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SidePanelJourneys",                      // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 // If enabled, and the main flag is also enabled, the Journeys omnibox
 // entrypoints open Journeys in Side Panel rather than the History WebUI.
 const base::FeatureParam<bool> kSidePanelJourneysOpensFromOmnibox{
diff --git a/components/history_clusters/core/on_device_clustering_features.cc b/components/history_clusters/core/on_device_clustering_features.cc
--- a/components/history_clusters/core/on_device_clustering_features.cc
+++ b/components/history_clusters/core/on_device_clustering_features.cc
@@ -15,8 +15,8 @@ namespace history_clusters {
 namespace features {
 
 BASE_FEATURE(kOnDeviceClustering,
-             "HistoryClustersOnDeviceClustering",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "HistoryClustersOnDeviceClustering",      // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kOnDeviceClusteringContentClustering,
              "JourneysOnDeviceClusteringContentClustering",
@@ -31,8 +31,8 @@ BASE_FEATURE(kOnDeviceClusteringBlocklists,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kOnDeviceClusteringKeywordFiltering,
-             "JourneysKeywordFiltering",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "JourneysKeywordFiltering",               // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kOnDeviceClusteringVisitRanking,
              "JourneysOnDeviceClusteringVisitRanking",
diff --git a/components/lens/lens_features.cc b/components/lens/lens_features.cc
--- a/components/lens/lens_features.cc
+++ b/components/lens/lens_features.cc
@@ -51,8 +51,8 @@ BASE_FEATURE(kEnableContextMenuInLensSidePanel,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kEnableLensPing,
-             "EnableLensPing",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "EnableLensPing",                         // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 constexpr base::FeatureParam<std::string> kHomepageURLForLens{
     &kLensStandalone, "lens-homepage-url", "https://lens.google.com/v3/"};
diff --git a/components/metrics/metrics_features.cc b/components/metrics/metrics_features.cc
--- a/components/metrics/metrics_features.cc
+++ b/components/metrics/metrics_features.cc
@@ -15,8 +15,8 @@ BASE_FEATURE(kMetricsClearLogsOnClonedInstall,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kStructuredMetrics,
-             "EnableStructuredMetrics",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "EnableStructuredMetrics",                // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 #if BUILDFLAG(IS_ANDROID)
 BASE_FEATURE(kMergeSubprocessMetricsOnBgAndFg,
diff --git a/components/network_time/network_time_tracker.cc b/components/network_time/network_time_tracker.cc
--- a/components/network_time/network_time_tracker.cc
+++ b/components/network_time/network_time_tracker.cc
@@ -61,8 +61,8 @@ namespace network_time {
 // which uses tlsdated to set the system time.
 #if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_CHROMEOS_ASH) || BUILDFLAG(IS_IOS)
 BASE_FEATURE(kNetworkTimeServiceQuerying,
-             "NetworkTimeServiceQuerying",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "NetworkTimeServiceQuerying",             // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 #else
 BASE_FEATURE(kNetworkTimeServiceQuerying,
              "NetworkTimeServiceQuerying",
diff --git a/components/omnibox/common/omnibox_features.cc b/components/omnibox/common/omnibox_features.cc
--- a/components/omnibox/common/omnibox_features.cc
+++ b/components/omnibox/common/omnibox_features.cc
@@ -266,15 +266,15 @@ BASE_FEATURE(kDocumentProvider,
 // If enabled, the 'Show Google Drive Suggestions' setting is removed and Drive
 // suggestions are available to all clients who meet the other requirements.
 BASE_FEATURE(kDocumentProviderNoSetting,
-             "OmniboxDocumentProviderNoSetting",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "OmniboxDocumentProviderNoSetting",       // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // If enabled, the requirement to be in an active Sync state is removed and
 // Drive suggestions are available to all clients who meet the other
 // requirements.
 BASE_FEATURE(kDocumentProviderNoSyncRequirement,
-             "OmniboxDocumentProviderNoSyncRequirement",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "OmniboxDocumentProviderNoSyncRequirement", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);         // in Brave, too
 
 // Feature to determine if the HQP should double as a domain provider by
 // suggesting up to the provider limit for each of the user's highly visited
@@ -333,8 +333,8 @@ BASE_FEATURE(kMostVisitedTiles,
 // prefixes. Will also adjust the location bar UI and omnibox text selection to
 // accommodate the autocompletions.
 BASE_FEATURE(kRichAutocompletion,
-             "OmniboxRichAutocompletion",
-             enabled_by_default_desktop_only);
+             "OmniboxRichAutocompletion",              // disabled by default
+             enabled_by_default_desktop_only);         // in Brave, too; we are Android
 
 // Feature used to enable Pedals in the NTP Realbox.
 BASE_FEATURE(kNtpRealboxPedals,
@@ -359,8 +359,8 @@ BASE_FEATURE(kOmniboxMostVisitedTilesAddRecycledViewPool,
 // Feature used to add most visited tiles to the suggestions when the user is on
 // a search result page that does not do search term replacement.
 BASE_FEATURE(kOmniboxMostVisitedTilesOnSrp,
-             "OmniboxMostVisitedTilesOnSrp",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "OmniboxMostVisitedTilesOnSrp",           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // If enabled, adds a grey square background to search icons, and makes answer
 // icon square instead of round.
diff --git a/components/optimization_guide/core/optimization_guide_features.cc b/components/optimization_guide/core/optimization_guide_features.cc
--- a/components/optimization_guide/core/optimization_guide_features.cc
+++ b/components/optimization_guide/core/optimization_guide_features.cc
@@ -214,8 +214,8 @@ BASE_FEATURE(kPageContentAnnotationsPersistSalientImageMetadata,
 // Killswitch for fetching on search results from a remote Optimization Guide
 // Service.
 BASE_FEATURE(kOptimizationGuideFetchingForSRP,
-             "OptimizationHintsFetchingSRP",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "OptimizationHintsFetchingSRP",           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Enables the model store to save relative paths computed from the base model
 // store dir. Storing as relative path in the model store is needed for IOS,
diff --git a/components/page_image_service/features.cc b/components/page_image_service/features.cc
--- a/components/page_image_service/features.cc
+++ b/components/page_image_service/features.cc
@@ -7,12 +7,14 @@
 namespace page_image_service {
 
 // Enabled by default because we are only using this as a killswitch.
-BASE_FEATURE(kImageService, "ImageService", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kImageService,
+             "ImageService",                           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Enabled the capability by default, can be used as a killswitch.
 BASE_FEATURE(kImageServiceSuggestPoweredImages,
-             "ImageServiceSuggestPoweredImages",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "ImageServiceSuggestPoweredImages",       // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Enabled the capability by default, can be used as a killswitch.
 BASE_FEATURE(kImageServiceOptimizationGuideSalientImages,
diff --git a/components/privacy_sandbox/privacy_sandbox_features.cc b/components/privacy_sandbox/privacy_sandbox_features.cc
--- a/components/privacy_sandbox/privacy_sandbox_features.cc
+++ b/components/privacy_sandbox/privacy_sandbox_features.cc
@@ -85,8 +85,8 @@ const base::FeatureParam<bool> kPrivacySandboxSettings3DisablePromptForTesting{
     &kPrivacySandboxSettings3, "disable-dialog-for-testing", false};
 
 BASE_FEATURE(kOverridePrivacySandboxSettingsLocalTesting,
-             "OverridePrivacySandboxSettingsLocalTesting",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "OverridePrivacySandboxSettingsLocalTesting", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);           // in Brave, too
 
 BASE_FEATURE(kDisablePrivacySandboxPrompts,
              "DisablePrivacySandboxPrompts",
@@ -99,8 +99,8 @@ const base::FeatureParam<bool> kPrivacySandboxFirstPartySetsUISampleSets{
     &kPrivacySandboxFirstPartySetsUI, "use-sample-sets", false};
 
 BASE_FEATURE(kEnforcePrivacySandboxAttestations,
-             "EnforcePrivacySandboxAttestations",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "EnforcePrivacySandboxAttestations",      // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 const char kPrivacySandboxEnrollmentOverrides[] =
     "privacy-sandbox-enrollment-overrides";
diff --git a/components/safe_browsing/core/common/features.cc b/components/safe_browsing/core/common/features.cc
--- a/components/safe_browsing/core/common/features.cc
+++ b/components/safe_browsing/core/common/features.cc
@@ -91,8 +91,8 @@ const base::FeatureParam<int> kEvaluateProtectedPasswordLengthMinimumValue{
     /*default_value=*/4};
 
 BASE_FEATURE(kExtensionTelemetry,
-             "SafeBrowsingExtensionTelemetry",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SafeBrowsingExtensionTelemetry",         // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 const base::FeatureParam<int> kExtensionTelemetryUploadIntervalSeconds{
     &kExtensionTelemetry, "UploadIntervalSeconds",
@@ -156,8 +156,8 @@ BASE_FEATURE(kExtensionTelemetryCookiesGetSignal,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kExtensionTelemetryDeclarativeNetRequestSignal,
-             "SafeBrowsingExtensionTelemetryDeclarativeNetRequestSignal",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SafeBrowsingExtensionTelemetryDeclarativeNetRequestSignal", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);                          // in Brave, too
 
 BASE_FEATURE(kFileTypePoliciesTag,
              "FileTypePoliciesTag",
diff --git a/components/search/ntp_features.cc b/components/search/ntp_features.cc
--- a/components/search/ntp_features.cc
+++ b/components/search/ntp_features.cc
@@ -66,19 +66,19 @@ BASE_FEATURE(kRealboxUseGoogleGIcon,
 
 // If enabled, alpha NTP backgrounds will show in Customize Chrome.
 BASE_FEATURE(kNtpAlphaBackgroundCollections,
-             "NtpAlphaBackgroundCollections",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "NtpAlphaBackgroundCollections",          // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // If enabled, NTP background image links will be checked for HTTP status
 // errors."
 BASE_FEATURE(kNtpBackgroundImageErrorDetection,
-             "NtpBackgroundImageErrorDetection",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "NtpBackgroundImageErrorDetection",       // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // If enabled, chrome cart module will be shown.
 BASE_FEATURE(kNtpChromeCartModule,
-             "NtpChromeCartModule",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "NtpChromeCartModule",                    // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // If enabled, Comprehensive Theming color changes will be applied to the
 // Realbox on the New Tab Page.
@@ -256,8 +256,8 @@ BASE_FEATURE(kNtpSingleRowShortcuts,
 
 // If enabled, the History clusters module will be shown.
 BASE_FEATURE(kNtpHistoryClustersModule,
-             "NtpHistoryClustersModule",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "NtpHistoryClustersModule",               // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Dummy feature to set kNtpHistoryClustersModuleBeginTimeDurationHoursParam.
 BASE_FEATURE(kNtpHistoryClustersModuleBeginTimeDuration,
@@ -283,8 +283,8 @@ BASE_FEATURE(kNtpHistoryClustersModuleCategories,
 // useful to determine if a user would have seen modules in order to
 // counterfactually log or trigger.
 BASE_FEATURE(kNtpHistoryClustersModuleLoad,
-             "NtpHistoryClustersModuleLoad",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "NtpHistoryClustersModuleLoad",           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Dummy feature to set kNtpHistoryClustersModuleMaxClustersParam.
 BASE_FEATURE(kNtpHistoryClustersModuleMaxClusters,
diff --git a/components/segmentation_platform/public/features.cc b/components/segmentation_platform/public/features.cc
--- a/components/segmentation_platform/public/features.cc
+++ b/components/segmentation_platform/public/features.cc
@@ -77,8 +77,8 @@ BASE_FEATURE(kSegmentationDefaultReportingSegments,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kSegmentationPlatformDeviceTier,
-             "SegmentationPlatformDeviceTier",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SegmentationPlatformDeviceTier",         // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kSegmentationPlatformTabletProductivityUser,
              "SegmentationPlatformTabletProductivityUser",
diff --git a/components/send_tab_to_self/features.cc b/components/send_tab_to_self/features.cc
--- a/components/send_tab_to_self/features.cc
+++ b/components/send_tab_to_self/features.cc
@@ -10,8 +10,8 @@
 namespace send_tab_to_self {
 
 BASE_FEATURE(kSendTabToSelfSigninPromo,
-             "SendTabToSelfSigninPromo",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "SendTabToSelfSigninPromo",               // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kSendTabToSelfEnableNotificationTimeOut,
              "SendTabToSelfEnableNotificationTimeOut",
diff --git a/components/shared_highlighting/core/common/shared_highlighting_features.cc b/components/shared_highlighting/core/common/shared_highlighting_features.cc
--- a/components/shared_highlighting/core/common/shared_highlighting_features.cc
+++ b/components/shared_highlighting/core/common/shared_highlighting_features.cc
@@ -26,8 +26,8 @@ BASE_FEATURE(kIOSSharedHighlightingV2,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kSharedHighlightingManager,
-             "SharedHighlightingManager",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "SharedHighlightingManager",              // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 int GetPreemptiveLinkGenTimeoutLengthMs() {
   return kPreemptiveLinkGenTimeoutLengthMs.Get();
diff --git a/components/subresource_filter/core/common/common_features.cc b/components/subresource_filter/core/common/common_features.cc
--- a/components/subresource_filter/core/common/common_features.cc
+++ b/components/subresource_filter/core/common/common_features.cc
@@ -6,6 +6,8 @@
 
 namespace subresource_filter {
 
-BASE_FEATURE(kAdTagging, "AdTagging", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kAdTagging,
+             "AdTagging",                              // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 }  // namespace subresource_filter
diff --git a/content/browser/file_system_access/features.cc b/content/browser/file_system_access/features.cc
--- a/content/browser/file_system_access/features.cc
+++ b/content/browser/file_system_access/features.cc
@@ -30,8 +30,8 @@ BASE_FEATURE(kFileSystemAccessDoNotOverwriteOnMove,
 // When enabled, move() supports moving local files (i.e. that do not live in
 // the OPFS).
 BASE_FEATURE(kFileSystemAccessMoveLocalFiles,
-             "FileSystemAccessMoveLocalFiles",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "FileSystemAccessMoveLocalFiles",         // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // TODO(crbug.com/1114923): Remove this flag eventually.
 // When enabled, the remove() method is enabled. Otherwise, throws a
diff --git a/content/public/common/content_features.cc b/content/public/common/content_features.cc
--- a/content/public/common/content_features.cc
+++ b/content/public/common/content_features.cc
@@ -39,8 +39,8 @@ BASE_FEATURE(kAndroidSurfaceControlMagnifier,
 
 // Enables FLEDGE and Attribution Reporting API integration.
 BASE_FEATURE(kAttributionFencedFrameReportingBeacon,
-             "AttributionFencedFrameReportingBeacon",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "AttributionFencedFrameReportingBeacon",  // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Launches the audio service on the browser startup.
 BASE_FEATURE(kAudioServiceLaunchOnStartup,
@@ -302,13 +302,8 @@ BASE_FEATURE(kDevicePosture,
 // Controls whether the Digital Goods API is enabled.
 // https://github.com/WICG/digital-goods/
 BASE_FEATURE(kDigitalGoodsApi,
-             "DigitalGoodsApi",
-#if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_CHROMEOS)
-             base::FEATURE_ENABLED_BY_DEFAULT
-#else
-             base::FEATURE_DISABLED_BY_DEFAULT
-#endif
-);
+             "DigitalGoodsApi",                        // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Enable document policy for configuring and restricting feature behavior.
 BASE_FEATURE(kDocumentPolicy,
@@ -382,7 +377,9 @@ BASE_FEATURE(kExtraSafelistedRequestHeadersForOutOfBlinkCors,
 // by the flag in RuntimeEnabledFeatures on the blink side. See also
 // the use of kSetOnlyIfOverridden in content/child/runtime_features.cc.
 // We enable it here by default to support use in origin trials.
-BASE_FEATURE(kFedCm, "FedCm", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kFedCm,
+             "FedCm",                                  // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Field trial boolean parameter which indicates whether FedCM IDP sign-out
 // is enabled.
@@ -438,8 +435,8 @@ BASE_FEATURE(kWebIdentityMDocs,
 
 // Enables usage of First Party Sets to determine cookie availability.
 BASE_FEATURE(kFirstPartySets,
-             "FirstPartySets",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "FirstPartySets",                         // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Controls whether to clear sites data on FPS transitions.
 const base::FeatureParam<bool> kFirstPartySetsClearSiteDataOnChangedSets{
@@ -715,8 +712,8 @@ BASE_FEATURE(kNotificationContentImage,
 
 // Enables the notification trigger API.
 BASE_FEATURE(kNotificationTriggers,
-             "NotificationTriggers",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "NotificationTriggers",                   // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Feature which holdbacks NoStatePrefetch on all surfaces.
 BASE_FEATURE(kNoStatePrefetchHoldback,
@@ -1178,7 +1175,9 @@ BASE_FEATURE(kUserMediaCaptureOnFocus,
 
 // This is intended as a kill switch for the WebOTP Service feature. To enable
 // this feature, the experimental web platform features flag should be set.
-BASE_FEATURE(kWebOTP, "WebOTP", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kWebOTP,
+             "WebOTP",                                 // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // Enables WebOTP calls in cross-origin iframes if allowed by Permissions
 // Policy.
@@ -1563,7 +1562,9 @@ BASE_FEATURE(kWarmUpNetworkProcess,
 // Kill switch for the WebNFC feature. This feature can be enabled for all sites
 // using the kEnableExperimentalWebPlatformFeatures flag.
 // https://w3c.github.io/web-nfc/
-BASE_FEATURE(kWebNfc, "WebNFC", base::FEATURE_ENABLED_BY_DEFAULT);
+BASE_FEATURE(kWebNfc,
+             "WebNFC",                                 // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 #endif  // BUILDFLAG(IS_ANDROID)
 
diff --git a/net/base/features.cc b/net/base/features.cc
--- a/net/base/features.cc
+++ b/net/base/features.cc
@@ -260,12 +260,12 @@ BASE_FEATURE(kWaitForFirstPartySetsInit,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kPartitionedCookies,
-             "PartitionedCookies",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "PartitionedCookies",                     // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kNoncedPartitionedCookies,
-             "NoncedPartitionedCookies",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "NoncedPartitionedCookies",               // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 BASE_FEATURE(kClampCookieExpiryTo400Days,
              "ClampCookieExpiryTo400Days",
@@ -430,8 +430,8 @@ BASE_FEATURE(kEnableEarlyHintsOnHttp11,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kEnableWebTransportDraft07,
-             "EnableWebTransportDraft07",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "EnableWebTransportDraft07",              // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kZstdContentEncoding,
              "ZstdContentEncoding",
diff --git a/services/network/public/cpp/features.cc b/services/network/public/cpp/features.cc
--- a/services/network/public/cpp/features.cc
+++ b/services/network/public/cpp/features.cc
@@ -157,8 +157,8 @@ BASE_FEATURE(kAttributionReportingCrossAppWeb,    // in bromite
 // set, and handling their responses, according to the protocol.
 // (See https://github.com/WICG/trust-token-api.)
 BASE_FEATURE(kPrivateStateTokens,
-             "PrivateStateTokens",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "PrivateStateTokens",                     // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Secondary flag used by the FLEDGE ads experiment in the interim before
 // PSTs are fully rolled out to stable.
diff --git a/third_party/blink/common/features.cc b/third_party/blink/common/features.cc
--- a/third_party/blink/common/features.cc
+++ b/third_party/blink/common/features.cc
@@ -36,8 +36,8 @@ BASE_FEATURE(kAcceleratedStaticBitmapImageSerialization,
 
 // Enable the Protected Audience's reporting with ad macro API.
 BASE_FEATURE(kAdAuctionReportingWithMacroApi,
-             "AdAuctionReportingWithMacroApi",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "AdAuctionReportingWithMacroApi",         // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 
 // See https://github.com/WICG/turtledove/blob/main/FLEDGE.md
 // Changes default Permissions Policy for features join-ad-interest-group and
@@ -103,8 +103,8 @@ BASE_FEATURE(kAllowSyncXHRInPageDismissal,
 // iframes (instead of requiring fenced frames). This is only intended to be
 // enabled as part of the FLEDGE origin trial.
 BASE_FEATURE(kAllowURNsInIframes,
-             "AllowURNsInIframes",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "AllowURNsInIframes",                     // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Anchor Element Interaction
 BASE_FEATURE(kAnchorElementInteraction,
@@ -224,8 +224,8 @@ BASE_FEATURE(kBackForwardCacheWithKeepaliveRequest,
 // Enable background resource fetch in Blink. See https://crbug.com/1379780 for
 // more details.
 BASE_FEATURE(kBackgroundResourceFetch,
-             "BackgroundResourceFetch",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "BackgroundResourceFetch",               // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);      // in Brave, too
 
 // Used to configure a per-origin allowlist of performance.mark events that are
 // permitted to be included in slow reports traces. See crbug.com/1181774.
@@ -241,8 +241,8 @@ const base::FeatureParam<std::string>
 // Due to an issue in how prevWins were stored this flag should not be enabled
 // until July 2023.
 BASE_FEATURE(kBiddingAndScoringDebugReportingAPI,
-             "BiddingAndScoringDebugReportingAPI",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "BiddingAndScoringDebugReportingAPI",     // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kAudioContextShuffleEnabled,
              "AudioContextShuffleEnabled",
@@ -298,8 +298,8 @@ const base::FeatureParam<int> kBoostImagePriorityTightMediumLimit{
 // https://github.com/patcg-individual-drafts/topics
 // Kill switch for the Topics API.
 BASE_FEATURE(kBrowsingTopics,
-             "BrowsingTopics",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "BrowsingTopics",                         // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // If enabled, the check for whether the IP address is publicly routable will be
 // bypassed when determining the eligibility for a page to be included in topics
@@ -390,8 +390,8 @@ const base::FeatureParam<std::string> kBrowsingTopicsDisabledTopicsList{
 // `kBrowsingTopics` is enabled, and, either a valid Origin Trial token exists
 // or `kPrivacySandboxAdsAPIsOverride` is enabled.)
 BASE_FEATURE(kBrowsingTopicsXHR,
-             "BrowsingTopicsXHR",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "BrowsingTopicsXHR",                      // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Suppresses console errors for CORS problems which report an associated
 // inspector issue anyway.
@@ -490,8 +490,8 @@ BASE_FEATURE(kClientHintsDeviceMemory_DEPRECATED,
 
 // Enable `form-factor` client hint.
 BASE_FEATURE(kClientHintsFormFactor,
-             "ClientHintsFormFactor",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "ClientHintsFormFactor",                  // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Enable `sec-ch-width` client hint.
 BASE_FEATURE(kClientHintsResourceWidth,
@@ -744,8 +744,8 @@ BASE_FEATURE(kEventTimingMatchPresentationIndex,
 // Enables reporting Event Timing entries with a smaller presentation index on
 // resolved painted presentation.
 BASE_FEATURE(kEventTimingReportAllEarlyEntriesOnPaintedPresentation,
-             "EventTimingReportAllEarlyEntriesOnPaintedPresentation",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "EventTimingReportAllEarlyEntriesOnPaintedPresentation", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);                      // in Brave, too
 
 // Enables unload handler deprecation via Permissions-Policy.
 // https://crbug.com/1324111
@@ -785,7 +785,9 @@ BASE_FEATURE(kExtendScriptResourceLifetime,
 // this feature does not automatically expose this element to the web, it only
 // allows the element to be enabled by the runtime enabled feature, for origin
 // trials.
-BASE_FEATURE(kFencedFrames, "FencedFrames", base::FEATURE_DISABLED_BY_DEFAULT);
+BASE_FEATURE(kFencedFrames,
+             "FencedFrames",                           // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // Enable text snippets in URL fragments. https://crbug.com/919204.
 BASE_FEATURE(kTextFragmentAnchor,
@@ -818,23 +820,25 @@ BASE_FEATURE(kFilteringScrollPrediction,
 
 // See https://github.com/WICG/turtledove/blob/main/FLEDGE.md
 // Enables FLEDGE implementation. See https://crbug.com/1186444.
-BASE_FEATURE(kFledge, "Fledge", base::FEATURE_DISABLED_BY_DEFAULT);
+BASE_FEATURE(kFledge,
+             "Fledge",                                 // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 // See
 // https://github.com/WICG/turtledove/blob/main/FLEDGE_browser_bidding_and_auction_API.md
 BASE_FEATURE(kFledgeBiddingAndAuctionServer,
-             "FledgeBiddingAndAuctionServer",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "FledgeBiddingAndAuctionServer",          // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 const base::FeatureParam<std::string> kFledgeBiddingAndAuctionKeyURL{
     &kFledgeBiddingAndAuctionServer, "FledgeBiddingAndAuctionKeyURL", ""};
 
 // See in the header.
 BASE_FEATURE(kFledgeConsiderKAnonymity,
-             "FledgeConsiderKAnonymity",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "FledgeConsiderKAnonymity",               // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 BASE_FEATURE(kFledgeEnforceKAnonymity,
-             "FledgeEnforceKAnonymity",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "FledgeEnforceKAnonymity",                // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kFledgePassKAnonStatusToReportWin,
              "FledgePassKAnonStatusToReportWin",
@@ -989,8 +993,8 @@ const char kIntensiveWakeUpThrottling_GracePeriodSeconds_Name[] =
 // Kill switch for the Interest Group API, i.e. if disabled, the
 // API exposure will be disabled regardless of the OT config.
 BASE_FEATURE(kInterestGroupStorage,
-             "InterestGroupStorage",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "InterestGroupStorage",                   // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 // TODO(crbug.com/1197209): Adjust these limits in response to usage.
 const base::FeatureParam<int> kInterestGroupStorageMaxOwners{
     &kInterestGroupStorage, "max_owners", 1000};
@@ -1155,8 +1159,8 @@ BASE_FEATURE(kMaxUnthrottledTimeoutNestingLevel,
 const base::FeatureParam<int> kMaxUnthrottledTimeoutNestingLevelParam{
     &kMaxUnthrottledTimeoutNestingLevel, "nesting", 15};
 BASE_FEATURE(kMixedContentAutoupgrade,
-             "AutoupgradeMixedContent",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "AutoupgradeMixedContent",                // enabled by default
+             base::FEATURE_ENABLED_BY_DEFAULT);        // in Brave, too
 
 BASE_FEATURE(kMemoryCacheStrongReferenceFilterImages,
              "MemoryCacheStrongReferenceFilterImages",
@@ -1434,8 +1438,8 @@ const base::FeatureParam<int> kRTCGpuCodecSupportWaiterTimeoutParam{
 // Reduce the amount of information in the default 'referer' header for
 // cross-origin requests.
 BASE_FEATURE(kReducedReferrerGranularity,
-             "ReducedReferrerGranularity",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "ReducedReferrerGranularity",             // enabled by default
+             base::FEATURE_ENABLED_BY_DEFAULT);        // in Brave, too
 
 const base::FeatureParam<std::string> kUserAgentFrozenBuildVersion{
     &kReduceUserAgentMinorVersion, "build_version", "0"};
@@ -1571,8 +1575,8 @@ BASE_FEATURE(kSetTimeoutWithoutClamp,
 // enabled by the runtime enabled feature, for origin trials.
 // https://github.com/pythagoraskitty/shared-storage/blob/main/README.md
 BASE_FEATURE(kSharedStorageAPI,
-             "SharedStorageAPI",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "SharedStorageAPI",                       // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 const base::FeatureParam<int>
     kSharedStorageURLSelectionOperationInputURLSizeLimit{
         &kSharedStorageAPI, "url_selection_operation_input_url_size_limit", 8};
@@ -1608,8 +1612,8 @@ const base::FeatureParam<int>
         "SharedStorageMaxAllowedFencedFrameDepthForSelectURL", 1};
 
 BASE_FEATURE(kSharedStorageSelectURLLimit,
-             "SharedStorageSelectURLLimit",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SharedStorageSelectURLLimit",            // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave
 const base::FeatureParam<int> kSharedStorageSelectURLBitBudgetPerPageLoad = {
     &kSharedStorageSelectURLLimit, "SharedStorageSelectURLBitBudgetPerPageLoad",
     12};
@@ -1641,12 +1645,12 @@ BASE_FEATURE(kSmallScriptStreaming,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kSpeculationRulesHeaderEnableThirdPartyOriginTrial,
-             "SpeculationRulesHeaderEnableThirdPartyOriginTrial",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SpeculationRulesHeaderEnableThirdPartyOriginTrial", // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);                  // in Brave
 
 BASE_FEATURE(kSpeculationRulesPrefetchFuture,
-             "SpeculationRulesPrefetchFuture",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             "SpeculationRulesPrefetchFuture",                    // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);                  // in Brave
 
 // Enable service worker warming-up feature. (https://crbug.com/1431792)
 BASE_FEATURE(kSpeculativeServiceWorkerWarmUp,
@@ -1835,8 +1839,8 @@ BASE_FEATURE(kTimedHTMLParserBudget,
 // Changes behavior of User-Agent Client Hints to send blank headers when the
 // User-Agent string is overridden, instead of disabling the headers altogether.
 BASE_FEATURE(kUACHOverrideBlank,
-             "UACHOverrideBlank",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "UACHOverrideBlank",                      // enabled by default
+             base::FEATURE_ENABLED_BY_DEFAULT);        // in Brave
 
 BASE_FEATURE(kURLSetPortCheckOverflow,
              "URLSetPortCheckOverflow",
diff --git a/third_party/blink/renderer/platform/runtime_enabled_features.json5 b/third_party/blink/renderer/platform/runtime_enabled_features.json5
--- a/third_party/blink/renderer/platform/runtime_enabled_features.json5
+++ b/third_party/blink/renderer/platform/runtime_enabled_features.json5
@@ -300,9 +300,9 @@
     },
     {
       // Interest Group JS API/runtimeflag.
-      name: "AdInterestGroupAPI",
+      name: "AdInterestGroupAPI", // disabled
+      status: {},                 // in Brave
       origin_trial_feature_name: "AdInterestGroupAPI",
-      implied_by: ["Fledge", "Parakeet"],
       public: true,
     },
     {
@@ -333,9 +333,9 @@
       base_feature: "none",
     },
     {
-      name: "AnonymousIframe",
+      name: "AnonymousIframe", // disabled
+      status: {},              // in Brave
       public: true,
-      status: "stable",
       base_feature: "none",
     },
     {
@@ -615,8 +615,8 @@
       base_feature: "none",
     },
     {
-      name: "ClientHintsMetaEquivDelegateCH",
-      status: "stable",
+      name: "ClientHintsMetaEquivDelegateCH", // disabled
+      status: {},                             // in Brave
     },
     {
       name: "ClientHintsMetaHTTPEquivAcceptCH",
@@ -699,11 +699,9 @@
     {
       // blink::features::kComputePressure is a kill switch for the API. If the
       // feature is disabled, origin trial tokens are ignored.
-      name: "ComputePressure",
+      name: "ComputePressure", // disabled
+      status: {},              // in Brave
       origin_trial_feature_name: "ComputePressure_v2",
-      status: "experimental",
-      base_feature_status: "enabled",
-      copied_from_base_feature_if: "overridden",
     },
     {
       name: "ConfirmationOfAction",
@@ -1049,8 +1047,8 @@
       status: "test",
     },
     {
-      name: "CSSSelectorFragmentAnchor",
-      status: "experimental",
+      name: "CSSSelectorFragmentAnchor", // disabled
+      status: {},                        // in Brave
       base_feature: "CssSelectorFragmentAnchor",
     },
     {
@@ -1722,7 +1720,8 @@
       status: "stable",
     },
     {
-      name: "Fledge",
+      name: "Fledge", // disabled
+      status: {},     // in Brave
       base_feature: "none",
       origin_trial_feature_name: "PrivacySandboxAdsAPIs",
       origin_trial_allows_third_party: true,
@@ -2643,7 +2642,8 @@
     },
     {
       // PARAKEET ad serving runtime flag/JS API.
-      name: "Parakeet",
+      name: "Parakeet", // disabled
+      status: {},       // in Brave
       origin_trial_feature_name: "Parakeet",
     },
     {
@@ -2835,8 +2835,8 @@
     },
     {
       // https://crbug.com/1126305
-      name: "Prerender2",
-      status: "test",
+      name: "Prerender2", // disabled
+      status: {},         // in Brave
     },
     {
       name: "Presentation",
@@ -3416,11 +3416,9 @@
       origin_trial_allows_third_party: true,
     },
     {
-      name: "SpeculationRulesPrefetchProxy",
+      name: "SpeculationRulesPrefetchProxy", // disabled
+      status: {},                            // in Brave
       origin_trial_feature_name: "SpeculationRulesPrefetch",
-      status: "stable",
-      copied_from_base_feature_if: "overridden",
-      implied_by: ["SpeculationRulesPrefetchFuture", "NoVarySearchPrefetch"],
     },
     {
       name: "SpeculationRulesPrefetchWithSubresources",
@@ -3968,15 +3966,8 @@
       base_feature: "none",
     },
     {
-      name: "WebEnvironmentIntegrity",
-      status: "experimental",
-      origin_trial_feature_name: "WebEnvironmentIntegrity",
-      // base_feature is meant as kill-switch. The RuntimeFeature should follow
-      // the `status` field or Origin Trial unless explicitly overriden by
-      // Finch / command line flags.
-      base_feature_status: "enabled",
-      copied_from_base_feature_if: "overridden",
-      origin_trial_allows_third_party: true,
+      name: "WebEnvironmentIntegrity", // disabled
+      status: {},                      // in Brave
     },
     {
       name: "WebFontResizeLCP",
diff --git a/ui/base/ui_base_features.cc b/ui/base/ui_base_features.cc
--- a/ui/base/ui_base_features.cc
+++ b/ui/base/ui_base_features.cc
@@ -465,8 +465,8 @@ bool CustomizeChromeSupportsChromeRefresh2023() {
 }
 
 BASE_FEATURE(kChromeRefresh2023,
-             "ChromeRefresh2023",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "ChromeRefresh2023",                      // disabled by default
+             base::FEATURE_DISABLED_BY_DEFAULT);       // in Brave, too
 
 BASE_FEATURE(kChromeRefreshSecondary2023,
              "ChromeRefreshSecondary2023",
-- 

