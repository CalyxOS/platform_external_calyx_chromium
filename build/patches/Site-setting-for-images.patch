From: uazo <uazo@users.noreply.github.com>
Date: Tue, 5 Oct 2021 08:38:52 +0000
Subject: Site setting for images

Original License: GPL-2.0-or-later - https://spdx.org/licenses/GPL-2.0-or-later.html
License: GPL-3.0-only - https://spdx.org/licenses/GPL-3.0-only.html
Require: Content-settings-infrastructure.patch

Change-Id: Icd829f513d0d8ef8a63402edb20d8fe6bb06032c
---
 .../res/drawable-hdpi/permission_images.png   | Bin 0 -> 257 bytes
 .../res/drawable-mdpi/permission_images.png   | Bin 0 -> 186 bytes
 .../res/drawable-xhdpi/permission_images.png  | Bin 0 -> 316 bytes
 .../res/drawable-xxhdpi/permission_images.png | Bin 0 -> 449 bytes
 .../drawable-xxxhdpi/permission_images.png    | Bin 0 -> 532 bytes
 .../impl/BromiteImagesContentSetting.java     |  93 ++++++++++++++++++
 .../bromite_content_settings/images.grdp      |  23 +++++
 .../bromite_content_settings/images.inc       |   6 ++
 .../core/browser/content_settings_registry.cc |   3 +-
 .../renderer/content_settings_agent_impl.cc   |  15 +++
 .../renderer/content_settings_agent_impl.h    |   2 +
 .../platform/web_content_settings_client.h    |   5 +
 .../blink/renderer/core/frame/local_frame.cc  |  13 ---
 .../blink/renderer/core/frame/local_frame.h   |   6 --
 .../renderer/core/html/image_document.cc      |   9 +-
 .../core/loader/frame_fetch_context.cc        |  14 ++-
 .../core/loader/frame_fetch_context.h         |   2 +-
 third_party/blink/renderer/core/page/page.cc  |   5 +-
 .../platform/loader/fetch/fetch_context.h     |   2 +-
 .../platform/loader/fetch/resource_fetcher.cc |  17 +++-
 .../platform/loader/fetch/resource_fetcher.h  |   2 +
 21 files changed, 180 insertions(+), 37 deletions(-)
 create mode 100644 components/browser_ui/site_settings/android/java/res/drawable-hdpi/permission_images.png
 create mode 100644 components/browser_ui/site_settings/android/java/res/drawable-mdpi/permission_images.png
 create mode 100644 components/browser_ui/site_settings/android/java/res/drawable-xhdpi/permission_images.png
 create mode 100644 components/browser_ui/site_settings/android/java/res/drawable-xxhdpi/permission_images.png
 create mode 100644 components/browser_ui/site_settings/android/java/res/drawable-xxxhdpi/permission_images.png
 create mode 100644 components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/impl/BromiteImagesContentSetting.java
 create mode 100644 components/browser_ui/strings/bromite_content_settings/images.grdp
 create mode 100644 components/content_settings/core/browser/bromite_content_settings/images.inc

diff --git a/components/browser_ui/site_settings/android/java/res/drawable-hdpi/permission_images.png b/components/browser_ui/site_settings/android/java/res/drawable-hdpi/permission_images.png
new file mode 100644
index 0000000000000000000000000000000000000000..cafee5acf2299e534676a15fb029192e066551c9
GIT binary patch
literal 257
zcmeAS@N?(olHy`uVBq!ia0y~yU{C>J4i*Lm25-&)VFm_<6P_-PAr*|t3UWP70ozV|
zTah04zq56szw&M8n;RrpOrF`VG}t8D?Wk~l0?+(J;}`ap1uLXYvM#J}oanviS-`;s
zCw|YX;gbnW?=<H~{O_Z3Z$5|igjpP|C$_WjI&GJau#;{6sQfB%)gjx(|AY)UF8@>T
z^tdQgX);A}q28i-3mj*BbB}WS*YitaVZ)*cnpx70%?5A#y}G-OX-sKVdM|9kkz?;D
zkSFqW?gYn+JT8qLPaNmEYOHrvnjf@2Zt<RFy;W>$Ghgz%F)}Pr3_Z!+wrw8+0|SGn
LtDnm{r-UW|aQkDG

literal 0
HcmV?d00001

diff --git a/components/browser_ui/site_settings/android/java/res/drawable-mdpi/permission_images.png b/components/browser_ui/site_settings/android/java/res/drawable-mdpi/permission_images.png
new file mode 100644
index 0000000000000000000000000000000000000000..52435094e69ea5278e5c2a60238c7c374961ef08
GIT binary patch
literal 186
zcmeAS@N?(olHy`uVBq!ia0y~yV2}V|4i*Lm2CurW#S9D#jh-%!Ar*|t5?d7R7{4mK
zQh&$bQ{WEuF1C)MKT!duf7E$aE=mk>e)9apgB9yrOy@Lic9N7(65`0bA$Ce;r_h;K
z%_m&+4lGvuRJTHa*;ym~$;%VYd^!S>@#|Ks-eFS1Z{GAlX^E4nK+(de!1#?>9UjM~
pPE!^-!4)=XviVENj15c-E{AGfEKayToq>UY!PC{xWt~$(697yEMi2l1

literal 0
HcmV?d00001

diff --git a/components/browser_ui/site_settings/android/java/res/drawable-xhdpi/permission_images.png b/components/browser_ui/site_settings/android/java/res/drawable-xhdpi/permission_images.png
new file mode 100644
index 0000000000000000000000000000000000000000..cf3b7d0e10cd0e660db9b2532c54a317c7ea4c6c
GIT binary patch
literal 316
zcmeAS@N?(olHy`uVBq!ia0y~yU@!n-4i*LmhQHi~JPZts%$_ceAr*0Nr!V9?WFXKc
z-lSl$!B~T3lDb2Jz=_no!QKUXSo|Aj&yehIcqlo6LnJGh*<GNe$ARg(fY+^3(<i@P
z?vMWzf9Z>jozGnsyJa(yBY964@cy}fT|6Qx=ug0bE+(-hUW`+dUDt_C`Fem!EaNbf
z*an5RBTEykvwUywC{}4${KA&$AjA1@O%l`Oo1!f$Rb4_N9YT9%?U?vDNikhvrOpDa
z4a~pGYu=hZ;qg5bp%5<k?c<jaxu$h<7I<cGT?u_4v95x%{eF>>kywBz%bBA-Q(KNW
zIE21%m~0>rAZm3%WeaOaE2q-0`PZ*}d@gRZRiX4}ZTbF&8|wpRT;@7z@O7@WP3wzg
Vet+KhF)%PNc)I$ztaD0e0swYVet7@@

literal 0
HcmV?d00001

diff --git a/components/browser_ui/site_settings/android/java/res/drawable-xxhdpi/permission_images.png b/components/browser_ui/site_settings/android/java/res/drawable-xxhdpi/permission_images.png
new file mode 100644
index 0000000000000000000000000000000000000000..d4d1f0c6e9a59ad9e334daeeb830c953f371706f
GIT binary patch
literal 449
zcmeAS@N?(olHy`uVBq!ia0y~yVDJE84i*LmhW}5h&oD4Bc6hothE&A8y}94(aDd41
zkMUO=kDgpvQgk&irga^kU(s93axN472f|-Czi`TIdc|Dw^4X;(t5>g<%=Xs5>iCD*
zk#E|Pr%pxATF<NH7s#JFsruxAzVBrd-A70IZrps&ke=i|N1>^HS!z2IM`_zK*7Hga
zS=1{3dC%cc`0(%uzsWl86!$uXaPbb=8X*VXbWI1Ypb1SPOB7f&Jsd&I8y`F8nsKD?
zIus^5)b#22Ni#m0eNJjqpZQy7+XcH>7l>bOO8NH2#3myl?B}W(hviE;W@_;9JW}7x
zJA-$hF4INHqCzR5FZb@ci*5aB$-c`?Z{`vMg;$P?nCpI@e(1irHO9!((P8?GPXC|Y
z7VCC*?+lb-D!Ctd{%=711~%@;TapC!U*h}Zy8rxb)@SOILsVaEu5MYh>ACMZr<2K(
zPBpIR-x+xO`)9qQp^a=2j;e)GLMq{jKT{@oH9gVNneP*%DeyI*P~`vr@Ceq8t9eZ_
ze|%c{^YzMK;uYRIA5Bp;=s(<JZv9_%!?Mg-ZSqr{osOE9`?oVNFfe$!`njxgN@xNA
DPvFC^

literal 0
HcmV?d00001

diff --git a/components/browser_ui/site_settings/android/java/res/drawable-xxxhdpi/permission_images.png b/components/browser_ui/site_settings/android/java/res/drawable-xxxhdpi/permission_images.png
new file mode 100644
index 0000000000000000000000000000000000000000..cca41100e76e81974b4c22d1d9a1fdffabe9cf60
GIT binary patch
literal 532
zcmeAS@N?(olHy`uVBq!ia0y~yU`POA4i*Lm29JsRH#0CW-u85H45^5FJKNCjZ~{*&
z@1mfiZ0ZR~FFf=wG%~UsTeWeyM@~$Ww9BajA#HOOIqzi3NlkdfVz9-DX9<^gYN%J!
z)eyCxOTYhQ`l+&i`w{!A%nTrKjM=l|ptk0}%4vHhq}VK|mH4LeG^XoYTd`;R-edF6
z7i-><pJyI2A*8F%=T^pd%lBOj&v`c~bc)E%YAI_Kj}>}w^c~Y`Kh8B7;Y(gzYtdz3
z<ZxhM5@=vxQNUo@Jk?2Qd>;7!SwtMO=!5<jIiKHu)^=$$jlbBY!55&gYq_okw{L<Q
z`<7O<g}IFLJ~itec>g%~meb@1`U%@lz3`aF)A;@*YpB4{w_F*kPjK%4yYuh%5a#r?
z98;oGi}dDiW$F)URy!DfAWwAXllfka(*x&w&G7snejzOI$GWtWJd19GAIKA3dd2<q
zNmI!Tp+Br|!Y<maiZN2=yvJ0wddja1xAv69o*%?FM7#c8u_vVrszOVDCT}`OMTUH+
z{>-^7?u@yj@+O>qOt-Yoxon)=u&v8_jwMIN>K}_d3j_?Jj#_j6=9XCdXb#I9DF+6o
zM)`fGjDB2x{Gfk-v;BVlKa4IP`~#TkSwx-~>%>K#-vEjNh6DOL7xYb75TX$d;(EIJ
KxvX<aXaWF;-`b7<

literal 0
HcmV?d00001

diff --git a/components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/impl/BromiteImagesContentSetting.java b/components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/impl/BromiteImagesContentSetting.java
new file mode 100644
--- /dev/null
+++ b/components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/impl/BromiteImagesContentSetting.java
@@ -0,0 +1,93 @@
+/*
+    This file is part of Bromite.
+
+    Bromite is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    Bromite is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with Bromite. If not, see <https://www.gnu.org/licenses/>.
+*/
+
+package org.chromium.components.browser_ui.site_settings.impl;
+
+import org.chromium.components.browser_ui.site_settings.R;
+
+import org.chromium.components.browser_ui.site_settings.BromiteCustomContentSetting;
+import org.chromium.components.browser_ui.site_settings.ContentSettingsResources;
+import org.chromium.components.browser_ui.site_settings.SiteSettingsCategory;
+import org.chromium.components.content_settings.ContentSettingValues;
+import org.chromium.components.content_settings.ContentSettingsType;
+import org.chromium.content_public.browser.BrowserContextHandle;
+
+import androidx.annotation.Nullable;
+import androidx.preference.Preference;
+import androidx.preference.PreferenceScreen;
+
+import java.util.ArrayList;
+
+public class BromiteImagesContentSetting extends BromiteCustomContentSetting {
+    public BromiteImagesContentSetting() {
+        super(/*contentSettingsType*/ ContentSettingsType.IMAGES,
+              /*defaultEnabledValue*/ ContentSettingValues.ALLOW,
+              /*defaultDisabledValue*/ ContentSettingValues.BLOCK,
+              /*allowException*/ true,
+              /*preferenceKey*/ "images",
+              /*profilePrefKey*/ "images");
+    }
+
+    @Override
+    public ContentSettingsResources.ResourceItem getResourceItem() {
+        return new ContentSettingsResources.ResourceItem(
+            /*icon*/ R.drawable.permission_images,
+            /*title*/ R.string.images_permission_title,
+            /*defaultEnabledValue*/ getDefaultEnabledValue(),
+            /*defaultDisabledValue*/ getDefaultDisabledValue(),
+            /*enabledSummary*/ R.string.website_settings_category_images_enabled,
+            /*disabledSummary*/ R.string.website_settings_category_images_disabled,
+            /*summaryOverrideForScreenReader*/ 0);
+    }
+
+    @Override
+    public int getCategorySummary(@Nullable @ContentSettingValues int value) {
+        switch (value) {
+            case ContentSettingValues.ALLOW:
+                return R.string.website_settings_category_images_enabled;
+            case ContentSettingValues.BLOCK:
+                return R.string.website_settings_category_images_disabled;
+            default:
+                return 0;
+        }
+    }
+
+    @Override
+    public int getCategoryDescription() {
+        return 0;
+    }
+
+    @Override
+    public boolean requiresTriStateContentSetting() {
+        return false;
+    }
+
+    @Override
+    public boolean showOnlyDescriptions() {
+        return true;
+    }
+
+    @Override
+    public int getAddExceptionDialogMessage() {
+        return R.string.website_settings_category_images_enabled;
+    }
+
+    @Override
+    public @Nullable Boolean considerException(SiteSettingsCategory category, @ContentSettingValues int value) {
+        return value != ContentSettingValues.BLOCK;
+    }
+}
diff --git a/components/browser_ui/strings/bromite_content_settings/images.grdp b/components/browser_ui/strings/bromite_content_settings/images.grdp
new file mode 100644
--- /dev/null
+++ b/components/browser_ui/strings/bromite_content_settings/images.grdp
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<grit-part>
+<if expr="is_android">
+  <message name="IDS_SITE_SETTINGS_TYPE_IMAGES" desc="The label used for images site settings controls." formatter_data="android_java">
+    Images
+  </message>
+  <message name="IDS_SITE_SETTINGS_TYPE_IMAGES_MID_SENTENCE" desc="The label used for images site settings controls when used mid-sentence." formatter_data="android_java">
+    Images
+  </message>
+</if>
+  <message name="IDS_IMAGES_PERMISSION_TITLE" desc="Title of the permission to show images [CHAR-LIMIT=32]" formatter_data="android_java">
+    Images
+  </message>
+  <message name="IDS_WEBSITE_SETTINGS_ADD_SITE_DESCRIPTION_IMAGES" desc="The description for the allow Images on website dialog." formatter_data="android_java">
+    Allow images on websites you specify while blocking them for the rest of the web
+  </message>
+  <message name="IDS_WEBSITE_SETTINGS_CATEGORY_IMAGES_ENABLED" desc="Summary text explaining that sites are allowed to load images." formatter_data="android_java">
+    Allow sites to load images
+  </message>
+  <message name="IDS_WEBSITE_SETTINGS_CATEGORY_IMAGES_DISABLED" desc="Summary text explaining that sites are not allowed to load images." formatter_data="android_java">
+    Disallow sites to load images
+  </message>
+</grit-part>
diff --git a/components/content_settings/core/browser/bromite_content_settings/images.inc b/components/content_settings/core/browser/bromite_content_settings/images.inc
new file mode 100644
--- /dev/null
+++ b/components/content_settings/core/browser/bromite_content_settings/images.inc
@@ -0,0 +1,6 @@
+  content_settings::WebsiteSettingsRegistry::GetInstance()
+    ->GetMutable(ContentSettingsType::IMAGES)
+    ->set_show_into_info_page()
+    .set_is_renderer_content_setting()
+    .set_title_ui(IDS_SITE_SETTINGS_TYPE_IMAGES)
+    .set_mid_sentence_ui(IDS_SITE_SETTINGS_TYPE_IMAGES_MID_SENTENCE);
diff --git a/components/content_settings/core/browser/content_settings_registry.cc b/components/content_settings/core/browser/content_settings_registry.cc
--- a/components/content_settings/core/browser/content_settings_registry.cc
+++ b/components/content_settings/core/browser/content_settings_registry.cc
@@ -101,8 +101,7 @@ void ContentSettingsRegistry::Init() {
             kChromeUIUntrustedScheme},
            /*valid_settings=*/{CONTENT_SETTING_ALLOW, CONTENT_SETTING_BLOCK},
            WebsiteSettingsInfo::TOP_ORIGIN_ONLY_SCOPE,
-           WebsiteSettingsRegistry::DESKTOP |
-               WebsiteSettingsRegistry::PLATFORM_ANDROID,
+           WebsiteSettingsRegistry::DESKTOP | WebsiteSettingsRegistry::PLATFORM_ANDROID,
            ContentSettingsInfo::INHERIT_IN_INCOGNITO,
            ContentSettingsInfo::EXCEPTIONS_ON_SECURE_AND_INSECURE_ORIGINS);
 
diff --git a/components/content_settings/renderer/content_settings_agent_impl.cc b/components/content_settings/renderer/content_settings_agent_impl.cc
--- a/components/content_settings/renderer/content_settings_agent_impl.cc
+++ b/components/content_settings/renderer/content_settings_agent_impl.cc
@@ -362,6 +362,21 @@ bool ContentSettingsAgentImpl::AllowStorageAccessSync(
   return result;
 }
 
+bool ContentSettingsAgentImpl::AllowImage(bool enabled_per_settings,
+                                          const WebURL& image_url) {
+  bool allow = enabled_per_settings;
+  if (enabled_per_settings) {
+    allow = allow || IsAllowlistedForContentSettings();
+    if (content_setting_rules_) {
+      allow = AllowContentSetting(ContentSettingsType::IMAGES,
+                                  image_url, enabled_per_settings);
+    }
+  }
+  if (!allow)
+    DidBlockContentType(ContentSettingsType::IMAGES);
+  return allow;
+}
+
 bool ContentSettingsAgentImpl::AllowReadFromClipboard() {
   return delegate_->AllowReadFromClipboard();
 }
diff --git a/components/content_settings/renderer/content_settings_agent_impl.h b/components/content_settings/renderer/content_settings_agent_impl.h
--- a/components/content_settings/renderer/content_settings_agent_impl.h
+++ b/components/content_settings/renderer/content_settings_agent_impl.h
@@ -88,6 +88,8 @@ class ContentSettingsAgentImpl
   void AllowStorageAccess(StorageType storage_type,
                           base::OnceCallback<void(bool)> callback) override;
   bool AllowStorageAccessSync(StorageType type) override;
+  bool AllowImage(bool enabled_per_settings,
+                  const blink::WebURL& image_url) override;
   bool AllowReadFromClipboard() override;
   bool AllowWriteToClipboard() override;
   bool AllowMutationEvents(bool default_value) override;
diff --git a/third_party/blink/public/platform/web_content_settings_client.h b/third_party/blink/public/platform/web_content_settings_client.h
--- a/third_party/blink/public/platform/web_content_settings_client.h
+++ b/third_party/blink/public/platform/web_content_settings_client.h
@@ -55,6 +55,11 @@ class WebContentSettingsClient {
     return enabled_per_settings;
   }
 
+  // Controls whether images are allowed for this frame.
+  virtual bool AllowImage(bool enabled_per_settings, const WebURL& image_url) {
+    return enabled_per_settings;
+  }
+
   // Controls whether insecure scripts are allowed to execute for this frame.
   virtual bool AllowRunningInsecureContent(bool enabled_per_settings,
                                            const WebURL&) {
diff --git a/third_party/blink/renderer/core/frame/local_frame.cc b/third_party/blink/renderer/core/frame/local_frame.cc
--- a/third_party/blink/renderer/core/frame/local_frame.cc
+++ b/third_party/blink/renderer/core/frame/local_frame.cc
@@ -4046,19 +4046,6 @@ bool LocalFrame::IsSameOrigin() {
   return security_origin->IsSameOriginWith(top_security_origin);
 }
 
-bool LocalFrame::ImagesEnabled() {
-  DCHECK(!IsDetached());
-  // If this is called in the middle of detach, GetDocumentLoader() might
-  // already be nullptr.
-  if (!loader_.GetDocumentLoader()) {
-    return false;
-  }
-  bool allow_image_renderer = GetSettings()->GetImagesEnabled();
-  bool allow_image_content_setting =
-      loader_.GetDocumentLoader()->GetContentSettings()->allow_image;
-  return allow_image_renderer && allow_image_content_setting;
-}
-
 bool LocalFrame::ScriptEnabled() {
   DCHECK(!IsDetached());
   // If this is called in the middle of detach, GetDocumentLoader() might
diff --git a/third_party/blink/renderer/core/frame/local_frame.h b/third_party/blink/renderer/core/frame/local_frame.h
--- a/third_party/blink/renderer/core/frame/local_frame.h
+++ b/third_party/blink/renderer/core/frame/local_frame.h
@@ -930,12 +930,6 @@ class CORE_EXPORT LocalFrame final
     return *v8_local_compile_hints_producer_;
   }
 
-  // Returns whether images are allowed to load for the current frame. This is a
-  // convenience method that checks both renderer content settings and frame
-  // settings.
-  // Can only be called while the frame is not detached.
-  bool ImagesEnabled();
-
   // Returns whether script is allowed to run for the current frame. This is a
   // convenience method that checks both renderer content settings and frame
   // settings.
diff --git a/third_party/blink/renderer/core/html/image_document.cc b/third_party/blink/renderer/core/html/image_document.cc
--- a/third_party/blink/renderer/core/html/image_document.cc
+++ b/third_party/blink/renderer/core/html/image_document.cc
@@ -141,7 +141,14 @@ void ImageDocumentParser::AppendBytes(base::span<const uint8_t> data) {
     return;
 
   LocalFrame* frame = GetDocument()->GetFrame();
-  bool allow_image = frame->ImagesEnabled();
+  Settings* settings = frame->GetSettings();
+  bool allow_image_renderer = !settings || settings->GetImagesEnabled();
+  bool allow_image_content_setting = false;
+  if (auto* client = frame->GetContentSettingsClient()) {
+    allow_image_content_setting = client->AllowImage(allow_image_renderer,
+      GetDocument()->Url());
+  }
+  bool allow_image = allow_image_renderer && allow_image_content_setting;
   if (!allow_image) {
     auto* client = frame->GetContentSettingsClient();
     if (client) {
diff --git a/third_party/blink/renderer/core/loader/frame_fetch_context.cc b/third_party/blink/renderer/core/loader/frame_fetch_context.cc
--- a/third_party/blink/renderer/core/loader/frame_fetch_context.cc
+++ b/third_party/blink/renderer/core/loader/frame_fetch_context.cc
@@ -314,6 +314,7 @@ ResourceFetcher* FrameFetchContext::CreateFetcherForCommittedDocument(
   fetcher->SetResourceLoadObserver(
       MakeGarbageCollected<ResourceLoadObserverForFrame>(
           loader, document, fetcher->GetProperties()));
+  fetcher->SetImagesEnabled(frame->GetSettings()->GetImagesEnabled());
   fetcher->SetAutoLoadImages(
       frame->GetSettings()->GetLoadsImagesAutomatically());
   fetcher->SetEarlyHintsPreloadedResources(
@@ -477,16 +478,13 @@ void FrameFetchContext::AddResourceTiming(
       ->AddResourceTiming(std::move(info), initiator_type);
 }
 
-bool FrameFetchContext::AllowImage() const {
+bool FrameFetchContext::AllowImage(bool images_enabled, const KURL& url) const {
   if (GetResourceFetcherProperties().IsDetached()) {
-    return true;
+    return images_enabled;
   }
-
-  bool images_enabled = GetFrame()->ImagesEnabled();
-  if (!images_enabled) {
-    if (auto* settings_client = GetContentSettingsClient()) {
-      settings_client->DidNotAllowImage();
-    }
+  if (auto* settings_client = GetContentSettingsClient()) {
+    images_enabled = settings_client->AllowImage(images_enabled, url);
+    if (!images_enabled) settings_client->DidNotAllowImage();
   }
   return images_enabled;
 }
diff --git a/third_party/blink/renderer/core/loader/frame_fetch_context.h b/third_party/blink/renderer/core/loader/frame_fetch_context.h
--- a/third_party/blink/renderer/core/loader/frame_fetch_context.h
+++ b/third_party/blink/renderer/core/loader/frame_fetch_context.h
@@ -94,7 +94,7 @@ class CORE_EXPORT FrameFetchContext final : public BaseFetchContext,
 
   void AddResourceTiming(mojom::blink::ResourceTimingInfoPtr,
                          const AtomicString& initiator_type) override;
-  bool AllowImage() const override;
+  bool AllowImage(bool images_enabled, const KURL&) const override;
 
   void ModifyRequestForMixedContentUpgrade(ResourceRequest&) override;
 
diff --git a/third_party/blink/renderer/core/page/page.cc b/third_party/blink/renderer/core/page/page.cc
--- a/third_party/blink/renderer/core/page/page.cc
+++ b/third_party/blink/renderer/core/page/page.cc
@@ -1070,9 +1070,8 @@ void Page::SettingsChanged(ChangeType change_type) {
       for (Frame* frame = MainFrame(); frame;
            frame = frame->Tree().TraverseNext()) {
         if (auto* local_frame = DynamicTo<LocalFrame>(frame)) {
-          // Notify the fetcher that the image loading setting has changed,
-          // which may cause previously deferred requests to load.
-          local_frame->GetDocument()->Fetcher()->ReloadImagesIfNotDeferred();
+          local_frame->GetDocument()->Fetcher()->SetImagesEnabled(
+              GetSettings().GetImagesEnabled());
           local_frame->GetDocument()->Fetcher()->SetAutoLoadImages(
               GetSettings().GetLoadsImagesAutomatically());
         }
diff --git a/third_party/blink/renderer/platform/loader/fetch/fetch_context.h b/third_party/blink/renderer/platform/loader/fetch/fetch_context.h
--- a/third_party/blink/renderer/platform/loader/fetch/fetch_context.h
+++ b/third_party/blink/renderer/platform/loader/fetch/fetch_context.h
@@ -110,7 +110,7 @@ class PLATFORM_EXPORT FetchContext : public GarbageCollected<FetchContext> {
 
   virtual void AddResourceTiming(mojom::blink::ResourceTimingInfoPtr,
                                  const AtomicString& initiator_type);
-  virtual bool AllowImage() const { return false; }
+  virtual bool AllowImage(bool, const KURL&) const { return false; }
   virtual std::optional<ResourceRequestBlockedReason> CanRequest(
       ResourceType,
       const ResourceRequest&,
diff --git a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.cc b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.cc
--- a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.cc
+++ b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.cc
@@ -819,6 +819,7 @@ ResourceFetcher::ResourceFetcher(const ResourceFetcherInit& init)
       blob_registry_remote_(init.context_lifecycle_notifier),
       context_lifecycle_notifier_(init.context_lifecycle_notifier),
       auto_load_images_(true),
+      images_enabled_(true),
       allow_stale_resources_(false),
       image_fetched_(false),
       speculative_decode_in_flight_(false) {
@@ -1995,7 +1996,7 @@ bool ResourceFetcher::IsImageResourceDisallowedToBeReused(
     return false;
   }
 
-  return !Context().AllowImage();
+  return !Context().AllowImage(images_enabled_, existing_resource.Url());
 }
 
 ResourceFetcher::RevalidationPolicy
@@ -2240,8 +2241,20 @@ void ResourceFetcher::SetAutoLoadImages(bool enable) {
   ReloadImagesIfNotDeferred();
 }
 
+void ResourceFetcher::SetImagesEnabled(bool enable) {
+  if (enable == images_enabled_)
+    return;
+
+  images_enabled_ = enable;
+
+  if (!images_enabled_)
+    return;
+
+  ReloadImagesIfNotDeferred();
+}
+
 bool ResourceFetcher::ShouldDeferImageLoad(const KURL& url) const {
-  return !Context().AllowImage() ||
+  return !Context().AllowImage(images_enabled_, url) ||
          (!auto_load_images_ && !url.ProtocolIsData());
 }
 
diff --git a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h
--- a/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h
+++ b/third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h
@@ -229,6 +229,7 @@ class PLATFORM_EXPORT ResourceFetcher
   bool StartLoad(Resource*, bool is_potentially_unused_preload = false);
 
   void SetAutoLoadImages(bool);
+  void SetImagesEnabled(bool);
 
   FetchContext& Context() const;
   void ClearContext();
@@ -704,6 +705,7 @@ class PLATFORM_EXPORT ResourceFetcher
   bool is_in_request_resource_ = false;
 
   bool auto_load_images_ : 1;
+  bool images_enabled_ : 1;
   bool allow_stale_resources_ : 1;
   bool image_fetched_ : 1;
   bool stale_while_revalidate_enabled_ : 1;
-- 

