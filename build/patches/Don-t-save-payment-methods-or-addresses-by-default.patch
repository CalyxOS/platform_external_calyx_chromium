From: Tommy Webb <tommy@calyxinstitute.org>
Date: Wed, 9 Apr 2025 19:33:59 +0000
Subject: Don't save payment methods or addresses by default

Changing the default states directly affects existing users, too.
When such settings are on by default, it is non-trivial to determine
whether the user wants to keep it that way, apart from asking them
or coming up with some type of heuristic, which would only be a guess.
We currently have no facility to ask *or* to notify of a change, and
we do not want a jarring change to occur without consent. Therefore,
we only want to adjust these defaults for existing users.

Solidify the defaults for saving payment methods and addresses:
- Alter the actual defaults to turn these off.
- For existing users who did not make a choice, these would have been on
  by default. To maintain this behavior, turn them on explicitly, as if
  user-chosen.
- On first startup, set the new default values explicitly, as if they
  were user-chosen. This prevents them from being overwritten on
  subsequent startups via the above behavior.

Issue: calyxos#3060
Issue: calyxos#2758
Change-Id: I31a55afbe6e9d5a8cab3f2b32e45c101c6751f70
---
 .../init/AsyncInitializationActivity.java     | 36 +++++++++++++++++++
 .../autofill/core/common/autofill_prefs.cc    |  8 ++---
 2 files changed, 40 insertions(+), 4 deletions(-)

diff --git a/chrome/android/java/src/org/chromium/chrome/browser/init/AsyncInitializationActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/init/AsyncInitializationActivity.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/init/AsyncInitializationActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/init/AsyncInitializationActivity.java
@@ -21,6 +21,7 @@ import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 
+import org.chromium.base.Callback;
 import org.chromium.base.Log;
 import org.chromium.base.ResettersForTesting;
 import org.chromium.base.SysUtils;
@@ -36,15 +37,19 @@ import org.chromium.chrome.browser.IntentHandler;
 import org.chromium.chrome.browser.LaunchIntentDispatcher;
 import org.chromium.chrome.browser.WarmupManager;
 import org.chromium.chrome.browser.firstrun.FirstRunFlowSequencer;
+import org.chromium.chrome.browser.firstrun.FirstRunStatus;
 import org.chromium.chrome.browser.lifecycle.ActivityLifecycleDispatcher;
 import org.chromium.chrome.browser.lifecycle.ActivityLifecycleDispatcherProvider;
 import org.chromium.chrome.browser.metrics.SimpleStartupForegroundSessionDetector;
 import org.chromium.chrome.browser.multiwindow.MultiWindowModeStateDispatcher;
 import org.chromium.chrome.browser.multiwindow.MultiWindowModeStateDispatcherImpl;
+import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.profiles.ProfileProvider;
 import org.chromium.chrome.browser.util.BrowserUiUtils;
 import org.chromium.components.browser_ui.share.ShareHelper;
 import org.chromium.components.browser_ui.util.FirstDrawDetector;
+import org.chromium.components.prefs.PrefService;
+import org.chromium.components.user_prefs.UserPrefs;
 import org.chromium.ui.base.ActivityIntentRequestTrackerDelegate;
 import org.chromium.ui.base.ActivityWindowAndroid;
 import org.chromium.ui.base.DeviceFormFactor;
@@ -396,6 +401,37 @@ public abstract class AsyncInitializationActivity extends ChromeBaseAppCompatAct
         mStartupDelayed = shouldDelayBrowserStartup();
 
         ChromeBrowserInitializer.getInstance().handlePreNativeStartupAndLoadLibraries(this);
+
+        mProfileProviderSupplier.onAvailable(new Callback<ProfileProvider>() {
+            private PrefService mPrefService;
+            private boolean mIsFirstRun;
+
+            @Override
+            public void onResult(ProfileProvider provider) {
+                mPrefService = UserPrefs.get(provider.getOriginalProfile());
+                mIsFirstRun = !FirstRunStatus.getFirstRunFlowComplete();
+                solidifyDefaultValue(Pref.AUTOFILL_CREDIT_CARD_ENABLED, /* priorDefault */ true);
+                solidifyDefaultValue(Pref.AUTOFILL_PAYMENT_CARD_BENEFITS, /* priorDefault */ true);
+                solidifyDefaultValue(Pref.AUTOFILL_PAYMENT_CVC_STORAGE, /* priorDefault */ true);
+                solidifyDefaultValue(Pref.AUTOFILL_PROFILE_ENABLED, /* priorDefault */ true);
+            }
+
+            private void solidifyDefaultValue(
+                    final String preference,
+                    final boolean priorDefault) {
+                final boolean isUnset = mPrefService.isDefaultValuePreference(preference);
+                if (isUnset) {
+                    if (mIsFirstRun) {
+                        // Set the preference explicitly to its default value.
+                        mPrefService.setBoolean(preference, mPrefService.getBoolean(preference));
+                    } else {
+                        // Set the preference explicitly to its prior default value.
+                        mPrefService.setBoolean(preference, priorDefault);
+                    }
+                }
+            }
+        });
+
         return true;
     }
 
diff --git a/components/autofill/core/common/autofill_prefs.cc b/components/autofill/core/common/autofill_prefs.cc
--- a/components/autofill/core/common/autofill_prefs.cc
+++ b/components/autofill/core/common/autofill_prefs.cc
@@ -21,7 +21,7 @@ namespace prefs {
 void RegisterProfilePrefs(user_prefs::PrefRegistrySyncable* registry) {
   // Synced prefs. Used for cross-device choices, e.g., credit card Autofill.
   registry->RegisterBooleanPref(
-      prefs::kAutofillProfileEnabled, true,
+      prefs::kAutofillProfileEnabled, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
   registry->RegisterIntegerPref(
       prefs::kAutofillLastVersionDeduped, 0,
@@ -30,13 +30,13 @@ void RegisterProfilePrefs(user_prefs::PrefRegistrySyncable* registry) {
       prefs::kAutofillHasSeenIban, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
   registry->RegisterBooleanPref(
-      prefs::kAutofillCreditCardEnabled, true,
+      prefs::kAutofillCreditCardEnabled, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
   registry->RegisterBooleanPref(
-      prefs::kAutofillPaymentCvcStorage, true,
+      prefs::kAutofillPaymentCvcStorage, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
   registry->RegisterBooleanPref(
-      kAutofillPaymentCardBenefits, true,
+      kAutofillPaymentCardBenefits, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
 
   // Non-synced prefs. Used for per-device choices, e.g., signin promo.
-- 

