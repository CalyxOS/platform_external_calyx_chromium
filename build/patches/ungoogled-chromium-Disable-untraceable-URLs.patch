From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Mon, 12 Feb 2018 21:28:11 +0100
Subject: ungoogled-chromium: Disable untraceable URLs

Disable additional URLs that are not caught by the "trk" scheme
---
 .../browser/android/rlz/rlz_ping_handler.cc   |   2 +-
 .../plugins/plugins_resource_service.cc       | 108 ++++++++++++++++++
 rlz/lib/financial_ping.cc                     |   4 +-
 rlz/lib/lib_values.cc                         |   1 -
 rlz/lib/lib_values.h                          |   1 -
 5 files changed, 111 insertions(+), 5 deletions(-)
 create mode 100644 chrome/browser/plugins/plugins_resource_service.cc

diff --git a/chrome/browser/android/rlz/rlz_ping_handler.cc b/chrome/browser/android/rlz/rlz_ping_handler.cc
--- a/chrome/browser/android/rlz/rlz_ping_handler.cc
+++ b/chrome/browser/android/rlz/rlz_ping_handler.cc
@@ -76,7 +76,7 @@ void RlzPingHandler::Ping(
   DCHECK_EQ(id.length(), 50u);
 
   GURL request_url(base::StringPrintf(
-      "https://%s%s?", rlz_lib::kFinancialServer, rlz_lib::kFinancialPingPath));
+      "about:blank"));
   request_url = net::AppendQueryParameter(
       request_url, rlz_lib::kProductSignatureCgiVariable, "chrome");
   request_url =
diff --git a/chrome/browser/plugins/plugins_resource_service.cc b/chrome/browser/plugins/plugins_resource_service.cc
new file mode 100644
index 0000000000000000000000000000000000000000..f9b358b9c623e2e8b3609dee85eea7c2096ec9db
--- /dev/null
+++ b/chrome/browser/plugins/plugins_resource_service.cc
@@ -0,0 +1,108 @@
+// Copyright 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/plugins/plugins_resource_service.h"
+
+#include "base/bind.h"
+#include "base/command_line.h"
+#include "build/build_config.h"
+#include "build/chromeos_buildflags.h"
+#include "chrome/browser/browser_process.h"
+#include "chrome/browser/net/system_network_context_manager.h"
+#include "chrome/browser/plugins/plugin_finder.h"
+#include "chrome/common/chrome_switches.h"
+#include "chrome/common/pref_names.h"
+#include "components/prefs/pref_registry_simple.h"
+#include "components/prefs/pref_service.h"
+#include "content/public/browser/network_service_instance.h"
+#include "services/network/public/cpp/shared_url_loader_factory.h"
+#include "url/gurl.h"
+
+namespace {
+constexpr net::NetworkTrafficAnnotationTag
+    kPluginResourceServiceTrafficAnnotation =
+        net::DefineNetworkTrafficAnnotation("plugins_resource_service", R"(
+        semantics {
+          sender: "Plugins Resource Service"
+          description:
+            "Fetches updates to the list of plugins known to Chromium. For a "
+            "given plugin, this list contains the minimum version not "
+            "containing known security vulnerabilities, and can be used to "
+            "inform the user that their plugins need to be updated."
+          trigger: "Triggered at regular intervals (once per day)."
+          data: "None"
+          destination: GOOGLE_OWNED_SERVICE
+        }
+        policy {
+          cookies_allowed: NO
+          setting: "This feature cannot be disabled in settings."
+          policy_exception_justification:
+            "Not implemented. AllowOutdatedPlugins policy silences local "
+            "warnings, but network request to update the list of plugins are "
+            "still sent."
+        })");
+
+}  // namespace
+
+namespace {
+
+// Delay on first fetch so we don't interfere with startup.
+const int kStartResourceFetchDelayMs = 60 * 1000;
+
+// Delay between calls to update the cache 1 day and 2 minutes in testing mode.
+const int kCacheUpdateDelayMs = 24 * 60 * 60 * 1000;
+
+GURL GetPluginsServerURL() {
+  std::string filename;
+#if BUILDFLAG(IS_WIN)
+  filename = "plugins_win.json";
+#elif BUILDFLAG(IS_CHROMEOS_ASH)
+  filename = "plugins_chromeos.json";
+#elif BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS_LACROS)
+  filename = "plugins_linux.json";
+#elif BUILDFLAG(IS_MAC)
+  filename = "plugins_mac.json";
+#else
+#error Unknown platform
+#endif
+
+  return GURL("about:blank");
+}
+
+}  // namespace
+
+PluginsResourceService::PluginsResourceService(PrefService* local_state)
+    : web_resource::WebResourceService(
+          local_state,
+          GetPluginsServerURL(),
+          std::string(),
+          prefs::kPluginsResourceCacheUpdate,
+          kStartResourceFetchDelayMs,
+          kCacheUpdateDelayMs,
+          g_browser_process->system_network_context_manager()
+              ->GetSharedURLLoaderFactory(),
+          switches::kDisableBackgroundNetworking,
+          kPluginResourceServiceTrafficAnnotation,
+          base::BindOnce(&content::GetNetworkConnectionTracker)) {}
+
+void PluginsResourceService::Init() {
+  const base::DictionaryValue* metadata = &base::Value::AsDictionaryValue(
+      *prefs_->GetDictionary(prefs::kPluginsMetadata));
+  PluginFinder::GetInstance()->ReinitializePlugins(metadata);
+  StartAfterDelay();
+}
+
+PluginsResourceService::~PluginsResourceService() {
+}
+
+// static
+void PluginsResourceService::RegisterPrefs(PrefRegistrySimple* registry) {
+  registry->RegisterDictionaryPref(prefs::kPluginsMetadata);
+  registry->RegisterStringPref(prefs::kPluginsResourceCacheUpdate, "0");
+}
+
+void PluginsResourceService::Unpack(const base::DictionaryValue& parsed_json) {
+  prefs_->Set(prefs::kPluginsMetadata, parsed_json);
+  PluginFinder::GetInstance()->ReinitializePlugins(&parsed_json);
+}
diff --git a/rlz/lib/financial_ping.cc b/rlz/lib/financial_ping.cc
--- a/rlz/lib/financial_ping.cc
+++ b/rlz/lib/financial_ping.cc
@@ -336,7 +336,7 @@ FinancialPing::PingResponse FinancialPing::PingServer(const char* request,
 
   // Open network connection.
   InternetHandle connection_handle = InternetConnectA(inet_handle,
-      kFinancialServer, kFinancialPort, "", "", INTERNET_SERVICE_HTTP,
+      "about:blank", kFinancialPort, "", "", INTERNET_SERVICE_HTTP,
       INTERNET_FLAG_NO_CACHE_WRITE, 0);
   if (!connection_handle)
     return PING_FAILURE;
@@ -380,7 +380,7 @@ FinancialPing::PingResponse FinancialPing::PingServer(const char* request,
   return PING_SUCCESSFUL;
 #else
   std::string url =
-      base::StringPrintf("https://%s%s", kFinancialServer, request);
+      base::StringPrintf("about:blank");
 
   // Use a waitable event to cause this function to block, to match the
   // wininet implementation.
diff --git a/rlz/lib/lib_values.cc b/rlz/lib/lib_values.cc
--- a/rlz/lib/lib_values.cc
+++ b/rlz/lib/lib_values.cc
@@ -40,7 +40,6 @@ const char kSetDccResponseVariable[] = "set_dcc";
 //
 
 const char kFinancialPingPath[] = "/tools/pso/ping";
-const char kFinancialServer[]   = "clients1.google.com";
 const int kFinancialPort = 443;
 
 // Ping times in 100-nanosecond intervals.
diff --git a/rlz/lib/lib_values.h b/rlz/lib/lib_values.h
--- a/rlz/lib/lib_values.h
+++ b/rlz/lib/lib_values.h
@@ -72,7 +72,6 @@ extern const char kSetDccResponseVariable[];
 //
 
 extern const char kFinancialPingPath[];
-extern const char kFinancialServer[];
 
 extern const int kFinancialPort;
 
-- 
2.36.1

