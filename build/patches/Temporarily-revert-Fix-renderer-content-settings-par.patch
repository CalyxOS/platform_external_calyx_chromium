From: Tommy Webb <tommy@calyxinstitute.org>
Date: Thu, 9 May 2024 16:24:53 +0000
Subject: Temporarily revert "Fix renderer content settings (part 13 / N)"

We still rely on many of the removed pieces for site settings.

This reverts commit bf57905d434309d3be8a72c094edbf75de6e490b.

Change-Id: Ia07b313c9065599a717d3633e5acc7471959efe7
---
 ...page_specific_content_settings_delegate.cc | 28 ++++++++++++++++++-
 .../common/content_settings_agent.mojom       |  4 +++
 .../core/browser/content_settings_utils.cc    | 19 +++++++++++++
 .../core/common/content_settings.cc           |  4 +++
 .../core/common/content_settings.h            |  4 +++
 .../core/common/content_settings.mojom        |  4 +++
 .../common/content_settings_mojom_traits.cc   |  6 +++-
 .../common/content_settings_mojom_traits.h    | 20 +++++++++++++
 .../content_settings_mojom_traits_unittest.cc | 15 ++++++++++
 .../renderer/content_settings_agent_impl.cc   |  7 +++++
 .../renderer/content_settings_agent_impl.h    |  3 ++
 11 files changed, 112 insertions(+), 2 deletions(-)

diff --git a/chrome/browser/content_settings/page_specific_content_settings_delegate.cc b/chrome/browser/content_settings/page_specific_content_settings_delegate.cc
--- a/chrome/browser/content_settings/page_specific_content_settings_delegate.cc
+++ b/chrome/browser/content_settings/page_specific_content_settings_delegate.cc
@@ -168,6 +168,21 @@ namespace {
 void GetGuestViewDefaultContentSettingRules(
     bool incognito,
     RendererContentSettingRules* rules) {
+  rules->image_rules.clear();
+  rules->image_rules.push_back(ContentSettingPatternSource(
+      ContentSettingsPattern::Wildcard(), ContentSettingsPattern::Wildcard(),
+      content_settings::ContentSettingToValue(CONTENT_SETTING_ALLOW),
+      std::string(), incognito));
+  rules->auto_dark_content_rules.clear();
+  rules->auto_dark_content_rules.push_back(ContentSettingPatternSource(
+      ContentSettingsPattern::Wildcard(), ContentSettingsPattern::Wildcard(),
+      content_settings::ContentSettingToValue(CONTENT_SETTING_ALLOW),
+      std::string(), incognito));
+  rules->script_rules.clear();
+  rules->script_rules.push_back(ContentSettingPatternSource(
+      ContentSettingsPattern::Wildcard(), ContentSettingsPattern::Wildcard(),
+      content_settings::ContentSettingToValue(CONTENT_SETTING_ALLOW),
+      std::string(), incognito));
   rules->mixed_content_rules.clear();
   rules->mixed_content_rules.push_back(ContentSettingPatternSource(
       ContentSettingsPattern::Wildcard(), ContentSettingsPattern::Wildcard(),
@@ -180,15 +195,26 @@ void GetGuestViewDefaultContentSettingRules(
 void PageSpecificContentSettingsDelegate::SetDefaultRendererContentSettingRules(
     content::RenderFrameHost* rfh,
     RendererContentSettingRules* rules) {
-#if BUILDFLAG(ENABLE_EXTENSIONS)
   bool is_off_the_record =
       web_contents()->GetBrowserContext()->IsOffTheRecord();
 
+#if BUILDFLAG(ENABLE_EXTENSIONS)
   if (guest_view::GuestViewBase::IsGuest(rfh)) {
     GetGuestViewDefaultContentSettingRules(is_off_the_record, rules);
     return;
   }
 #endif
+  // Always allow scripting in PDF renderers to retain the functionality of
+  // the scripted messaging proxy in between the plugins in the PDF renderers
+  // and the PDF extension UI. Content settings for JavaScript embedded in
+  // PDFs are enforced by the PDF plugin.
+  if (rfh->GetProcess()->IsPdf()) {
+    rules->script_rules.clear();
+    rules->script_rules.emplace_back(
+        ContentSettingsPattern::Wildcard(), ContentSettingsPattern::Wildcard(),
+        content_settings::ContentSettingToValue(CONTENT_SETTING_ALLOW),
+        std::string(), is_off_the_record);
+  }
 }
 
 PageSpecificContentSettings::MicrophoneCameraState
diff --git a/components/content_settings/common/content_settings_agent.mojom b/components/content_settings/common/content_settings_agent.mojom
--- a/components/content_settings/common/content_settings_agent.mojom
+++ b/components/content_settings/common/content_settings_agent.mojom
@@ -12,6 +12,10 @@ interface ContentSettingsAgent {
   // main frame, it will also reload the frame afterwards.
   SetAllowRunningInsecureContent();
 
+  // Sent to inform the renderer automatic upgrades for mixed content are
+  // disabled.
+  SetDisabledMixedContentUpgrades();
+
   // Sends content setting rules for each frame to the renderer process.
   SendRendererContentSettingRules(
       RendererContentSettingRules renderer_settings);
diff --git a/components/content_settings/core/browser/content_settings_utils.cc b/components/content_settings/core/browser/content_settings_utils.cc
--- a/components/content_settings/core/browser/content_settings_utils.cc
+++ b/components/content_settings/core/browser/content_settings_utils.cc
@@ -123,16 +123,35 @@ PatternPair ParsePatternString(const std::string& pattern_str) {
 void GetRendererContentSettingRules(const HostContentSettingsMap* map,
                                     RendererContentSettingRules* rules) {
 #if !BUILDFLAG(IS_ANDROID) && !BUILDFLAG(IS_IOS)
+  rules->image_rules = map->GetSettingsForOneType(ContentSettingsType::IMAGES);
   rules->mixed_content_rules =
       map->GetSettingsForOneType(ContentSettingsType::MIXEDSCRIPT);
+  // Auto dark web content settings is available only for Android, so ALLOW rule
+  // is added for all origins.
+  rules->auto_dark_content_rules.push_back(ContentSettingPatternSource(
+      ContentSettingsPattern::Wildcard(), ContentSettingsPattern::Wildcard(),
+      ContentSettingToValue(CONTENT_SETTING_ALLOW), std::string(),
+      map->IsOffTheRecord()));
 #else
+  // Android doesn't use image content settings, so ALLOW rule is added for
+  // all origins.
+  rules->image_rules.push_back(ContentSettingPatternSource(
+      ContentSettingsPattern::Wildcard(), ContentSettingsPattern::Wildcard(),
+      ContentSettingToValue(CONTENT_SETTING_ALLOW), std::string(),
+      map->IsOffTheRecord()));
   // In Android active mixed content is hard blocked, with no option to allow
   // it.
   rules->mixed_content_rules.push_back(ContentSettingPatternSource(
       ContentSettingsPattern::Wildcard(), ContentSettingsPattern::Wildcard(),
       ContentSettingToValue(CONTENT_SETTING_BLOCK), ProviderType::kNone,
       map->IsOffTheRecord()));
+  rules->auto_dark_content_rules =
+      map->GetSettingsForOneType(ContentSettingsType::AUTO_DARK_WEB_CONTENT);
 #endif
+  rules->script_rules =
+      map->GetSettingsForOneType(ContentSettingsType::JAVASCRIPT);
+  rules->popup_redirect_rules =
+      map->GetSettingsForOneType(ContentSettingsType::POPUPS);
 }
 
 bool IsMorePermissive(ContentSetting a, ContentSetting b) {
diff --git a/components/content_settings/core/common/content_settings.cc b/components/content_settings/core/common/content_settings.cc
--- a/components/content_settings/core/common/content_settings.cc
+++ b/components/content_settings/core/common/content_settings.cc
@@ -107,7 +107,11 @@ bool RendererContentSettingRules::IsRendererContentSetting(
 
 void RendererContentSettingRules::FilterRulesByOutermostMainFrameURL(
     const GURL& outermost_main_frame_url) {
+  FilterRulesForType(image_rules, outermost_main_frame_url);
+  FilterRulesForType(script_rules, outermost_main_frame_url);
+  FilterRulesForType(popup_redirect_rules, outermost_main_frame_url);
   FilterRulesForType(mixed_content_rules, outermost_main_frame_url);
+  FilterRulesForType(auto_dark_content_rules, outermost_main_frame_url);
 }
 
 RendererContentSettingRules::RendererContentSettingRules() = default;
diff --git a/components/content_settings/core/common/content_settings.h b/components/content_settings/core/common/content_settings.h
--- a/components/content_settings/core/common/content_settings.h
+++ b/components/content_settings/core/common/content_settings.h
@@ -95,7 +95,11 @@ struct RendererContentSettingRules {
 
   bool operator==(const RendererContentSettingRules& other) const;
 
+  ContentSettingsForOneType image_rules;
+  ContentSettingsForOneType script_rules;
+  ContentSettingsForOneType popup_redirect_rules;
   ContentSettingsForOneType mixed_content_rules;
+  ContentSettingsForOneType auto_dark_content_rules;
 };
 
 namespace content_settings {
diff --git a/components/content_settings/core/common/content_settings.mojom b/components/content_settings/core/common/content_settings.mojom
--- a/components/content_settings/core/common/content_settings.mojom
+++ b/components/content_settings/core/common/content_settings.mojom
@@ -84,5 +84,9 @@ struct ContentSettingPatternSource {
 // This mirrors the C++ type in content_settings.h.
 // TODO(crbug.com/40282541): This should be removed.
 struct RendererContentSettingRules {
+  array<ContentSettingPatternSource> image_rules;
+  array<ContentSettingPatternSource> script_rules;
+  array<ContentSettingPatternSource> popup_redirect_rules;
   array<ContentSettingPatternSource> mixed_content_rules;
+  array<ContentSettingPatternSource> auto_dark_content_rules;
 };
diff --git a/components/content_settings/core/common/content_settings_mojom_traits.cc b/components/content_settings/core/common/content_settings_mojom_traits.cc
--- a/components/content_settings/core/common/content_settings_mojom_traits.cc
+++ b/components/content_settings/core/common/content_settings_mojom_traits.cc
@@ -123,7 +123,11 @@ bool StructTraits<content_settings::mojom::RendererContentSettingRulesDataView,
                   RendererContentSettingRules>::
     Read(content_settings::mojom::RendererContentSettingRulesDataView data,
          RendererContentSettingRules* out) {
-  return data.ReadMixedContentRules(&out->mixed_content_rules);
+  return data.ReadImageRules(&out->image_rules) &&
+         data.ReadScriptRules(&out->script_rules) &&
+         data.ReadPopupRedirectRules(&out->popup_redirect_rules) &&
+         data.ReadMixedContentRules(&out->mixed_content_rules) &&
+         data.ReadAutoDarkContentRules(&out->auto_dark_content_rules);
 }
 
 }  // namespace mojo
diff --git a/components/content_settings/core/common/content_settings_mojom_traits.h b/components/content_settings/core/common/content_settings_mojom_traits.h
--- a/components/content_settings/core/common/content_settings_mojom_traits.h
+++ b/components/content_settings/core/common/content_settings_mojom_traits.h
@@ -175,11 +175,31 @@ template <>
 struct StructTraits<
     content_settings::mojom::RendererContentSettingRulesDataView,
     RendererContentSettingRules> {
+  static const std::vector<ContentSettingPatternSource>& image_rules(
+      const RendererContentSettingRules& r) {
+    return r.image_rules;
+  }
+
+  static const std::vector<ContentSettingPatternSource>& script_rules(
+      const RendererContentSettingRules& r) {
+    return r.script_rules;
+  }
+
+  static const std::vector<ContentSettingPatternSource>& popup_redirect_rules(
+      const RendererContentSettingRules& r) {
+    return r.popup_redirect_rules;
+  }
+
   static const std::vector<ContentSettingPatternSource>& mixed_content_rules(
       const RendererContentSettingRules& r) {
     return r.mixed_content_rules;
   }
 
+  static const std::vector<ContentSettingPatternSource>&
+  auto_dark_content_rules(const RendererContentSettingRules& r) {
+    return r.auto_dark_content_rules;
+  }
+
   static bool Read(
       content_settings::mojom::RendererContentSettingRulesDataView data,
       RendererContentSettingRules* out);
diff --git a/components/content_settings/core/common/content_settings_mojom_traits_unittest.cc b/components/content_settings/core/common/content_settings_mojom_traits_unittest.cc
--- a/components/content_settings/core/common/content_settings_mojom_traits_unittest.cc
+++ b/components/content_settings/core/common/content_settings_mojom_traits_unittest.cc
@@ -111,11 +111,26 @@ TEST(ContentSettingsTraitsTest, Roundtrips_RendererContentSettingRules) {
   RendererContentSettingRules original;
 
   ContentSettingPatternSource source;
+  source.primary_pattern =
+      ContentSettingsPattern::FromString("https://image.com:*");
+  original.image_rules = {source};
+
+  source.primary_pattern =
+      ContentSettingsPattern::FromString("https://script.com:*");
+  original.script_rules = {source};
+
+  source.primary_pattern =
+      ContentSettingsPattern::FromString("https://popup-redirect.com:*");
+  original.popup_redirect_rules = {source};
 
   source.primary_pattern =
       ContentSettingsPattern::FromString("https://mixed-content.com:*");
   original.mixed_content_rules = {source};
 
+  source.primary_pattern =
+      ContentSettingsPattern::FromString("https://auto-dark-content.com:*");
+  original.auto_dark_content_rules = {source};
+
   RendererContentSettingRules round_tripped;
 
   EXPECT_TRUE(mojo::test::SerializeAndDeserialize<
diff --git a/components/content_settings/renderer/content_settings_agent_impl.cc b/components/content_settings/renderer/content_settings_agent_impl.cc
--- a/components/content_settings/renderer/content_settings_agent_impl.cc
+++ b/components/content_settings/renderer/content_settings_agent_impl.cc
@@ -196,6 +196,10 @@ void ContentSettingsAgentImpl::SetAllowRunningInsecureContent() {
     frame->StartReload(blink::WebFrameLoadType::kReload);
 }
 
+void ContentSettingsAgentImpl::SetDisabledMixedContentUpgrades() {
+  mixed_content_autoupgrades_disabled_ = true;
+}
+
 void ContentSettingsAgentImpl::SendRendererContentSettingRules(
     const RendererContentSettingRules& renderer_settings) {
   content_setting_rules_ = std::make_unique<RendererContentSettingRules>(
@@ -322,6 +326,9 @@ bool ContentSettingsAgentImpl::AllowRunningInsecureContent(
 }
 
 bool ContentSettingsAgentImpl::ShouldAutoupgradeMixedContent() {
+  if (mixed_content_autoupgrades_disabled_)
+    return false;
+
   if (content_setting_rules_) {
     auto setting = GetContentSettingFromRules(
         content_setting_rules_->mixed_content_rules, GURL());
diff --git a/components/content_settings/renderer/content_settings_agent_impl.h b/components/content_settings/renderer/content_settings_agent_impl.h
--- a/components/content_settings/renderer/content_settings_agent_impl.h
+++ b/components/content_settings/renderer/content_settings_agent_impl.h
@@ -123,6 +123,7 @@ class ContentSettingsAgentImpl
 
   // mojom::ContentSettingsAgent:
   void SetAllowRunningInsecureContent() override;
+  void SetDisabledMixedContentUpgrades() override;
   void SendRendererContentSettingRules(
       const RendererContentSettingRules& renderer_settings) override;
 
@@ -154,6 +155,8 @@ class ContentSettingsAgentImpl
   using StoragePermissionsKey = std::pair<url::Origin, StorageType>;
   base::flat_map<StoragePermissionsKey, bool> cached_storage_permissions_;
 
+  bool mixed_content_autoupgrades_disabled_ = false;
+
   // If true, IsAllowlistedForContentSettings will always return true.
   const bool should_allowlist_;
 
-- 

