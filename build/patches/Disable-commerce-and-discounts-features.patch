From: Tommy Webb <tommy@calyxinstitute.org>
Date: Tue, 20 Feb 2024 15:20:48 +0000
Subject: Disable commerce and discounts features

Selectively copied from:
https://github.com/uazo/cromite/blob/0543a8a30b898b6a8c92b197b3f798ecd71dce6f/build/patches/add-browser-policy.patch

Also adapted for the upstream removal of the following flags, for which
we now behave as we did when they were disabled, prior to their removal:
- kNtpHistoryClustersModulesDiscounts
  - `f0c4460c2a3742970950378fd5d88a882c534ceb`
- kShowDiscountOnNavigation
  - `5da464c613d22ebabd3e72befd015a32f60d758d`
- kMerchantWidePromotion
  - `81089a83616b42c2d0ad6cb5213508ee5f4349d5`

License: GPL-2.0-or-later - https://spdx.org/licenses/GPL-2.0-or-later.html
Change-Id: Ie9b492700a5112e280b90652eae69735239a9d9f
---
 chrome/browser/cart/cart_service.cc           |  1 -
 chrome/browser/cart/fetch_discount_worker.cc  |  6 +--
 .../history_clusters_page_handler_v2.cc       | 10 ++---
 .../modules/history_clusters/module.ts        | 21 +--------
 .../modules/v2/history_clusters/module.ts     | 25 +----------
 .../ui/commerce/commerce_ui_tab_helper.cc     |  4 +-
 .../offer_notification_bubble_views.cc        | 44 -------------------
 .../commerce/core/commerce_feature_list.cc    | 10 +++++
 8 files changed, 18 insertions(+), 103 deletions(-)

diff --git a/chrome/browser/cart/cart_service.cc b/chrome/browser/cart/cart_service.cc
--- a/chrome/browser/cart/cart_service.cc
+++ b/chrome/browser/cart/cart_service.cc
@@ -490,7 +490,6 @@ void CartService::ShouldShowDiscountConsentCallback(
     for (auto proto_pair : proto_pairs) {
       auto cart_url = proto_pair.second.merchant_cart_url();
       should_show |= commerce::IsPartnerMerchant(GURL(cart_url));
-      should_show |= !commerce::IsNoDiscountMerchant(GURL(cart_url));
     }
 
     if (base::FeatureList::IsEnabled(commerce::kDiscountConsentV2)) {
diff --git a/chrome/browser/cart/fetch_discount_worker.cc b/chrome/browser/cart/fetch_discount_worker.cc
--- a/chrome/browser/cart/fetch_discount_worker.cc
+++ b/chrome/browser/cart/fetch_discount_worker.cc
@@ -151,16 +151,12 @@ void FetchDiscountWorker::ReadyToFetch(
   // If there is no eligible merchant cart, don't fetch immediately; instead,
   // post another delayed fetch.
   bool has_partner_merchant = false;
-  bool has_potential_merchant = false;
   for (auto pair : proto_pairs) {
     auto cart_url = pair.second.merchant_cart_url();
     bool is_partner_merchant = commerce::IsPartnerMerchant(GURL(cart_url));
-    bool is_potential_merchant =
-        !commerce::IsNoDiscountMerchant(GURL(cart_url));
     has_partner_merchant |= is_partner_merchant;
-    has_potential_merchant |= is_potential_merchant;
   }
-  if (has_partner_merchant || has_potential_merchant) {
+  if (has_partner_merchant) {
     backend_task_runner_->PostTask(
         FROM_HERE,
         base::BindOnce(
diff --git a/chrome/browser/new_tab_page/modules/v2/history_clusters/history_clusters_page_handler_v2.cc b/chrome/browser/new_tab_page/modules/v2/history_clusters/history_clusters_page_handler_v2.cc
--- a/chrome/browser/new_tab_page/modules/v2/history_clusters/history_clusters_page_handler_v2.cc
+++ b/chrome/browser/new_tab_page/modules/v2/history_clusters/history_clusters_page_handler_v2.cc
@@ -131,9 +131,6 @@ HistoryClustersPageHandlerV2::HistoryClustersPageHandlerV2(
     cart_processor_ = std::make_unique<CartProcessor>(
         CartServiceFactory::GetForProfile(profile_));
   }
-
-    discount_processor_ = std::make_unique<DiscountProcessor>(
-        commerce::ShoppingServiceFactory::GetForBrowserContext(profile_));
 }
 
 HistoryClustersPageHandlerV2::~HistoryClustersPageHandlerV2() {
@@ -241,9 +238,10 @@ void HistoryClustersPageHandlerV2::GetCartForCluster(
 void HistoryClustersPageHandlerV2::GetDiscountsForCluster(
     history_clusters::mojom::ClusterPtr cluster,
     GetDiscountsForClusterCallback callback) {
-  DCHECK(discount_processor_);
-  discount_processor_->GetDiscountsForCluster(std::move(cluster),
-                                              std::move(callback));
+  std::move(callback).Run(
+      base::flat_map<
+          GURL, std::vector<
+                    ntp::history_clusters::discount::mojom::DiscountPtr>>());
 }
 
 void HistoryClustersPageHandlerV2::ShowJourneysSidePanel(
diff --git a/chrome/browser/resources/new_tab_page/modules/history_clusters/module.ts b/chrome/browser/resources/new_tab_page/modules/history_clusters/module.ts
--- a/chrome/browser/resources/new_tab_page/modules/history_clusters/module.ts
+++ b/chrome/browser/resources/new_tab_page/modules/history_clusters/module.ts
@@ -338,26 +338,7 @@ async function createElement(): Promise<HistoryClustersModuleElement|null> {
                                  visit.hasUrlKeyedImage && visit.isKnownToSync)
                          .length;
   const visitCount = element.cluster.visits.length;
-  element.discounts = [];
-  const {discounts} = await HistoryClustersProxyImpl.getInstance()
-                          .handler.getDiscountsForCluster(clusters[0]);
-  for (const visit of clusters[0].visits) {
-    let discountInValue = '';
-    for (const [url, urlDiscounts] of discounts) {
-      if (url.url === visit.normalizedUrl.url && urlDiscounts.length > 0) {
-        // API is designed to support multiple discounts, but for now we only
-        // have one.
-        discountInValue = urlDiscounts[0].valueInText;
-        visit.normalizedUrl.url = urlDiscounts[0].annotatedVisitUrl.url;
-      }
-    }
-    element.discounts.push(discountInValue);
-  }
-  // For visits without discounts, discount string in corresponding index in
-  // `discounts` array is empty.
-  const hasDiscount = element.discounts.some((discount) => discount.length > 0);
-  chrome.metricsPrivate.recordBoolean(
-      `NewTabPage.HistoryClusters.HasDiscount`, hasDiscount);
+  element.discounts = Array(visitCount).fill('');
 
   // Calculate which layout to use.
   if (imageCount >= LAYOUT_3_MIN_IMAGE_VISITS) {
diff --git a/chrome/browser/resources/new_tab_page/modules/v2/history_clusters/module.ts b/chrome/browser/resources/new_tab_page/modules/v2/history_clusters/module.ts
--- a/chrome/browser/resources/new_tab_page/modules/v2/history_clusters/module.ts
+++ b/chrome/browser/resources/new_tab_page/modules/v2/history_clusters/module.ts
@@ -304,30 +304,7 @@ async function createElement(cluster: Cluster):
     element.cart = cart;
   }
 
-  element.discounts = [];
-  const {discounts} = await HistoryClustersProxyImpl.getInstance()
-                          .handler.getDiscountsForCluster(cluster);
-  for (const visit of cluster.visits) {
-    let discountInValue = '';
-    for (const [url, urlDiscounts] of discounts) {
-      if (url.url === visit.normalizedUrl.url && urlDiscounts.length > 0) {
-        // API is designed to support multiple discounts, but for now we only
-        // have one.
-        discountInValue = urlDiscounts[0].valueInText;
-        visit.normalizedUrl.url = urlDiscounts[0].annotatedVisitUrl.url;
-      }
-    }
-    element.discounts.push(discountInValue);
-  }
-  // For visits without discounts, discount string in corresponding index in
-  // `discounts` array is empty.
-  // Only interested in the discounts for the first two visits (first three
-  // elements in the array) since they are the only visible ones.
-  const hasDiscount =
-      element.discounts.slice(0, CLUSTER_MIN_REQUIRED_URL_VISITS)
-          .some((discount) => discount.length > 0);
-  chrome.metricsPrivate.recordBoolean(
-      `NewTabPage.HistoryClusters.HasDiscount`, hasDiscount);
+  element.discounts = Array(cluster.visits.length).fill('');
 
   return element;
 }
diff --git a/chrome/browser/ui/commerce/commerce_ui_tab_helper.cc b/chrome/browser/ui/commerce/commerce_ui_tab_helper.cc
--- a/chrome/browser/ui/commerce/commerce_ui_tab_helper.cc
+++ b/chrome/browser/ui/commerce/commerce_ui_tab_helper.cc
@@ -286,9 +286,7 @@ void CommerceUiTabHelper::HandleDiscountsResponse(const DiscountsMap& map) {
 
   page_has_discounts_ =
       response_has_discounts
-          ? shopping_service_->IsDiscountEligibleToShowOnNavigation() ||
-                commerce::UrlContainsDiscountUtmTag(
-                    web_contents()->GetLastCommittedURL())
+          ? shopping_service_->IsDiscountEligibleToShowOnNavigation()
           : false;
 
   got_discounts_response_for_page_ = true;
diff --git a/chrome/browser/ui/views/autofill/payments/offer_notification_bubble_views.cc b/chrome/browser/ui/views/autofill/payments/offer_notification_bubble_views.cc
--- a/chrome/browser/ui/views/autofill/payments/offer_notification_bubble_views.cc
+++ b/chrome/browser/ui/views/autofill/payments/offer_notification_bubble_views.cc
@@ -245,50 +245,6 @@ OfferNotificationBubbleViews::CreateFreeListingCouponOfferMainPageContent(
     }
   }
 
-  auto expiration_date_text = l10n_util::GetStringFUTF16(
-      IDS_DISCOUNT_EXPIRATION_DATE, TimeFormatShortDate(offer.GetExpiry()));
-  if (promo_code_value_prop_string.empty()) {
-    promo_code_value_prop_string = expiration_date_text;
-  } else {
-    promo_code_value_prop_string = l10n_util::GetStringFUTF16(
-        IDS_TWO_STRINGS_CONNECTOR, promo_code_value_prop_string,
-        expiration_date_text);
-  }
-
-  promo_code_value_prop_label_ = main_page_view->AddChildView(
-      views::Builder<views::StyledLabel>()
-          .SetDefaultTextStyle(views::style::STYLE_SECONDARY)
-          .SetTextContext(views::style::CONTEXT_DIALOG_BODY_TEXT)
-          .SetHorizontalAlignment(gfx::ALIGN_LEFT)
-          .Build());
-
-  if (offer.GetTermsAndConditions().has_value() &&
-      !offer.GetTermsAndConditions().value().empty()) {
-    std::vector<size_t> offsets;
-    promo_code_value_prop_string = l10n_util::GetStringFUTF16(
-        IDS_TWO_STRINGS_CONNECTOR_WITH_SPACE, promo_code_value_prop_string,
-        l10n_util::GetStringUTF16(IDS_SEE_SELLER_TERMS_AND_CONDITIONS),
-        &offsets);
-    promo_code_value_prop_label_->SetText(promo_code_value_prop_string);
-    size_t terms_and_conditions_offset = offsets[1];
-    base::RepeatingCallback<void()> callback = base::BindRepeating(
-        &OfferNotificationBubbleViews::OpenTermsAndConditionsPage,
-        weak_factory_.GetWeakPtr(), offer, seller_domain);
-    views::StyledLabel::RangeStyleInfo terms_and_conditions_style_info =
-        views::StyledLabel::RangeStyleInfo::CreateForLink(std::move(callback));
-    promo_code_value_prop_label_->AddStyleRange(
-        gfx::Range(terms_and_conditions_offset,
-                   promo_code_value_prop_string.length()),
-        terms_and_conditions_style_info);
-  } else {
-    promo_code_value_prop_label_->SetText(promo_code_value_prop_string);
-  }
-
-  if (!::features::IsChromeRefresh2023()) {
-    promo_code_value_prop_label_->SetProperty(views::kCrossAxisAlignmentKey,
-                                              views::LayoutAlignment::kStart);
-  }
-
   UpdateButtonTooltipsAndAccessibleNames();
   return main_page_view;
 }
diff --git a/components/commerce/core/commerce_feature_list.cc b/components/commerce/core/commerce_feature_list.cc
--- a/components/commerce/core/commerce_feature_list.cc
+++ b/components/commerce/core/commerce_feature_list.cc
@@ -322,6 +322,16 @@ const char kParcelTrackingTestDataParamDelivered[] = "Delivered";
 const char kParcelTrackingTestDataParamInProgress[] = "InProgress";
 const char kParcelTrackingTestDataParamOutForDelivery[] = "OutForDelivery";
 
+SET_CROMITE_FEATURE_DISABLED(kCommerceHintAndroid);
+SET_CROMITE_FEATURE_DISABLED(kCommercePriceTrackingRegionLaunched);
+SET_CROMITE_FEATURE_DISABLED(kShoppingListRegionLaunched);
+
+SET_CROMITE_FEATURE_DISABLED(kParcelTracking);
+SET_CROMITE_FEATURE_DISABLED(kParcelTrackingRegionLaunched);
+
+SET_CROMITE_FEATURE_DISABLED(kEnableDiscountInfoApi);
+SET_CROMITE_FEATURE_DISABLED(kEnableDiscountInfoApiRegionLaunched);
+
 // Params for Discount Consent V2 in the NTP Cart module.
 const char kNtpChromeCartModuleDiscountConsentNtpVariationParam[] =
     "discount-consent-ntp-variation";
-- 

