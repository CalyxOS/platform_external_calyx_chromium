From: Tommy Webb <tommy@calyxinstitute.org>
Date: Tue, 20 Feb 2024 15:20:48 +0000
Subject: Disable commerce and discounts features

TODO: Update selective copying for M128!

Selectively copied from:
https://github.com/uazo/cromite/blob/0543a8a30b898b6a8c92b197b3f798ecd71dce6f/build/patches/add-browser-policy.patch

Also adapted for the upstream removal of the following flags, for which
we now behave as we did when they were disabled, prior to their removal:
- kNtpHistoryClustersModulesDiscounts
  - `f0c4460c2a3742970950378fd5d88a882c534ceb`
- kShowDiscountOnNavigation
  - `5da464c613d22ebabd3e72befd015a32f60d758d`
- kMerchantWidePromotion
  - `81089a83616b42c2d0ad6cb5213508ee5f4349d5`

License: GPL-2.0-or-later - https://spdx.org/licenses/GPL-2.0-or-later.html
Change-Id: Ie9b492700a5112e280b90652eae69735239a9d9f
---
 chrome/browser/cart/cart_service.cc           |   1 -
 chrome/browser/cart/fetch_discount_worker.cc  |   6 +-
 .../ui/commerce/commerce_ui_tab_helper.cc     |  48 ++++++
 .../offer_notification_bubble_views.cc        | 153 ++++++++++++++++++
 .../commerce/core/commerce_feature_list.cc    |  10 ++
 5 files changed, 212 insertions(+), 6 deletions(-)

diff --git a/chrome/browser/cart/cart_service.cc b/chrome/browser/cart/cart_service.cc
--- a/chrome/browser/cart/cart_service.cc
+++ b/chrome/browser/cart/cart_service.cc
@@ -490,7 +490,6 @@ void CartService::ShouldShowDiscountConsentCallback(
     for (auto proto_pair : proto_pairs) {
       auto cart_url = proto_pair.second.merchant_cart_url();
       should_show |= commerce::IsPartnerMerchant(GURL(cart_url));
-      should_show |= !commerce::IsNoDiscountMerchant(GURL(cart_url));
     }
 
     if (base::FeatureList::IsEnabled(commerce::kDiscountConsentV2)) {
diff --git a/chrome/browser/cart/fetch_discount_worker.cc b/chrome/browser/cart/fetch_discount_worker.cc
--- a/chrome/browser/cart/fetch_discount_worker.cc
+++ b/chrome/browser/cart/fetch_discount_worker.cc
@@ -151,16 +151,12 @@ void FetchDiscountWorker::ReadyToFetch(
   // If there is no eligible merchant cart, don't fetch immediately; instead,
   // post another delayed fetch.
   bool has_partner_merchant = false;
-  bool has_potential_merchant = false;
   for (auto pair : proto_pairs) {
     auto cart_url = pair.second.merchant_cart_url();
     bool is_partner_merchant = commerce::IsPartnerMerchant(GURL(cart_url));
-    bool is_potential_merchant =
-        !commerce::IsNoDiscountMerchant(GURL(cart_url));
     has_partner_merchant |= is_partner_merchant;
-    has_potential_merchant |= is_potential_merchant;
   }
-  if (has_partner_merchant || has_potential_merchant) {
+  if (has_partner_merchant) {
     backend_task_runner_->PostTask(
         FROM_HERE,
         base::BindOnce(
diff --git a/chrome/browser/ui/commerce/commerce_ui_tab_helper.cc b/chrome/browser/ui/commerce/commerce_ui_tab_helper.cc
--- a/chrome/browser/ui/commerce/commerce_ui_tab_helper.cc
+++ b/chrome/browser/ui/commerce/commerce_ui_tab_helper.cc
@@ -305,6 +305,54 @@ void CommerceUiTabHelper::HandlePriceInsightsInfoResponse(
   TriggerUpdateForIconView();
 }
 
+<<<<<<< HEAD
+||||||| parent of 11ae4ffa12307 (Disable commerce and discounts features)
+// TODO(b/351935350): Remove this.
+void CommerceUiTabHelper::HandleDiscountsResponse(const DiscountsMap& map) {
+  bool response_has_discounts = false;
+  if (!map.empty()) {
+    for (auto it = map.begin(); it == map.end(); ++it) {
+      if (!it->second.empty()) {
+        response_has_discounts = true;
+        break;
+      }
+    }
+  }
+
+  page_has_discounts_ =
+      response_has_discounts
+          ? shopping_service_->IsDiscountEligibleToShowOnNavigation() ||
+                commerce::UrlContainsDiscountUtmTag(
+                    web_contents()->GetLastCommittedURL())
+          : false;
+
+  got_discounts_response_for_page_ = true;
+  MaybeComputePageActionToExpand();
+}
+
+=======
+// TODO(b/351935350): Remove this.
+void CommerceUiTabHelper::HandleDiscountsResponse(const DiscountsMap& map) {
+  bool response_has_discounts = false;
+  if (!map.empty()) {
+    for (auto it = map.begin(); it == map.end(); ++it) {
+      if (!it->second.empty()) {
+        response_has_discounts = true;
+        break;
+      }
+    }
+  }
+
+  page_has_discounts_ =
+      response_has_discounts
+          ? shopping_service_->IsDiscountEligibleToShowOnNavigation()
+          : false;
+
+  got_discounts_response_for_page_ = true;
+  MaybeComputePageActionToExpand();
+}
+
+>>>>>>> 11ae4ffa12307 (Disable commerce and discounts features)
 void CommerceUiTabHelper::MaybeComputePageActionToExpand() {
   if (!shopping_service_) {
     return;
diff --git a/chrome/browser/ui/views/autofill/payments/offer_notification_bubble_views.cc b/chrome/browser/ui/views/autofill/payments/offer_notification_bubble_views.cc
--- a/chrome/browser/ui/views/autofill/payments/offer_notification_bubble_views.cc
+++ b/chrome/browser/ui/views/autofill/payments/offer_notification_bubble_views.cc
@@ -129,6 +129,159 @@ void OfferNotificationBubbleViews::InitWithCardLinkedOfferContent() {
   explanatory_message->SetMultiLine(true);
 }
 
+<<<<<<< HEAD
+||||||| parent of 11ae4ffa12307 (Disable commerce and discounts features)
+void OfferNotificationBubbleViews::InitWithFreeListingCouponOfferContent() {
+  // Promo code offers have no CTA buttons:
+  SetButtons(ui::DIALOG_BUTTON_NONE);
+
+  auto dialog_insets =
+      ChromeLayoutProvider::Get()->GetDialogInsetsForContentType(
+          views::DialogContentType::kControl, views::DialogContentType::kText);
+  set_margins(
+      gfx::Insets::TLBR(dialog_insets.top(), 0, dialog_insets.bottom(), 0));
+
+  SetLayoutManager(std::make_unique<views::FillLayout>());
+
+  GURL url = web_contents()->GetLastCommittedURL();
+  std::string seller_domain = url.spec();
+
+  free_listing_coupon_page_container_ =
+      AddChildView(std::make_unique<PageSwitcherView>(
+          CreateFreeListingCouponOfferMainPageContent(
+              *(controller_->GetOffer()), seller_domain)));
+}
+
+std::unique_ptr<views::View>
+OfferNotificationBubbleViews::CreateFreeListingCouponOfferMainPageContent(
+    const AutofillOfferData& offer,
+    const std::string& seller_domain) {
+  CHECK(!offer.GetPromoCode().empty());
+
+  auto main_page_view = std::make_unique<views::View>();
+
+  // Create bubble content:
+  gfx::Insets dialog_insets =
+      ChromeLayoutProvider::Get()->GetDialogInsetsForContentType(
+          views::DialogContentType::kControl, views::DialogContentType::kText);
+
+  auto* layout =
+      main_page_view->SetLayoutManager(std::make_unique<views::BoxLayout>(
+          views::BoxLayout::Orientation::kVertical,
+          gfx::Insets::TLBR(0, dialog_insets.left(), 0, dialog_insets.right()),
+          ChromeLayoutProvider::Get()->GetDistanceMetric(
+              views::DISTANCE_UNRELATED_CONTROL_VERTICAL)));
+  layout->set_cross_axis_alignment(
+      views::BoxLayout::CrossAxisAlignment::kStart);
+
+  promo_code_label_view_ =
+      main_page_view->AddChildView(std::make_unique<PromoCodeLabelView>(
+          base::ASCIIToUTF16(offer.GetPromoCode()),
+          base::BindRepeating(
+              &OfferNotificationBubbleViews::OnPromoCodeButtonClicked,
+              base::Unretained(this))));
+
+  auto promo_code_value_prop_string = l10n_util::GetStringUTF16(
+      IDS_AUTOFILL_PROMO_CODE_OFFERS_USE_THIS_CODE_TEXT);
+  auto expiration_date_text = l10n_util::GetStringFUTF16(
+      IDS_DISCOUNT_EXPIRATION_DATE, TimeFormatShortDate(offer.GetExpiry()));
+  if (promo_code_value_prop_string.empty()) {
+    promo_code_value_prop_string = expiration_date_text;
+  } else {
+    promo_code_value_prop_string = l10n_util::GetStringFUTF16(
+        IDS_TWO_STRINGS_CONNECTOR, promo_code_value_prop_string,
+        expiration_date_text);
+  }
+
+  promo_code_value_prop_label_ = main_page_view->AddChildView(
+      views::Builder<views::StyledLabel>()
+          .SetDefaultTextStyle(views::style::STYLE_SECONDARY)
+          .SetTextContext(views::style::CONTEXT_DIALOG_BODY_TEXT)
+          .SetHorizontalAlignment(gfx::ALIGN_LEFT)
+          .Build());
+
+  if (offer.GetTermsAndConditions().has_value() &&
+      !offer.GetTermsAndConditions().value().empty()) {
+    std::vector<size_t> offsets;
+    promo_code_value_prop_string = l10n_util::GetStringFUTF16(
+        IDS_TWO_STRINGS_CONNECTOR_WITH_SPACE, promo_code_value_prop_string,
+        l10n_util::GetStringUTF16(IDS_SEE_SELLER_TERMS_AND_CONDITIONS),
+        &offsets);
+    promo_code_value_prop_label_->SetText(promo_code_value_prop_string);
+    size_t terms_and_conditions_offset = offsets[1];
+    base::RepeatingCallback<void()> callback = base::BindRepeating(
+        &OfferNotificationBubbleViews::OpenTermsAndConditionsPage,
+        weak_factory_.GetWeakPtr(), offer, seller_domain);
+    views::StyledLabel::RangeStyleInfo terms_and_conditions_style_info =
+        views::StyledLabel::RangeStyleInfo::CreateForLink(std::move(callback));
+    promo_code_value_prop_label_->AddStyleRange(
+        gfx::Range(terms_and_conditions_offset,
+                   promo_code_value_prop_string.length()),
+        terms_and_conditions_style_info);
+  } else {
+    promo_code_value_prop_label_->SetText(promo_code_value_prop_string);
+  }
+
+  UpdateButtonTooltipsAndAccessibleNames();
+  return main_page_view;
+}
+
+=======
+void OfferNotificationBubbleViews::InitWithFreeListingCouponOfferContent() {
+  // Promo code offers have no CTA buttons:
+  SetButtons(ui::DIALOG_BUTTON_NONE);
+
+  auto dialog_insets =
+      ChromeLayoutProvider::Get()->GetDialogInsetsForContentType(
+          views::DialogContentType::kControl, views::DialogContentType::kText);
+  set_margins(
+      gfx::Insets::TLBR(dialog_insets.top(), 0, dialog_insets.bottom(), 0));
+
+  SetLayoutManager(std::make_unique<views::FillLayout>());
+
+  GURL url = web_contents()->GetLastCommittedURL();
+  std::string seller_domain = url.spec();
+
+  free_listing_coupon_page_container_ =
+      AddChildView(std::make_unique<PageSwitcherView>(
+          CreateFreeListingCouponOfferMainPageContent(
+              *(controller_->GetOffer()), seller_domain)));
+}
+
+std::unique_ptr<views::View>
+OfferNotificationBubbleViews::CreateFreeListingCouponOfferMainPageContent(
+    const AutofillOfferData& offer,
+    const std::string& seller_domain) {
+  CHECK(!offer.GetPromoCode().empty());
+
+  auto main_page_view = std::make_unique<views::View>();
+
+  // Create bubble content:
+  gfx::Insets dialog_insets =
+      ChromeLayoutProvider::Get()->GetDialogInsetsForContentType(
+          views::DialogContentType::kControl, views::DialogContentType::kText);
+
+  auto* layout =
+      main_page_view->SetLayoutManager(std::make_unique<views::BoxLayout>(
+          views::BoxLayout::Orientation::kVertical,
+          gfx::Insets::TLBR(0, dialog_insets.left(), 0, dialog_insets.right()),
+          ChromeLayoutProvider::Get()->GetDistanceMetric(
+              views::DISTANCE_UNRELATED_CONTROL_VERTICAL)));
+  layout->set_cross_axis_alignment(
+      views::BoxLayout::CrossAxisAlignment::kStart);
+
+  promo_code_label_view_ =
+      main_page_view->AddChildView(std::make_unique<PromoCodeLabelView>(
+          base::ASCIIToUTF16(offer.GetPromoCode()),
+          base::BindRepeating(
+              &OfferNotificationBubbleViews::OnPromoCodeButtonClicked,
+              base::Unretained(this))));
+
+  UpdateButtonTooltipsAndAccessibleNames();
+  return main_page_view;
+}
+
+>>>>>>> 11ae4ffa12307 (Disable commerce and discounts features)
 void OfferNotificationBubbleViews::InitWithGPayPromoCodeOfferContent() {
   // Promo code offers have no CTA buttons:
   SetButtons(ui::DIALOG_BUTTON_NONE);
diff --git a/components/commerce/core/commerce_feature_list.cc b/components/commerce/core/commerce_feature_list.cc
--- a/components/commerce/core/commerce_feature_list.cc
+++ b/components/commerce/core/commerce_feature_list.cc
@@ -354,6 +354,16 @@ const char kParcelTrackingTestDataParamDelivered[] = "Delivered";
 const char kParcelTrackingTestDataParamInProgress[] = "InProgress";
 const char kParcelTrackingTestDataParamOutForDelivery[] = "OutForDelivery";
 
+SET_CROMITE_FEATURE_DISABLED(kCommerceHintAndroid);
+SET_CROMITE_FEATURE_DISABLED(kCommercePriceTrackingRegionLaunched);
+SET_CROMITE_FEATURE_DISABLED(kShoppingListRegionLaunched);
+
+SET_CROMITE_FEATURE_DISABLED(kParcelTracking);
+SET_CROMITE_FEATURE_DISABLED(kParcelTrackingRegionLaunched);
+
+SET_CROMITE_FEATURE_DISABLED(kEnableDiscountInfoApi);
+SET_CROMITE_FEATURE_DISABLED(kEnableDiscountInfoApiRegionLaunched);
+
 // Params for Discount Consent V2 in the NTP Cart module.
 const char kNtpChromeCartModuleDiscountConsentNtpVariationParam[] =
     "discount-consent-ntp-variation";
-- 

